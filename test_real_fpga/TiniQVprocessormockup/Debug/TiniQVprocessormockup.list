
TiniQVprocessormockup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028d4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b3e0  08002aac  08002aac  00003aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de8c  0800de8c  0000f014  2**0
                  CONTENTS
  4 .ARM          00000000  0800de8c  0800de8c  0000f014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800de8c  0800de8c  0000f014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de8c  0800de8c  0000ee8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800de90  0800de90  0000ee90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0800de94  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000014  0800dea8  0000f014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  0800dea8  0000f0bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d6b  00000000  00000000  0000f044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dad  00000000  00000000  00017daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  00019b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000745  00000000  00000000  0001a548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e4a  00000000  00000000  0001ac8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0a1  00000000  00000000  0003fad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5543  00000000  00000000  0004bb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001310bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025d4  00000000  00000000  00131100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  001336d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002a94 	.word	0x08002a94

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	08002a94 	.word	0x08002a94

08000218 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000218:	b590      	push	{r4, r7, lr}
 800021a:	b085      	sub	sp, #20
 800021c:	af02      	add	r7, sp, #8
 800021e:	4604      	mov	r4, r0
 8000220:	4608      	mov	r0, r1
 8000222:	4611      	mov	r1, r2
 8000224:	461a      	mov	r2, r3
 8000226:	4623      	mov	r3, r4
 8000228:	80fb      	strh	r3, [r7, #6]
 800022a:	4603      	mov	r3, r0
 800022c:	80bb      	strh	r3, [r7, #4]
 800022e:	460b      	mov	r3, r1
 8000230:	807b      	strh	r3, [r7, #2]
 8000232:	4613      	mov	r3, r2
 8000234:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000236:	88f8      	ldrh	r0, [r7, #6]
 8000238:	88b9      	ldrh	r1, [r7, #4]
 800023a:	887a      	ldrh	r2, [r7, #2]
 800023c:	883c      	ldrh	r4, [r7, #0]
 800023e:	8b3b      	ldrh	r3, [r7, #24]
 8000240:	9300      	str	r3, [sp, #0]
 8000242:	4623      	mov	r3, r4
 8000244:	f000 faca 	bl	80007dc <ST7735_FillRectangle>
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	bd90      	pop	{r4, r7, pc}

08000250 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af02      	add	r7, sp, #8
 8000256:	4603      	mov	r3, r0
 8000258:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800025a:	4b08      	ldr	r3, [pc, #32]	@ (800027c <fillScreen+0x2c>)
 800025c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000260:	4b07      	ldr	r3, [pc, #28]	@ (8000280 <fillScreen+0x30>)
 8000262:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000266:	88fb      	ldrh	r3, [r7, #6]
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	460b      	mov	r3, r1
 800026c:	2100      	movs	r1, #0
 800026e:	2000      	movs	r0, #0
 8000270:	f7ff ffd2 	bl	8000218 <fillRect>
}
 8000274:	bf00      	nop
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000030 	.word	0x20000030
 8000280:	20000032 	.word	0x20000032

08000284 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	2140      	movs	r1, #64	@ 0x40
 800028c:	4802      	ldr	r0, [pc, #8]	@ (8000298 <ST7735_Select+0x14>)
 800028e:	f001 fa8d 	bl	80017ac <HAL_GPIO_WritePin>
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	48000400 	.word	0x48000400

0800029c <ST7735_Unselect>:

void ST7735_Unselect()
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80002a0:	2201      	movs	r2, #1
 80002a2:	2140      	movs	r1, #64	@ 0x40
 80002a4:	4802      	ldr	r0, [pc, #8]	@ (80002b0 <ST7735_Unselect+0x14>)
 80002a6:	f001 fa81 	bl	80017ac <HAL_GPIO_WritePin>
}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	48000400 	.word	0x48000400

080002b4 <ST7735_Reset>:

void ST7735_Reset()
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80002b8:	2200      	movs	r2, #0
 80002ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002c2:	f001 fa73 	bl	80017ac <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80002c6:	2005      	movs	r0, #5
 80002c8:	f000 ffd0 	bl	800126c <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002d6:	f001 fa69 	bl	80017ac <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80002da:	2001      	movs	r0, #1
 80002dc:	f000 ffc6 	bl	800126c <HAL_Delay>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2180      	movs	r1, #128	@ 0x80
 80002f2:	4807      	ldr	r0, [pc, #28]	@ (8000310 <ST7735_WriteCommand+0x2c>)
 80002f4:	f001 fa5a 	bl	80017ac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80002f8:	1df9      	adds	r1, r7, #7
 80002fa:	f04f 33ff 	mov.w	r3, #4294967295
 80002fe:	2201      	movs	r2, #1
 8000300:	4804      	ldr	r0, [pc, #16]	@ (8000314 <ST7735_WriteCommand+0x30>)
 8000302:	f002 f8c0 	bl	8002486 <HAL_SPI_Transmit>
}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	48000800 	.word	0x48000800
 8000314:	20000054 	.word	0x20000054

08000318 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000322:	2201      	movs	r2, #1
 8000324:	2180      	movs	r1, #128	@ 0x80
 8000326:	4807      	ldr	r0, [pc, #28]	@ (8000344 <ST7735_WriteData+0x2c>)
 8000328:	f001 fa40 	bl	80017ac <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	b29a      	uxth	r2, r3
 8000330:	f04f 33ff 	mov.w	r3, #4294967295
 8000334:	6879      	ldr	r1, [r7, #4]
 8000336:	4804      	ldr	r0, [pc, #16]	@ (8000348 <ST7735_WriteData+0x30>)
 8000338:	f002 f8a5 	bl	8002486 <HAL_SPI_Transmit>
}
 800033c:	bf00      	nop
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	48000800 	.word	0x48000800
 8000348:	20000054 	.word	0x20000054

0800034c <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	1c5a      	adds	r2, r3, #1
 8000358:	607a      	str	r2, [r7, #4]
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800035e:	e034      	b.n	80003ca <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	1c5a      	adds	r2, r3, #1
 8000364:	607a      	str	r2, [r7, #4]
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800036a:	7afb      	ldrb	r3, [r7, #11]
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff ffb9 	bl	80002e4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	1c5a      	adds	r2, r3, #1
 8000376:	607a      	str	r2, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800037c:	7abb      	ldrb	r3, [r7, #10]
 800037e:	b29b      	uxth	r3, r3
 8000380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000384:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000386:	7abb      	ldrb	r3, [r7, #10]
 8000388:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800038c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800038e:	7abb      	ldrb	r3, [r7, #10]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d008      	beq.n	80003a6 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000394:	7abb      	ldrb	r3, [r7, #10]
 8000396:	4619      	mov	r1, r3
 8000398:	6878      	ldr	r0, [r7, #4]
 800039a:	f7ff ffbd 	bl	8000318 <ST7735_WriteData>
            addr += numArgs;
 800039e:	7abb      	ldrb	r3, [r7, #10]
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	4413      	add	r3, r2
 80003a4:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80003a6:	89bb      	ldrh	r3, [r7, #12]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d00e      	beq.n	80003ca <DisplayInit+0x7e>
            ms = *addr++;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	1c5a      	adds	r2, r3, #1
 80003b0:	607a      	str	r2, [r7, #4]
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80003b6:	89bb      	ldrh	r3, [r7, #12]
 80003b8:	2bff      	cmp	r3, #255	@ 0xff
 80003ba:	d102      	bne.n	80003c2 <DisplayInit+0x76>
 80003bc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80003c0:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80003c2:	89bb      	ldrh	r3, [r7, #12]
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 ff51 	bl	800126c <HAL_Delay>
    while(numCommands--) {
 80003ca:	7bfb      	ldrb	r3, [r7, #15]
 80003cc:	1e5a      	subs	r2, r3, #1
 80003ce:	73fa      	strb	r2, [r7, #15]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d1c5      	bne.n	8000360 <DisplayInit+0x14>
        }
    }
}
 80003d4:	bf00      	nop
 80003d6:	bf00      	nop
 80003d8:	3710      	adds	r7, #16
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80003e0:	b590      	push	{r4, r7, lr}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4604      	mov	r4, r0
 80003e8:	4608      	mov	r0, r1
 80003ea:	4611      	mov	r1, r2
 80003ec:	461a      	mov	r2, r3
 80003ee:	4623      	mov	r3, r4
 80003f0:	71fb      	strb	r3, [r7, #7]
 80003f2:	4603      	mov	r3, r0
 80003f4:	71bb      	strb	r3, [r7, #6]
 80003f6:	460b      	mov	r3, r1
 80003f8:	717b      	strb	r3, [r7, #5]
 80003fa:	4613      	mov	r3, r2
 80003fc:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80003fe:	202a      	movs	r0, #42	@ 0x2a
 8000400:	f7ff ff70 	bl	80002e4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000404:	2300      	movs	r3, #0
 8000406:	733b      	strb	r3, [r7, #12]
 8000408:	4b17      	ldr	r3, [pc, #92]	@ (8000468 <ST7735_SetAddressWindow+0x88>)
 800040a:	781a      	ldrb	r2, [r3, #0]
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	4413      	add	r3, r2
 8000410:	b2db      	uxtb	r3, r3
 8000412:	737b      	strb	r3, [r7, #13]
 8000414:	2300      	movs	r3, #0
 8000416:	73bb      	strb	r3, [r7, #14]
 8000418:	4b13      	ldr	r3, [pc, #76]	@ (8000468 <ST7735_SetAddressWindow+0x88>)
 800041a:	781a      	ldrb	r2, [r3, #0]
 800041c:	797b      	ldrb	r3, [r7, #5]
 800041e:	4413      	add	r3, r2
 8000420:	b2db      	uxtb	r3, r3
 8000422:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000424:	f107 030c 	add.w	r3, r7, #12
 8000428:	2104      	movs	r1, #4
 800042a:	4618      	mov	r0, r3
 800042c:	f7ff ff74 	bl	8000318 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000430:	202b      	movs	r0, #43	@ 0x2b
 8000432:	f7ff ff57 	bl	80002e4 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000436:	4b0d      	ldr	r3, [pc, #52]	@ (800046c <ST7735_SetAddressWindow+0x8c>)
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	79bb      	ldrb	r3, [r7, #6]
 800043c:	4413      	add	r3, r2
 800043e:	b2db      	uxtb	r3, r3
 8000440:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000442:	4b0a      	ldr	r3, [pc, #40]	@ (800046c <ST7735_SetAddressWindow+0x8c>)
 8000444:	781a      	ldrb	r2, [r3, #0]
 8000446:	793b      	ldrb	r3, [r7, #4]
 8000448:	4413      	add	r3, r2
 800044a:	b2db      	uxtb	r3, r3
 800044c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800044e:	f107 030c 	add.w	r3, r7, #12
 8000452:	2104      	movs	r1, #4
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff ff5f 	bl	8000318 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800045a:	202c      	movs	r0, #44	@ 0x2c
 800045c:	f7ff ff42 	bl	80002e4 <ST7735_WriteCommand>
}
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	bd90      	pop	{r4, r7, pc}
 8000468:	20000037 	.word	0x20000037
 800046c:	20000038 	.word	0x20000038

08000470 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800047a:	f7ff ff03 	bl	8000284 <ST7735_Select>
    ST7735_Reset();
 800047e:	f7ff ff19 	bl	80002b4 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000482:	480c      	ldr	r0, [pc, #48]	@ (80004b4 <ST7735_Init+0x44>)
 8000484:	f7ff ff62 	bl	800034c <DisplayInit>
    DisplayInit(init_cmds2);
 8000488:	480b      	ldr	r0, [pc, #44]	@ (80004b8 <ST7735_Init+0x48>)
 800048a:	f7ff ff5f 	bl	800034c <DisplayInit>
    DisplayInit(init_cmds3);
 800048e:	480b      	ldr	r0, [pc, #44]	@ (80004bc <ST7735_Init+0x4c>)
 8000490:	f7ff ff5c 	bl	800034c <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8000494:	4b0a      	ldr	r3, [pc, #40]	@ (80004c0 <ST7735_Init+0x50>)
 8000496:	2200      	movs	r2, #0
 8000498:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800049a:	4b0a      	ldr	r3, [pc, #40]	@ (80004c4 <ST7735_Init+0x54>)
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 f810 	bl	80004c8 <ST7735_SetRotation>
    ST7735_Unselect();
 80004a8:	f7ff fef8 	bl	800029c <ST7735_Unselect>

}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	08002abc 	.word	0x08002abc
 80004b8:	08002af4 	.word	0x08002af4
 80004bc:	08002b04 	.word	0x08002b04
 80004c0:	20000035 	.word	0x20000035
 80004c4:	20000036 	.word	0x20000036

080004c8 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	f003 0303 	and.w	r3, r3, #3
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	4b33      	ldr	r3, [pc, #204]	@ (80005ac <ST7735_SetRotation+0xe4>)
 80004e0:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80004e2:	4b32      	ldr	r3, [pc, #200]	@ (80005ac <ST7735_SetRotation+0xe4>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b03      	cmp	r3, #3
 80004e8:	d84e      	bhi.n	8000588 <ST7735_SetRotation+0xc0>
 80004ea:	a201      	add	r2, pc, #4	@ (adr r2, 80004f0 <ST7735_SetRotation+0x28>)
 80004ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f0:	08000501 	.word	0x08000501
 80004f4:	08000523 	.word	0x08000523
 80004f8:	08000545 	.word	0x08000545
 80004fc:	08000567 	.word	0x08000567
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000500:	23c0      	movs	r3, #192	@ 0xc0
 8000502:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000504:	4b2a      	ldr	r3, [pc, #168]	@ (80005b0 <ST7735_SetRotation+0xe8>)
 8000506:	22a0      	movs	r2, #160	@ 0xa0
 8000508:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800050a:	4b2a      	ldr	r3, [pc, #168]	@ (80005b4 <ST7735_SetRotation+0xec>)
 800050c:	2280      	movs	r2, #128	@ 0x80
 800050e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000510:	4b29      	ldr	r3, [pc, #164]	@ (80005b8 <ST7735_SetRotation+0xf0>)
 8000512:	781a      	ldrb	r2, [r3, #0]
 8000514:	4b29      	ldr	r3, [pc, #164]	@ (80005bc <ST7735_SetRotation+0xf4>)
 8000516:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000518:	4b29      	ldr	r3, [pc, #164]	@ (80005c0 <ST7735_SetRotation+0xf8>)
 800051a:	781a      	ldrb	r2, [r3, #0]
 800051c:	4b29      	ldr	r3, [pc, #164]	@ (80005c4 <ST7735_SetRotation+0xfc>)
 800051e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000520:	e032      	b.n	8000588 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000522:	23a0      	movs	r3, #160	@ 0xa0
 8000524:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000526:	4b23      	ldr	r3, [pc, #140]	@ (80005b4 <ST7735_SetRotation+0xec>)
 8000528:	22a0      	movs	r2, #160	@ 0xa0
 800052a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800052c:	4b20      	ldr	r3, [pc, #128]	@ (80005b0 <ST7735_SetRotation+0xe8>)
 800052e:	2280      	movs	r2, #128	@ 0x80
 8000530:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000532:	4b21      	ldr	r3, [pc, #132]	@ (80005b8 <ST7735_SetRotation+0xf0>)
 8000534:	781a      	ldrb	r2, [r3, #0]
 8000536:	4b23      	ldr	r3, [pc, #140]	@ (80005c4 <ST7735_SetRotation+0xfc>)
 8000538:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800053a:	4b21      	ldr	r3, [pc, #132]	@ (80005c0 <ST7735_SetRotation+0xf8>)
 800053c:	781a      	ldrb	r2, [r3, #0]
 800053e:	4b1f      	ldr	r3, [pc, #124]	@ (80005bc <ST7735_SetRotation+0xf4>)
 8000540:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000542:	e021      	b.n	8000588 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000544:	2300      	movs	r3, #0
 8000546:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000548:	4b19      	ldr	r3, [pc, #100]	@ (80005b0 <ST7735_SetRotation+0xe8>)
 800054a:	22a0      	movs	r2, #160	@ 0xa0
 800054c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800054e:	4b19      	ldr	r3, [pc, #100]	@ (80005b4 <ST7735_SetRotation+0xec>)
 8000550:	2280      	movs	r2, #128	@ 0x80
 8000552:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000554:	4b18      	ldr	r3, [pc, #96]	@ (80005b8 <ST7735_SetRotation+0xf0>)
 8000556:	781a      	ldrb	r2, [r3, #0]
 8000558:	4b18      	ldr	r3, [pc, #96]	@ (80005bc <ST7735_SetRotation+0xf4>)
 800055a:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 800055c:	4b18      	ldr	r3, [pc, #96]	@ (80005c0 <ST7735_SetRotation+0xf8>)
 800055e:	781a      	ldrb	r2, [r3, #0]
 8000560:	4b18      	ldr	r3, [pc, #96]	@ (80005c4 <ST7735_SetRotation+0xfc>)
 8000562:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000564:	e010      	b.n	8000588 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000566:	2360      	movs	r3, #96	@ 0x60
 8000568:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800056a:	4b12      	ldr	r3, [pc, #72]	@ (80005b4 <ST7735_SetRotation+0xec>)
 800056c:	22a0      	movs	r2, #160	@ 0xa0
 800056e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000570:	4b0f      	ldr	r3, [pc, #60]	@ (80005b0 <ST7735_SetRotation+0xe8>)
 8000572:	2280      	movs	r2, #128	@ 0x80
 8000574:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000576:	4b10      	ldr	r3, [pc, #64]	@ (80005b8 <ST7735_SetRotation+0xf0>)
 8000578:	781a      	ldrb	r2, [r3, #0]
 800057a:	4b12      	ldr	r3, [pc, #72]	@ (80005c4 <ST7735_SetRotation+0xfc>)
 800057c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800057e:	4b10      	ldr	r3, [pc, #64]	@ (80005c0 <ST7735_SetRotation+0xf8>)
 8000580:	781a      	ldrb	r2, [r3, #0]
 8000582:	4b0e      	ldr	r3, [pc, #56]	@ (80005bc <ST7735_SetRotation+0xf4>)
 8000584:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000586:	bf00      	nop
  }
  ST7735_Select();
 8000588:	f7ff fe7c 	bl	8000284 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800058c:	2036      	movs	r0, #54	@ 0x36
 800058e:	f7ff fea9 	bl	80002e4 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000592:	f107 030f 	add.w	r3, r7, #15
 8000596:	2101      	movs	r1, #1
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff febd 	bl	8000318 <ST7735_WriteData>
  ST7735_Unselect();
 800059e:	f7ff fe7d 	bl	800029c <ST7735_Unselect>
}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000034 	.word	0x20000034
 80005b0:	20000032 	.word	0x20000032
 80005b4:	20000030 	.word	0x20000030
 80005b8:	20000035 	.word	0x20000035
 80005bc:	20000037 	.word	0x20000037
 80005c0:	20000036 	.word	0x20000036
 80005c4:	20000038 	.word	0x20000038

080005c8 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]
 80005d2:	460b      	mov	r3, r1
 80005d4:	80bb      	strh	r3, [r7, #4]
 80005d6:	4613      	mov	r3, r2
 80005d8:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	4a17      	ldr	r2, [pc, #92]	@ (800063c <ST7735_DrawPixel+0x74>)
 80005de:	f9b2 2000 	ldrsh.w	r2, [r2]
 80005e2:	4293      	cmp	r3, r2
 80005e4:	da26      	bge.n	8000634 <ST7735_DrawPixel+0x6c>
 80005e6:	88bb      	ldrh	r3, [r7, #4]
 80005e8:	4a15      	ldr	r2, [pc, #84]	@ (8000640 <ST7735_DrawPixel+0x78>)
 80005ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 80005ee:	4293      	cmp	r3, r2
 80005f0:	da20      	bge.n	8000634 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 80005f2:	f7ff fe47 	bl	8000284 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	b2d8      	uxtb	r0, r3
 80005fa:	88bb      	ldrh	r3, [r7, #4]
 80005fc:	b2d9      	uxtb	r1, r3
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	3301      	adds	r3, #1
 8000604:	b2da      	uxtb	r2, r3
 8000606:	88bb      	ldrh	r3, [r7, #4]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	3301      	adds	r3, #1
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f7ff fee7 	bl	80003e0 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000612:	887b      	ldrh	r3, [r7, #2]
 8000614:	0a1b      	lsrs	r3, r3, #8
 8000616:	b29b      	uxth	r3, r3
 8000618:	b2db      	uxtb	r3, r3
 800061a:	733b      	strb	r3, [r7, #12]
 800061c:	887b      	ldrh	r3, [r7, #2]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	2102      	movs	r1, #2
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fe75 	bl	8000318 <ST7735_WriteData>

    ST7735_Unselect();
 800062e:	f7ff fe35 	bl	800029c <ST7735_Unselect>
 8000632:	e000      	b.n	8000636 <ST7735_DrawPixel+0x6e>
        return;
 8000634:	bf00      	nop
}
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000030 	.word	0x20000030
 8000640:	20000032 	.word	0x20000032

08000644 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000644:	b082      	sub	sp, #8
 8000646:	b590      	push	{r4, r7, lr}
 8000648:	b089      	sub	sp, #36	@ 0x24
 800064a:	af00      	add	r7, sp, #0
 800064c:	637b      	str	r3, [r7, #52]	@ 0x34
 800064e:	4603      	mov	r3, r0
 8000650:	80fb      	strh	r3, [r7, #6]
 8000652:	460b      	mov	r3, r1
 8000654:	80bb      	strh	r3, [r7, #4]
 8000656:	4613      	mov	r3, r2
 8000658:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	b2d8      	uxtb	r0, r3
 800065e:	88bb      	ldrh	r3, [r7, #4]
 8000660:	b2d9      	uxtb	r1, r3
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	b2da      	uxtb	r2, r3
 8000666:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800066a:	4413      	add	r3, r2
 800066c:	b2db      	uxtb	r3, r3
 800066e:	3b01      	subs	r3, #1
 8000670:	b2dc      	uxtb	r4, r3
 8000672:	88bb      	ldrh	r3, [r7, #4]
 8000674:	b2da      	uxtb	r2, r3
 8000676:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800067a:	4413      	add	r3, r2
 800067c:	b2db      	uxtb	r3, r3
 800067e:	3b01      	subs	r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	4622      	mov	r2, r4
 8000684:	f7ff feac 	bl	80003e0 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
 800068c:	e043      	b.n	8000716 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800068e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	3b20      	subs	r3, #32
 8000694:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000698:	fb01 f303 	mul.w	r3, r1, r3
 800069c:	4619      	mov	r1, r3
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	440b      	add	r3, r1
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
 80006ae:	e029      	b.n	8000704 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	69bb      	ldr	r3, [r7, #24]
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d00e      	beq.n	80006de <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80006c0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80006c2:	0a1b      	lsrs	r3, r3, #8
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	743b      	strb	r3, [r7, #16]
 80006ca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	2102      	movs	r1, #2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fe1e 	bl	8000318 <ST7735_WriteData>
 80006dc:	e00f      	b.n	80006fe <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80006de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80006e2:	0a1b      	lsrs	r3, r3, #8
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	733b      	strb	r3, [r7, #12]
 80006ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2102      	movs	r1, #2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fe0d 	bl	8000318 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	3301      	adds	r3, #1
 8000702:	61bb      	str	r3, [r7, #24]
 8000704:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000708:	461a      	mov	r2, r3
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	4293      	cmp	r3, r2
 800070e:	d3cf      	bcc.n	80006b0 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	3301      	adds	r3, #1
 8000714:	61fb      	str	r3, [r7, #28]
 8000716:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800071a:	461a      	mov	r2, r3
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	4293      	cmp	r3, r2
 8000720:	d3b5      	bcc.n	800068e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000722:	bf00      	nop
 8000724:	bf00      	nop
 8000726:	3724      	adds	r7, #36	@ 0x24
 8000728:	46bd      	mov	sp, r7
 800072a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800072e:	b002      	add	sp, #8
 8000730:	4770      	bx	lr
	...

08000734 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000734:	b082      	sub	sp, #8
 8000736:	b580      	push	{r7, lr}
 8000738:	b086      	sub	sp, #24
 800073a:	af04      	add	r7, sp, #16
 800073c:	603a      	str	r2, [r7, #0]
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	4603      	mov	r3, r0
 8000742:	80fb      	strh	r3, [r7, #6]
 8000744:	460b      	mov	r3, r1
 8000746:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000748:	f7ff fd9c 	bl	8000284 <ST7735_Select>

    while(*str) {
 800074c:	e033      	b.n	80007b6 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	7d3a      	ldrb	r2, [r7, #20]
 8000752:	4413      	add	r3, r2
 8000754:	4a1f      	ldr	r2, [pc, #124]	@ (80007d4 <ST7735_WriteString+0xa0>)
 8000756:	f9b2 2000 	ldrsh.w	r2, [r2]
 800075a:	4293      	cmp	r3, r2
 800075c:	db16      	blt.n	800078c <ST7735_WriteString+0x58>
            x = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000762:	7d7b      	ldrb	r3, [r7, #21]
 8000764:	461a      	mov	r2, r3
 8000766:	88bb      	ldrh	r3, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 800076c:	88bb      	ldrh	r3, [r7, #4]
 800076e:	7d7a      	ldrb	r2, [r7, #21]
 8000770:	4413      	add	r3, r2
 8000772:	4a19      	ldr	r2, [pc, #100]	@ (80007d8 <ST7735_WriteString+0xa4>)
 8000774:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000778:	4293      	cmp	r3, r2
 800077a:	da21      	bge.n	80007c0 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b20      	cmp	r3, #32
 8000782:	d103      	bne.n	800078c <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	3301      	adds	r3, #1
 8000788:	603b      	str	r3, [r7, #0]
                continue;
 800078a:	e014      	b.n	80007b6 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	781a      	ldrb	r2, [r3, #0]
 8000790:	88b9      	ldrh	r1, [r7, #4]
 8000792:	88f8      	ldrh	r0, [r7, #6]
 8000794:	8c3b      	ldrh	r3, [r7, #32]
 8000796:	9302      	str	r3, [sp, #8]
 8000798:	8bbb      	ldrh	r3, [r7, #28]
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	f7ff ff4f 	bl	8000644 <ST7735_WriteChar>
        x += font.width;
 80007a6:	7d3b      	ldrb	r3, [r7, #20]
 80007a8:	461a      	mov	r2, r3
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	4413      	add	r3, r2
 80007ae:	80fb      	strh	r3, [r7, #6]
        str++;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	3301      	adds	r3, #1
 80007b4:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1c7      	bne.n	800074e <ST7735_WriteString+0x1a>
 80007be:	e000      	b.n	80007c2 <ST7735_WriteString+0x8e>
                break;
 80007c0:	bf00      	nop
    }

    ST7735_Unselect();
 80007c2:	f7ff fd6b 	bl	800029c <ST7735_Unselect>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007d0:	b002      	add	sp, #8
 80007d2:	4770      	bx	lr
 80007d4:	20000030 	.word	0x20000030
 80007d8:	20000032 	.word	0x20000032

080007dc <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4604      	mov	r4, r0
 80007e4:	4608      	mov	r0, r1
 80007e6:	4611      	mov	r1, r2
 80007e8:	461a      	mov	r2, r3
 80007ea:	4623      	mov	r3, r4
 80007ec:	80fb      	strh	r3, [r7, #6]
 80007ee:	4603      	mov	r3, r0
 80007f0:	80bb      	strh	r3, [r7, #4]
 80007f2:	460b      	mov	r3, r1
 80007f4:	807b      	strh	r3, [r7, #2]
 80007f6:	4613      	mov	r3, r2
 80007f8:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 80007fa:	88fb      	ldrh	r3, [r7, #6]
 80007fc:	4a37      	ldr	r2, [pc, #220]	@ (80008dc <ST7735_FillRectangle+0x100>)
 80007fe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000802:	4293      	cmp	r3, r2
 8000804:	da66      	bge.n	80008d4 <ST7735_FillRectangle+0xf8>
 8000806:	88bb      	ldrh	r3, [r7, #4]
 8000808:	4a35      	ldr	r2, [pc, #212]	@ (80008e0 <ST7735_FillRectangle+0x104>)
 800080a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800080e:	4293      	cmp	r3, r2
 8000810:	da60      	bge.n	80008d4 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8000812:	88fa      	ldrh	r2, [r7, #6]
 8000814:	887b      	ldrh	r3, [r7, #2]
 8000816:	4413      	add	r3, r2
 8000818:	4a30      	ldr	r2, [pc, #192]	@ (80008dc <ST7735_FillRectangle+0x100>)
 800081a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800081e:	4293      	cmp	r3, r2
 8000820:	dd06      	ble.n	8000830 <ST7735_FillRectangle+0x54>
 8000822:	4b2e      	ldr	r3, [pc, #184]	@ (80008dc <ST7735_FillRectangle+0x100>)
 8000824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000828:	b29a      	uxth	r2, r3
 800082a:	88fb      	ldrh	r3, [r7, #6]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000830:	88ba      	ldrh	r2, [r7, #4]
 8000832:	883b      	ldrh	r3, [r7, #0]
 8000834:	4413      	add	r3, r2
 8000836:	4a2a      	ldr	r2, [pc, #168]	@ (80008e0 <ST7735_FillRectangle+0x104>)
 8000838:	f9b2 2000 	ldrsh.w	r2, [r2]
 800083c:	4293      	cmp	r3, r2
 800083e:	dd06      	ble.n	800084e <ST7735_FillRectangle+0x72>
 8000840:	4b27      	ldr	r3, [pc, #156]	@ (80008e0 <ST7735_FillRectangle+0x104>)
 8000842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000846:	b29a      	uxth	r2, r3
 8000848:	88bb      	ldrh	r3, [r7, #4]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800084e:	f7ff fd19 	bl	8000284 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	b2d8      	uxtb	r0, r3
 8000856:	88bb      	ldrh	r3, [r7, #4]
 8000858:	b2d9      	uxtb	r1, r3
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	b2da      	uxtb	r2, r3
 800085e:	887b      	ldrh	r3, [r7, #2]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4413      	add	r3, r2
 8000864:	b2db      	uxtb	r3, r3
 8000866:	3b01      	subs	r3, #1
 8000868:	b2dc      	uxtb	r4, r3
 800086a:	88bb      	ldrh	r3, [r7, #4]
 800086c:	b2da      	uxtb	r2, r3
 800086e:	883b      	ldrh	r3, [r7, #0]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4413      	add	r3, r2
 8000874:	b2db      	uxtb	r3, r3
 8000876:	3b01      	subs	r3, #1
 8000878:	b2db      	uxtb	r3, r3
 800087a:	4622      	mov	r2, r4
 800087c:	f7ff fdb0 	bl	80003e0 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000880:	8c3b      	ldrh	r3, [r7, #32]
 8000882:	0a1b      	lsrs	r3, r3, #8
 8000884:	b29b      	uxth	r3, r3
 8000886:	b2db      	uxtb	r3, r3
 8000888:	733b      	strb	r3, [r7, #12]
 800088a:	8c3b      	ldrh	r3, [r7, #32]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	4813      	ldr	r0, [pc, #76]	@ (80008e4 <ST7735_FillRectangle+0x108>)
 8000896:	f000 ff89 	bl	80017ac <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800089a:	883b      	ldrh	r3, [r7, #0]
 800089c:	80bb      	strh	r3, [r7, #4]
 800089e:	e013      	b.n	80008c8 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 80008a0:	887b      	ldrh	r3, [r7, #2]
 80008a2:	80fb      	strh	r3, [r7, #6]
 80008a4:	e00a      	b.n	80008bc <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80008a6:	f107 010c 	add.w	r1, r7, #12
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	2202      	movs	r2, #2
 80008b0:	480d      	ldr	r0, [pc, #52]	@ (80008e8 <ST7735_FillRectangle+0x10c>)
 80008b2:	f001 fde8 	bl	8002486 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	80fb      	strh	r3, [r7, #6]
 80008bc:	88fb      	ldrh	r3, [r7, #6]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1f1      	bne.n	80008a6 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 80008c2:	88bb      	ldrh	r3, [r7, #4]
 80008c4:	3b01      	subs	r3, #1
 80008c6:	80bb      	strh	r3, [r7, #4]
 80008c8:	88bb      	ldrh	r3, [r7, #4]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1e8      	bne.n	80008a0 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 80008ce:	f7ff fce5 	bl	800029c <ST7735_Unselect>
 80008d2:	e000      	b.n	80008d6 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 80008d4:	bf00      	nop
}
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd90      	pop	{r4, r7, pc}
 80008dc:	20000030 	.word	0x20000030
 80008e0:	20000032 	.word	0x20000032
 80008e4:	48000800 	.word	0x48000800
 80008e8:	20000054 	.word	0x20000054

080008ec <paintImage>:
    ST7735_Select();
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
    ST7735_Unselect();
}

void paintImage(const uint16_t image[160][128]) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
    for (int y = 0; y < 160; y++) {
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	e019      	b.n	800092e <paintImage+0x42>
        for (int x = 0; x < 128; x++) {
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	e010      	b.n	8000922 <paintImage+0x36>
            ST7735_DrawPixel(x, y, image[y][x]);
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	b298      	uxth	r0, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	b299      	uxth	r1, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	4413      	add	r3, r2
 8000910:	68ba      	ldr	r2, [r7, #8]
 8000912:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000916:	461a      	mov	r2, r3
 8000918:	f7ff fe56 	bl	80005c8 <ST7735_DrawPixel>
        for (int x = 0; x < 128; x++) {
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	3301      	adds	r3, #1
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	2b7f      	cmp	r3, #127	@ 0x7f
 8000926:	ddeb      	ble.n	8000900 <paintImage+0x14>
    for (int y = 0; y < 160; y++) {
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3301      	adds	r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2b9f      	cmp	r3, #159	@ 0x9f
 8000932:	dde2      	ble.n	80008fa <paintImage+0xe>
        }
    }
}
 8000934:	bf00      	nop
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <from_byte_to_gpio_status>:
GPIO_PinState data_write_wire;
GPIO_PinState addr_bus[4];
GPIO_PinState data_in_bus[8];
GPIO_PinState data_out_bus[8];

void from_byte_to_gpio_status(uint8_t byte, uint8_t* gpio_status_array, uint8_t bit_size) {
 800093e:	b480      	push	{r7}
 8000940:	b085      	sub	sp, #20
 8000942:	af00      	add	r7, sp, #0
 8000944:	4603      	mov	r3, r0
 8000946:	6039      	str	r1, [r7, #0]
 8000948:	71fb      	strb	r3, [r7, #7]
 800094a:	4613      	mov	r3, r2
 800094c:	71bb      	strb	r3, [r7, #6]
	if (gpio_status_array == NULL) return;
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d01b      	beq.n	800098c <from_byte_to_gpio_status+0x4e>
	if (bit_size > 8) bit_size = 8;
 8000954:	79bb      	ldrb	r3, [r7, #6]
 8000956:	2b08      	cmp	r3, #8
 8000958:	d901      	bls.n	800095e <from_byte_to_gpio_status+0x20>
 800095a:	2308      	movs	r3, #8
 800095c:	71bb      	strb	r3, [r7, #6]

	for (uint8_t i = 0; i < bit_size; ++i) {
 800095e:	2300      	movs	r3, #0
 8000960:	73fb      	strb	r3, [r7, #15]
 8000962:	e00e      	b.n	8000982 <from_byte_to_gpio_status+0x44>
		gpio_status_array[i] = (byte >> i) & 0x1 ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	fa42 f303 	asr.w	r3, r2, r3
 800096c:	b2da      	uxtb	r2, r3
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	6839      	ldr	r1, [r7, #0]
 8000972:	440b      	add	r3, r1
 8000974:	f002 0201 	and.w	r2, r2, #1
 8000978:	b2d2      	uxtb	r2, r2
 800097a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < bit_size; ++i) {
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	3301      	adds	r3, #1
 8000980:	73fb      	strb	r3, [r7, #15]
 8000982:	7bfa      	ldrb	r2, [r7, #15]
 8000984:	79bb      	ldrb	r3, [r7, #6]
 8000986:	429a      	cmp	r2, r3
 8000988:	d3ec      	bcc.n	8000964 <from_byte_to_gpio_status+0x26>
 800098a:	e000      	b.n	800098e <from_byte_to_gpio_status+0x50>
	if (gpio_status_array == NULL) return;
 800098c:	bf00      	nop
	}
}
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <from_gpiostatus_to_byte>:

uint8_t from_gpiostatus_to_byte(uint8_t* gpio_status_array, uint8_t bit_size) {
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	70fb      	strb	r3, [r7, #3]
	if (gpio_status_array == NULL) return 0;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d101      	bne.n	80009ae <from_gpiostatus_to_byte+0x16>
 80009aa:	2300      	movs	r3, #0
 80009ac:	e021      	b.n	80009f2 <from_gpiostatus_to_byte+0x5a>
	if (bit_size > 8) bit_size = 8;
 80009ae:	78fb      	ldrb	r3, [r7, #3]
 80009b0:	2b08      	cmp	r3, #8
 80009b2:	d901      	bls.n	80009b8 <from_gpiostatus_to_byte+0x20>
 80009b4:	2308      	movs	r3, #8
 80009b6:	70fb      	strb	r3, [r7, #3]

	uint8_t byte = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < bit_size; ++i) {
 80009bc:	2300      	movs	r3, #0
 80009be:	73bb      	strb	r3, [r7, #14]
 80009c0:	e012      	b.n	80009e8 <from_gpiostatus_to_byte+0x50>
		if (gpio_status_array[i] == GPIO_PIN_SET) {
 80009c2:	7bbb      	ldrb	r3, [r7, #14]
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	4413      	add	r3, r2
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d109      	bne.n	80009e2 <from_gpiostatus_to_byte+0x4a>
			byte |= (1 << i);
 80009ce:	7bbb      	ldrb	r3, [r7, #14]
 80009d0:	2201      	movs	r2, #1
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	b25a      	sxtb	r2, r3
 80009d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009dc:	4313      	orrs	r3, r2
 80009de:	b25b      	sxtb	r3, r3
 80009e0:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < bit_size; ++i) {
 80009e2:	7bbb      	ldrb	r3, [r7, #14]
 80009e4:	3301      	adds	r3, #1
 80009e6:	73bb      	strb	r3, [r7, #14]
 80009e8:	7bba      	ldrb	r2, [r7, #14]
 80009ea:	78fb      	ldrb	r3, [r7, #3]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d3e8      	bcc.n	80009c2 <from_gpiostatus_to_byte+0x2a>
		}
	}

	return byte;
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
	...

08000a00 <writeGPIOSaddr_bus>:


void writeGPIOSaddr_bus(uint8_t* array){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TiniQVaddr0_GPIO_Port, TiniQVaddr0_Pin, array[0]);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a16:	f000 fec9 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TiniQVaddr1_GPIO_Port, TiniQVaddr1_Pin, array[1]);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a26:	480b      	ldr	r0, [pc, #44]	@ (8000a54 <writeGPIOSaddr_bus+0x54>)
 8000a28:	f000 fec0 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TiniQVaddr2_GPIO_Port, TiniQVaddr2_Pin, array[2]);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3302      	adds	r3, #2
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	2110      	movs	r1, #16
 8000a36:	4807      	ldr	r0, [pc, #28]	@ (8000a54 <writeGPIOSaddr_bus+0x54>)
 8000a38:	f000 feb8 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TiniQVaddr3_GPIO_Port, TiniQVaddr3_Pin, array[3]);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3303      	adds	r3, #3
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	2120      	movs	r1, #32
 8000a46:	4803      	ldr	r0, [pc, #12]	@ (8000a54 <writeGPIOSaddr_bus+0x54>)
 8000a48:	f000 feb0 	bl	80017ac <HAL_GPIO_WritePin>
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	48000400 	.word	0x48000400

08000a58 <writeGPIOSdata_in_bus>:

void writeGPIOSdata_in_bus(uint8_t* array){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TiniQVdata_in0_GPIO_Port, TiniQVdata_in0_Pin, array[0]);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a6a:	4822      	ldr	r0, [pc, #136]	@ (8000af4 <writeGPIOSdata_in_bus+0x9c>)
 8000a6c:	f000 fe9e 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TiniQVdata_in1_GPIO_Port, TiniQVdata_in1_Pin, array[1]);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3301      	adds	r3, #1
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	2140      	movs	r1, #64	@ 0x40
 8000a7a:	481e      	ldr	r0, [pc, #120]	@ (8000af4 <writeGPIOSdata_in_bus+0x9c>)
 8000a7c:	f000 fe96 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TiniQVdata_in2_GPIO_Port, TiniQVdata_in2_Pin, array[2]);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3302      	adds	r3, #2
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a90:	f000 fe8c 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TiniQVdata_in3_GPIO_Port, TiniQVdata_in3_Pin, array[3]);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3303      	adds	r3, #3
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa4:	f000 fe82 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TiniQVdata_in4_GPIO_Port, TiniQVdata_in4_Pin, array[0]);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ab2:	4811      	ldr	r0, [pc, #68]	@ (8000af8 <writeGPIOSdata_in_bus+0xa0>)
 8000ab4:	f000 fe7a 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TiniQVdata_in5_GPIO_Port, TiniQVdata_in5_Pin, array[1]);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3301      	adds	r3, #1
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	2104      	movs	r1, #4
 8000ac2:	480d      	ldr	r0, [pc, #52]	@ (8000af8 <writeGPIOSdata_in_bus+0xa0>)
 8000ac4:	f000 fe72 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TiniQVdata_in6_GPIO_Port, TiniQVdata_in6_Pin, array[2]);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3302      	adds	r3, #2
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ad4:	4808      	ldr	r0, [pc, #32]	@ (8000af8 <writeGPIOSdata_in_bus+0xa0>)
 8000ad6:	f000 fe69 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TiniQVdata_in7_GPIO_Port, TiniQVdata_in7_Pin, array[3]);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3303      	adds	r3, #3
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <writeGPIOSdata_in_bus+0xa0>)
 8000ae6:	f000 fe61 	bl	80017ac <HAL_GPIO_WritePin>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	48000800 	.word	0x48000800
 8000af8:	48000400 	.word	0x48000400

08000afc <readGPIOSdata_out_bus>:

void readGPIOSdata_out_bus(uint8_t* array){
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	array[0]=HAL_GPIO_ReadPin(TiniQVdata_out0_GPIO_Port, TiniQVdata_out0_Pin);
 8000b04:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b08:	4823      	ldr	r0, [pc, #140]	@ (8000b98 <readGPIOSdata_out_bus+0x9c>)
 8000b0a:	f000 fe37 	bl	800177c <HAL_GPIO_ReadPin>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	461a      	mov	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	701a      	strb	r2, [r3, #0]
	array[1]=HAL_GPIO_ReadPin(TiniQVdata_out1_GPIO_Port, TiniQVdata_out1_Pin);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	1c5c      	adds	r4, r3, #1
 8000b1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b1e:	481e      	ldr	r0, [pc, #120]	@ (8000b98 <readGPIOSdata_out_bus+0x9c>)
 8000b20:	f000 fe2c 	bl	800177c <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	7023      	strb	r3, [r4, #0]
	array[2]=HAL_GPIO_ReadPin(TiniQVdata_out2_GPIO_Port, TiniQVdata_out2_Pin);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	1c9c      	adds	r4, r3, #2
 8000b2c:	2180      	movs	r1, #128	@ 0x80
 8000b2e:	481b      	ldr	r0, [pc, #108]	@ (8000b9c <readGPIOSdata_out_bus+0xa0>)
 8000b30:	f000 fe24 	bl	800177c <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	7023      	strb	r3, [r4, #0]
	array[3]=HAL_GPIO_ReadPin(TiniQVdata_out3_GPIO_Port, TiniQVdata_out3_Pin);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	1cdc      	adds	r4, r3, #3
 8000b3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b40:	4815      	ldr	r0, [pc, #84]	@ (8000b98 <readGPIOSdata_out_bus+0x9c>)
 8000b42:	f000 fe1b 	bl	800177c <HAL_GPIO_ReadPin>
 8000b46:	4603      	mov	r3, r0
 8000b48:	7023      	strb	r3, [r4, #0]
	array[4]=HAL_GPIO_ReadPin(TiniQVdata_out4_GPIO_Port, TiniQVdata_out4_Pin);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	1d1c      	adds	r4, r3, #4
 8000b4e:	2101      	movs	r1, #1
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b54:	f000 fe12 	bl	800177c <HAL_GPIO_ReadPin>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	7023      	strb	r3, [r4, #0]
	array[5]=HAL_GPIO_ReadPin(TiniQVdata_out5_GPIO_Port, TiniQVdata_out5_Pin);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	1d5c      	adds	r4, r3, #5
 8000b60:	2102      	movs	r1, #2
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b66:	f000 fe09 	bl	800177c <HAL_GPIO_ReadPin>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	7023      	strb	r3, [r4, #0]
	array[6]=HAL_GPIO_ReadPin(TiniQVdata_out6_GPIO_Port, TiniQVdata_out6_Pin);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	1d9c      	adds	r4, r3, #6
 8000b72:	2104      	movs	r1, #4
 8000b74:	4808      	ldr	r0, [pc, #32]	@ (8000b98 <readGPIOSdata_out_bus+0x9c>)
 8000b76:	f000 fe01 	bl	800177c <HAL_GPIO_ReadPin>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	7023      	strb	r3, [r4, #0]
	array[7]=HAL_GPIO_ReadPin(TiniQVdata_out7_GPIO_Port, TiniQVdata_out7_Pin);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	1ddc      	adds	r4, r3, #7
 8000b82:	2108      	movs	r1, #8
 8000b84:	4804      	ldr	r0, [pc, #16]	@ (8000b98 <readGPIOSdata_out_bus+0x9c>)
 8000b86:	f000 fdf9 	bl	800177c <HAL_GPIO_ReadPin>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	7023      	strb	r3, [r4, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd90      	pop	{r4, r7, pc}
 8000b96:	bf00      	nop
 8000b98:	48000800 	.word	0x48000800
 8000b9c:	48000400 	.word	0x48000400

08000ba0 <writeRegisterToPheripheral>:


void writeRegisterToPheripheral(uint8_t addr, uint8_t data){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460a      	mov	r2, r1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	4613      	mov	r3, r2
 8000bae:	71bb      	strb	r3, [r7, #6]
	from_byte_to_gpio_status(addr,addr_bus,4);
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	4911      	ldr	r1, [pc, #68]	@ (8000bfc <writeRegisterToPheripheral+0x5c>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fec1 	bl	800093e <from_byte_to_gpio_status>
	from_byte_to_gpio_status(addr,data_in_bus ,8);
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2208      	movs	r2, #8
 8000bc0:	490f      	ldr	r1, [pc, #60]	@ (8000c00 <writeRegisterToPheripheral+0x60>)
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff febb 	bl	800093e <from_byte_to_gpio_status>
	writeGPIOSaddr_bus(addr_bus);
 8000bc8:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <writeRegisterToPheripheral+0x5c>)
 8000bca:	f7ff ff19 	bl	8000a00 <writeGPIOSaddr_bus>
	writeGPIOSdata_in_bus(data_in_bus);
 8000bce:	480c      	ldr	r0, [pc, #48]	@ (8000c00 <writeRegisterToPheripheral+0x60>)
 8000bd0:	f7ff ff42 	bl	8000a58 <writeGPIOSdata_in_bus>
	HAL_GPIO_WritePin(TiniQVdata_write_GPIO_Port, TiniQVdata_write_Pin, GPIO_PIN_SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bda:	480a      	ldr	r0, [pc, #40]	@ (8000c04 <writeRegisterToPheripheral+0x64>)
 8000bdc:	f000 fde6 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f000 fb43 	bl	800126c <HAL_Delay>
	HAL_GPIO_WritePin(TiniQVdata_write_GPIO_Port, TiniQVdata_write_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bec:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <writeRegisterToPheripheral+0x64>)
 8000bee:	f000 fddd 	bl	80017ac <HAL_GPIO_WritePin>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000003c 	.word	0x2000003c
 8000c00:	20000040 	.word	0x20000040
 8000c04:	48000800 	.word	0x48000800

08000c08 <readRegisterFromPheripheral>:

uint8_t readRegisterFromPheripheral(uint8_t addr){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	from_byte_to_gpio_status(addr,addr_bus,4);
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2204      	movs	r2, #4
 8000c16:	490b      	ldr	r1, [pc, #44]	@ (8000c44 <readRegisterFromPheripheral+0x3c>)
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fe90 	bl	800093e <from_byte_to_gpio_status>
	writeGPIOSaddr_bus(addr_bus);
 8000c1e:	4809      	ldr	r0, [pc, #36]	@ (8000c44 <readRegisterFromPheripheral+0x3c>)
 8000c20:	f7ff feee 	bl	8000a00 <writeGPIOSaddr_bus>
	HAL_Delay(1);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f000 fb21 	bl	800126c <HAL_Delay>
	readGPIOSdata_out_bus(data_out_bus);
 8000c2a:	4807      	ldr	r0, [pc, #28]	@ (8000c48 <readRegisterFromPheripheral+0x40>)
 8000c2c:	f7ff ff66 	bl	8000afc <readGPIOSdata_out_bus>
	return from_gpiostatus_to_byte(data_out_bus, 8);
 8000c30:	2108      	movs	r1, #8
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <readRegisterFromPheripheral+0x40>)
 8000c34:	f7ff feb0 	bl	8000998 <from_gpiostatus_to_byte>
 8000c38:	4603      	mov	r3, r0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000003c 	.word	0x2000003c
 8000c48:	20000048 	.word	0x20000048

08000c4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	@ 0x28
 8000c50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c62:	4b4d      	ldr	r3, [pc, #308]	@ (8000d98 <MX_GPIO_Init+0x14c>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c66:	4a4c      	ldr	r2, [pc, #304]	@ (8000d98 <MX_GPIO_Init+0x14c>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c6e:	4b4a      	ldr	r3, [pc, #296]	@ (8000d98 <MX_GPIO_Init+0x14c>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c7a:	4b47      	ldr	r3, [pc, #284]	@ (8000d98 <MX_GPIO_Init+0x14c>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7e:	4a46      	ldr	r2, [pc, #280]	@ (8000d98 <MX_GPIO_Init+0x14c>)
 8000c80:	f043 0320 	orr.w	r3, r3, #32
 8000c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c86:	4b44      	ldr	r3, [pc, #272]	@ (8000d98 <MX_GPIO_Init+0x14c>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	f003 0320 	and.w	r3, r3, #32
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b41      	ldr	r3, [pc, #260]	@ (8000d98 <MX_GPIO_Init+0x14c>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c96:	4a40      	ldr	r2, [pc, #256]	@ (8000d98 <MX_GPIO_Init+0x14c>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c9e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d98 <MX_GPIO_Init+0x14c>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	4b3b      	ldr	r3, [pc, #236]	@ (8000d98 <MX_GPIO_Init+0x14c>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cae:	4a3a      	ldr	r2, [pc, #232]	@ (8000d98 <MX_GPIO_Init+0x14c>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb6:	4b38      	ldr	r3, [pc, #224]	@ (8000d98 <MX_GPIO_Init+0x14c>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TiniQVdata_in7_Pin|TiniQVdata_in5_Pin|TiniQVaddr1_Pin|TiniQVdata_in6_Pin
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f641 4176 	movw	r1, #7286	@ 0x1c76
 8000cc8:	4834      	ldr	r0, [pc, #208]	@ (8000d9c <MX_GPIO_Init+0x150>)
 8000cca:	f000 fd6f 	bl	80017ac <HAL_GPIO_WritePin>
                          |TiniQVdata_in4_Pin|TiniQVaddr2_Pin|TiniQVaddr3_Pin|CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TiniQVdata_in1_Pin|DC_Pin|TiniQVdata_in0_Pin|TiniQVdata_write_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000cd4:	4832      	ldr	r0, [pc, #200]	@ (8000da0 <MX_GPIO_Init+0x154>)
 8000cd6:	f000 fd69 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TiniQVaddr0_Pin|RST_Pin|TiniQVdata_in3_Pin|TiniQVdata_in2_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 51d8 	mov.w	r1, #6912	@ 0x1b00
 8000ce0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce4:	f000 fd62 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TiniQVdata_out3_Pin TiniQVdata_out6_Pin TiniQVdata_out7_Pin TiniQVdata_out0_Pin
                           TiniQVdata_out1_Pin */
  GPIO_InitStruct.Pin = TiniQVdata_out3_Pin|TiniQVdata_out6_Pin|TiniQVdata_out7_Pin|TiniQVdata_out0_Pin
 8000ce8:	f243 430c 	movw	r3, #13324	@ 0x340c
 8000cec:	617b      	str	r3, [r7, #20]
                          |TiniQVdata_out1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4828      	ldr	r0, [pc, #160]	@ (8000da0 <MX_GPIO_Init+0x154>)
 8000cfe:	f000 fbbb 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pins : TiniQVdata_out4_Pin TiniQVdata_out5_Pin */
  GPIO_InitStruct.Pin = TiniQVdata_out4_Pin|TiniQVdata_out5_Pin;
 8000d02:	2303      	movs	r3, #3
 8000d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d18:	f000 fbae 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pins : TiniQVdata_in7_Pin TiniQVdata_in5_Pin TiniQVaddr1_Pin TiniQVdata_in6_Pin
                           TiniQVdata_in4_Pin TiniQVaddr2_Pin TiniQVaddr3_Pin CS_Pin */
  GPIO_InitStruct.Pin = TiniQVdata_in7_Pin|TiniQVdata_in5_Pin|TiniQVaddr1_Pin|TiniQVdata_in6_Pin
 8000d1c:	f641 4376 	movw	r3, #7286	@ 0x1c76
 8000d20:	617b      	str	r3, [r7, #20]
                          |TiniQVdata_in4_Pin|TiniQVaddr2_Pin|TiniQVaddr3_Pin|CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	4819      	ldr	r0, [pc, #100]	@ (8000d9c <MX_GPIO_Init+0x150>)
 8000d36:	f000 fb9f 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pins : TiniQVdata_in1_Pin DC_Pin TiniQVdata_in0_Pin TiniQVdata_write_Pin */
  GPIO_InitStruct.Pin = TiniQVdata_in1_Pin|DC_Pin|TiniQVdata_in0_Pin|TiniQVdata_write_Pin;
 8000d3a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	4813      	ldr	r0, [pc, #76]	@ (8000da0 <MX_GPIO_Init+0x154>)
 8000d54:	f000 fb90 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pins : TiniQVaddr0_Pin RST_Pin TiniQVdata_in3_Pin TiniQVdata_in2_Pin */
  GPIO_InitStruct.Pin = TiniQVaddr0_Pin|RST_Pin|TiniQVdata_in3_Pin|TiniQVdata_in2_Pin;
 8000d58:	f44f 53d8 	mov.w	r3, #6912	@ 0x1b00
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d74:	f000 fb80 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pin : TiniQVdata_out2_Pin */
  GPIO_InitStruct.Pin = TiniQVdata_out2_Pin;
 8000d78:	2380      	movs	r3, #128	@ 0x80
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TiniQVdata_out2_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4804      	ldr	r0, [pc, #16]	@ (8000d9c <MX_GPIO_Init+0x150>)
 8000d8c:	f000 fb74 	bl	8001478 <HAL_GPIO_Init>

}
 8000d90:	bf00      	nop
 8000d92:	3728      	adds	r7, #40	@ 0x28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	48000400 	.word	0x48000400
 8000da0:	48000800 	.word	0x48000800

08000da4 <frombytestocolor565>:

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
uint16_t frombytestocolor565(uint8_t r, uint8_t g, uint8_t b) {
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
 8000dae:	460b      	mov	r3, r1
 8000db0:	71bb      	strb	r3, [r7, #6]
 8000db2:	4613      	mov	r3, r2
 8000db4:	717b      	strb	r3, [r7, #5]
    return ((r & 0xF8) << 8) |    // Top 5 bits of red
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	021b      	lsls	r3, r3, #8
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000dc0:	f023 0307 	bic.w	r3, r3, #7
 8000dc4:	b21a      	sxth	r2, r3
           ((g & 0xFC) << 3) |    // Top 6 bits of green
 8000dc6:	79bb      	ldrb	r3, [r7, #6]
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8000dd0:	b21b      	sxth	r3, r3
    return ((r & 0xF8) << 8) |    // Top 5 bits of red
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	b21a      	sxth	r2, r3
           ((b & 0xF8) >> 3);     // Top 5 bits of blue
 8000dd6:	797b      	ldrb	r3, [r7, #5]
 8000dd8:	08db      	lsrs	r3, r3, #3
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	b21b      	sxth	r3, r3
           ((g & 0xFC) << 3) |    // Top 6 bits of green
 8000dde:	4313      	orrs	r3, r2
 8000de0:	b21b      	sxth	r3, r3
 8000de2:	b29b      	uxth	r3, r3
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df6:	f000 f9c8 	bl	800118a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dfa:	f000 f865 	bl	8000ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfe:	f7ff ff25 	bl	8000c4c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e02:	f000 f8b3 	bl	8000f6c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init(0);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f7ff fb32 	bl	8000470 <ST7735_Init>
  paintImage(image);
 8000e0c:	4828      	ldr	r0, [pc, #160]	@ (8000eb0 <main+0xc0>)
 8000e0e:	f7ff fd6d 	bl	80008ec <paintImage>
  HAL_Delay(2000);
 8000e12:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e16:	f000 fa29 	bl	800126c <HAL_Delay>
  fillScreen(BLACK);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f7ff fa18 	bl	8000250 <fillScreen>
  ST7735_WriteString(0, 0, " I AM A LED :)", Font_16x26, WHITE, BLACK);
 8000e20:	4b24      	ldr	r3, [pc, #144]	@ (8000eb4 <main+0xc4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	9202      	str	r2, [sp, #8]
 8000e26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e2a:	9201      	str	r2, [sp, #4]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	9200      	str	r2, [sp, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a21      	ldr	r2, [pc, #132]	@ (8000eb8 <main+0xc8>)
 8000e34:	2100      	movs	r1, #0
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff fc7c 	bl	8000734 <ST7735_WriteString>
  ST7735_FillRectangle((128/2)-25, (160/2)-25, 50, 50, WHITE);
 8000e3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2332      	movs	r3, #50	@ 0x32
 8000e44:	2232      	movs	r2, #50	@ 0x32
 8000e46:	2137      	movs	r1, #55	@ 0x37
 8000e48:	2027      	movs	r0, #39	@ 0x27
 8000e4a:	f7ff fcc7 	bl	80007dc <ST7735_FillRectangle>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(readRegisterFromPheripheral(REG_RGB_READY)==RGB_READY){
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f7ff feda 	bl	8000c08 <readRegisterFromPheripheral>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2bff      	cmp	r3, #255	@ 0xff
 8000e58:	d1f9      	bne.n	8000e4e <main+0x5e>
		red		=readRegisterFromPheripheral(REG_R);
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f7ff fed4 	bl	8000c08 <readRegisterFromPheripheral>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <main+0xcc>)
 8000e66:	701a      	strb	r2, [r3, #0]
		green	=readRegisterFromPheripheral(REG_G);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f7ff fecd 	bl	8000c08 <readRegisterFromPheripheral>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <main+0xd0>)
 8000e74:	701a      	strb	r2, [r3, #0]
		blue	=readRegisterFromPheripheral(REG_B);
 8000e76:	2002      	movs	r0, #2
 8000e78:	f7ff fec6 	bl	8000c08 <readRegisterFromPheripheral>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <main+0xd4>)
 8000e82:	701a      	strb	r2, [r3, #0]
		writeRegisterToPheripheral(REG_RGB_CLEAR, RGB_CLEAR_CMD);
 8000e84:	2100      	movs	r1, #0
 8000e86:	200e      	movs	r0, #14
 8000e88:	f7ff fe8a 	bl	8000ba0 <writeRegisterToPheripheral>
		ST7735_FillRectangle((128/2)-20, (160/2)-20, 40, 40, frombytestocolor565(red, green, blue));
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <main+0xcc>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec0 <main+0xd0>)
 8000e92:	7811      	ldrb	r1, [r2, #0]
 8000e94:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec4 <main+0xd4>)
 8000e96:	7812      	ldrb	r2, [r2, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff83 	bl	8000da4 <frombytestocolor565>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	2328      	movs	r3, #40	@ 0x28
 8000ea4:	2228      	movs	r2, #40	@ 0x28
 8000ea6:	213c      	movs	r1, #60	@ 0x3c
 8000ea8:	202c      	movs	r0, #44	@ 0x2c
 8000eaa:	f7ff fc97 	bl	80007dc <ST7735_FillRectangle>
	if(readRegisterFromPheripheral(REG_RGB_READY)==RGB_READY){
 8000eae:	e7ce      	b.n	8000e4e <main+0x5e>
 8000eb0:	08003e7c 	.word	0x08003e7c
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	08002aac 	.word	0x08002aac
 8000ebc:	20000050 	.word	0x20000050
 8000ec0:	20000051 	.word	0x20000051
 8000ec4:	20000052 	.word	0x20000052

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b094      	sub	sp, #80	@ 0x50
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	2238      	movs	r2, #56	@ 0x38
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f001 fdb0 	bl	8002a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 fc76 	bl	80017dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000efa:	2340      	movs	r3, #64	@ 0x40
 8000efc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efe:	2302      	movs	r3, #2
 8000f00:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f02:	2302      	movs	r3, #2
 8000f04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f06:	2304      	movs	r3, #4
 8000f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f0a:	2355      	movs	r3, #85	@ 0x55
 8000f0c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f16:	2302      	movs	r3, #2
 8000f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1a:	f107 0318 	add.w	r3, r7, #24
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fd10 	bl	8001944 <HAL_RCC_OscConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f2a:	f000 f818 	bl	8000f5e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2e:	230f      	movs	r3, #15
 8000f30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f32:	2303      	movs	r3, #3
 8000f34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2104      	movs	r1, #4
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 f80e 	bl	8001f68 <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f52:	f000 f804 	bl	8000f5e <Error_Handler>
  }
}
 8000f56:	bf00      	nop
 8000f58:	3750      	adds	r7, #80	@ 0x50
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f62:	b672      	cpsid	i
}
 8000f64:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f66:	bf00      	nop
 8000f68:	e7fd      	b.n	8000f66 <Error_Handler+0x8>
	...

08000f6c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <MX_SPI1_Init+0x74>)
 8000f72:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe4 <MX_SPI1_Init+0x78>)
 8000f74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <MX_SPI1_Init+0x74>)
 8000f78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000f7e:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <MX_SPI1_Init+0x74>)
 8000f80:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f84:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f86:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <MX_SPI1_Init+0x74>)
 8000f88:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000f8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <MX_SPI1_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f94:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <MX_SPI1_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <MX_SPI1_Init+0x74>)
 8000f9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fa0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <MX_SPI1_Init+0x74>)
 8000fa4:	2210      	movs	r2, #16
 8000fa6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe0 <MX_SPI1_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fae:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <MX_SPI1_Init+0x74>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <MX_SPI1_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fba:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <MX_SPI1_Init+0x74>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	@ (8000fe0 <MX_SPI1_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <MX_SPI1_Init+0x74>)
 8000fc8:	2208      	movs	r2, #8
 8000fca:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	@ (8000fe0 <MX_SPI1_Init+0x74>)
 8000fce:	f001 f9af 	bl	8002330 <HAL_SPI_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000fd8:	f7ff ffc1 	bl	8000f5e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000054 	.word	0x20000054
 8000fe4:	40013000 	.word	0x40013000

08000fe8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a17      	ldr	r2, [pc, #92]	@ (8001064 <HAL_SPI_MspInit+0x7c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d128      	bne.n	800105c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800100a:	4b17      	ldr	r3, [pc, #92]	@ (8001068 <HAL_SPI_MspInit+0x80>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800100e:	4a16      	ldr	r2, [pc, #88]	@ (8001068 <HAL_SPI_MspInit+0x80>)
 8001010:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001014:	6613      	str	r3, [r2, #96]	@ 0x60
 8001016:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <HAL_SPI_MspInit+0x80>)
 8001018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800101a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <HAL_SPI_MspInit+0x80>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001026:	4a10      	ldr	r2, [pc, #64]	@ (8001068 <HAL_SPI_MspInit+0x80>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <HAL_SPI_MspInit+0x80>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800103a:	23a0      	movs	r3, #160	@ 0xa0
 800103c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800104a:	2305      	movs	r3, #5
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001058:	f000 fa0e 	bl	8001478 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800105c:	bf00      	nop
 800105e:	3728      	adds	r7, #40	@ 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40013000 	.word	0x40013000
 8001068:	40021000 	.word	0x40021000

0800106c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <HAL_MspInit+0x44>)
 8001074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001076:	4a0e      	ldr	r2, [pc, #56]	@ (80010b0 <HAL_MspInit+0x44>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6613      	str	r3, [r2, #96]	@ 0x60
 800107e:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <HAL_MspInit+0x44>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <HAL_MspInit+0x44>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800108e:	4a08      	ldr	r2, [pc, #32]	@ (80010b0 <HAL_MspInit+0x44>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001094:	6593      	str	r3, [r2, #88]	@ 0x58
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <HAL_MspInit+0x44>)
 8001098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010a2:	f000 fc3f 	bl	8001924 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <NMI_Handler+0x4>

080010bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <MemManage_Handler+0x4>

080010cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <UsageFault_Handler+0x4>

080010dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110a:	f000 f891 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <SystemInit+0x20>)
 800111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800111e:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <SystemInit+0x20>)
 8001120:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001124:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001138:	480d      	ldr	r0, [pc, #52]	@ (8001170 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800113a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800113c:	f7ff ffea 	bl	8001114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001140:	480c      	ldr	r0, [pc, #48]	@ (8001174 <LoopForever+0x6>)
  ldr r1, =_edata
 8001142:	490d      	ldr	r1, [pc, #52]	@ (8001178 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001144:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <LoopForever+0xe>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001158:	4c0a      	ldr	r4, [pc, #40]	@ (8001184 <LoopForever+0x16>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001166:	f001 fc71 	bl	8002a4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800116a:	f7ff fe41 	bl	8000df0 <main>

0800116e <LoopForever>:

LoopForever:
    b LoopForever
 800116e:	e7fe      	b.n	800116e <LoopForever>
  ldr   r0, =_estack
 8001170:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001178:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800117c:	0800de94 	.word	0x0800de94
  ldr r2, =_sbss
 8001180:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001184:	200000bc 	.word	0x200000bc

08001188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_2_IRQHandler>

0800118a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001190:	2300      	movs	r3, #0
 8001192:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001194:	2003      	movs	r0, #3
 8001196:	f000 f93d 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800119a:	200f      	movs	r0, #15
 800119c:	f000 f80e 	bl	80011bc <HAL_InitTick>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d002      	beq.n	80011ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	71fb      	strb	r3, [r7, #7]
 80011aa:	e001      	b.n	80011b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ac:	f7ff ff5e 	bl	800106c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011b0:	79fb      	ldrb	r3, [r7, #7]

}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011c8:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <HAL_InitTick+0x68>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d022      	beq.n	8001216 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011d0:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <HAL_InitTick+0x6c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <HAL_InitTick+0x68>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80011e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f93a 	bl	800145e <HAL_SYSTICK_Config>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10f      	bne.n	8001210 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b0f      	cmp	r3, #15
 80011f4:	d809      	bhi.n	800120a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f6:	2200      	movs	r2, #0
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	f04f 30ff 	mov.w	r0, #4294967295
 80011fe:	f000 f914 	bl	800142a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <HAL_InitTick+0x70>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	e007      	b.n	800121a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e004      	b.n	800121a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	e001      	b.n	800121a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800121a:	7bfb      	ldrb	r3, [r7, #15]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000010 	.word	0x20000010
 8001228:	20000008 	.word	0x20000008
 800122c:	2000000c 	.word	0x2000000c

08001230 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001234:	4b05      	ldr	r3, [pc, #20]	@ (800124c <HAL_IncTick+0x1c>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <HAL_IncTick+0x20>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4413      	add	r3, r2
 800123e:	4a03      	ldr	r2, [pc, #12]	@ (800124c <HAL_IncTick+0x1c>)
 8001240:	6013      	str	r3, [r2, #0]
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	200000b8 	.word	0x200000b8
 8001250:	20000010 	.word	0x20000010

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b03      	ldr	r3, [pc, #12]	@ (8001268 <HAL_GetTick+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	200000b8 	.word	0x200000b8

0800126c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001274:	f7ff ffee 	bl	8001254 <HAL_GetTick>
 8001278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001284:	d004      	beq.n	8001290 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <HAL_Delay+0x40>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	4413      	add	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001290:	bf00      	nop
 8001292:	f7ff ffdf 	bl	8001254 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d8f7      	bhi.n	8001292 <HAL_Delay+0x26>
  {
  }
}
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000010 	.word	0x20000010

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	@ (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	@ (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	@ (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	@ (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	@ 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
         );
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	@ 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013e0:	d301      	bcc.n	80013e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00f      	b.n	8001406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <SysTick_Config+0x40>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ee:	210f      	movs	r1, #15
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f7ff ff8e 	bl	8001314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <SysTick_Config+0x40>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fe:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <SysTick_Config+0x40>)
 8001400:	2207      	movs	r2, #7
 8001402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	e000e010 	.word	0xe000e010

08001414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff47 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001438:	f7ff ff5e 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 800143c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	6978      	ldr	r0, [r7, #20]
 8001444:	f7ff ff90 	bl	8001368 <NVIC_EncodePriority>
 8001448:	4602      	mov	r2, r0
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff5f 	bl	8001314 <__NVIC_SetPriority>
}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ffb2 	bl	80013d0 <SysTick_Config>
 800146c:	4603      	mov	r3, r0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001486:	e15a      	b.n	800173e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2101      	movs	r1, #1
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	4013      	ands	r3, r2
 8001496:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 814c 	beq.w	8001738 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d005      	beq.n	80014b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d130      	bne.n	800151a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ee:	2201      	movs	r2, #1
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	f003 0201 	and.w	r2, r3, #1
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b03      	cmp	r3, #3
 8001524:	d017      	beq.n	8001556 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d123      	bne.n	80015aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	08da      	lsrs	r2, r3, #3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3208      	adds	r2, #8
 800156a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	220f      	movs	r2, #15
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	08da      	lsrs	r2, r3, #3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3208      	adds	r2, #8
 80015a4:	6939      	ldr	r1, [r7, #16]
 80015a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 0203 	and.w	r2, r3, #3
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80a6 	beq.w	8001738 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ec:	4b5b      	ldr	r3, [pc, #364]	@ (800175c <HAL_GPIO_Init+0x2e4>)
 80015ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f0:	4a5a      	ldr	r2, [pc, #360]	@ (800175c <HAL_GPIO_Init+0x2e4>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80015f8:	4b58      	ldr	r3, [pc, #352]	@ (800175c <HAL_GPIO_Init+0x2e4>)
 80015fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001604:	4a56      	ldr	r2, [pc, #344]	@ (8001760 <HAL_GPIO_Init+0x2e8>)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3302      	adds	r3, #2
 800160c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	220f      	movs	r2, #15
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800162e:	d01f      	beq.n	8001670 <HAL_GPIO_Init+0x1f8>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a4c      	ldr	r2, [pc, #304]	@ (8001764 <HAL_GPIO_Init+0x2ec>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d019      	beq.n	800166c <HAL_GPIO_Init+0x1f4>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a4b      	ldr	r2, [pc, #300]	@ (8001768 <HAL_GPIO_Init+0x2f0>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d013      	beq.n	8001668 <HAL_GPIO_Init+0x1f0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a4a      	ldr	r2, [pc, #296]	@ (800176c <HAL_GPIO_Init+0x2f4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d00d      	beq.n	8001664 <HAL_GPIO_Init+0x1ec>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a49      	ldr	r2, [pc, #292]	@ (8001770 <HAL_GPIO_Init+0x2f8>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d007      	beq.n	8001660 <HAL_GPIO_Init+0x1e8>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a48      	ldr	r2, [pc, #288]	@ (8001774 <HAL_GPIO_Init+0x2fc>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d101      	bne.n	800165c <HAL_GPIO_Init+0x1e4>
 8001658:	2305      	movs	r3, #5
 800165a:	e00a      	b.n	8001672 <HAL_GPIO_Init+0x1fa>
 800165c:	2306      	movs	r3, #6
 800165e:	e008      	b.n	8001672 <HAL_GPIO_Init+0x1fa>
 8001660:	2304      	movs	r3, #4
 8001662:	e006      	b.n	8001672 <HAL_GPIO_Init+0x1fa>
 8001664:	2303      	movs	r3, #3
 8001666:	e004      	b.n	8001672 <HAL_GPIO_Init+0x1fa>
 8001668:	2302      	movs	r3, #2
 800166a:	e002      	b.n	8001672 <HAL_GPIO_Init+0x1fa>
 800166c:	2301      	movs	r3, #1
 800166e:	e000      	b.n	8001672 <HAL_GPIO_Init+0x1fa>
 8001670:	2300      	movs	r3, #0
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	f002 0203 	and.w	r2, r2, #3
 8001678:	0092      	lsls	r2, r2, #2
 800167a:	4093      	lsls	r3, r2
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4313      	orrs	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001682:	4937      	ldr	r1, [pc, #220]	@ (8001760 <HAL_GPIO_Init+0x2e8>)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	3302      	adds	r3, #2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001690:	4b39      	ldr	r3, [pc, #228]	@ (8001778 <HAL_GPIO_Init+0x300>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	43db      	mvns	r3, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016b4:	4a30      	ldr	r2, [pc, #192]	@ (8001778 <HAL_GPIO_Init+0x300>)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001778 <HAL_GPIO_Init+0x300>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016de:	4a26      	ldr	r2, [pc, #152]	@ (8001778 <HAL_GPIO_Init+0x300>)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016e4:	4b24      	ldr	r3, [pc, #144]	@ (8001778 <HAL_GPIO_Init+0x300>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001708:	4a1b      	ldr	r2, [pc, #108]	@ (8001778 <HAL_GPIO_Init+0x300>)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800170e:	4b1a      	ldr	r3, [pc, #104]	@ (8001778 <HAL_GPIO_Init+0x300>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001732:	4a11      	ldr	r2, [pc, #68]	@ (8001778 <HAL_GPIO_Init+0x300>)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3301      	adds	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	fa22 f303 	lsr.w	r3, r2, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	f47f ae9d 	bne.w	8001488 <HAL_GPIO_Init+0x10>
  }
}
 800174e:	bf00      	nop
 8001750:	bf00      	nop
 8001752:	371c      	adds	r7, #28
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	40021000 	.word	0x40021000
 8001760:	40010000 	.word	0x40010000
 8001764:	48000400 	.word	0x48000400
 8001768:	48000800 	.word	0x48000800
 800176c:	48000c00 	.word	0x48000c00
 8001770:	48001000 	.word	0x48001000
 8001774:	48001400 	.word	0x48001400
 8001778:	40010400 	.word	0x40010400

0800177c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691a      	ldr	r2, [r3, #16]
 800178c:	887b      	ldrh	r3, [r7, #2]
 800178e:	4013      	ands	r3, r2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	e001      	b.n	800179e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
 80017b8:	4613      	mov	r3, r2
 80017ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017c8:	e002      	b.n	80017d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d141      	bne.n	800186e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017f6:	d131      	bne.n	800185c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017f8:	4b47      	ldr	r3, [pc, #284]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017fe:	4a46      	ldr	r2, [pc, #280]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001804:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001808:	4b43      	ldr	r3, [pc, #268]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001810:	4a41      	ldr	r2, [pc, #260]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001816:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001818:	4b40      	ldr	r3, [pc, #256]	@ (800191c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2232      	movs	r2, #50	@ 0x32
 800181e:	fb02 f303 	mul.w	r3, r2, r3
 8001822:	4a3f      	ldr	r2, [pc, #252]	@ (8001920 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001824:	fba2 2303 	umull	r2, r3, r2, r3
 8001828:	0c9b      	lsrs	r3, r3, #18
 800182a:	3301      	adds	r3, #1
 800182c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800182e:	e002      	b.n	8001836 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3b01      	subs	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	4b38      	ldr	r3, [pc, #224]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800183e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001842:	d102      	bne.n	800184a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f2      	bne.n	8001830 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800184a:	4b33      	ldr	r3, [pc, #204]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001856:	d158      	bne.n	800190a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e057      	b.n	800190c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800185c:	4b2e      	ldr	r3, [pc, #184]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800185e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001862:	4a2d      	ldr	r2, [pc, #180]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001864:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001868:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800186c:	e04d      	b.n	800190a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001874:	d141      	bne.n	80018fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001876:	4b28      	ldr	r3, [pc, #160]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800187e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001882:	d131      	bne.n	80018e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001884:	4b24      	ldr	r3, [pc, #144]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001886:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800188a:	4a23      	ldr	r2, [pc, #140]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001890:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001894:	4b20      	ldr	r3, [pc, #128]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800189c:	4a1e      	ldr	r2, [pc, #120]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018a4:	4b1d      	ldr	r3, [pc, #116]	@ (800191c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2232      	movs	r2, #50	@ 0x32
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001920 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b0:	fba2 2303 	umull	r2, r3, r2, r3
 80018b4:	0c9b      	lsrs	r3, r3, #18
 80018b6:	3301      	adds	r3, #1
 80018b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ba:	e002      	b.n	80018c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	3b01      	subs	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	4b15      	ldr	r3, [pc, #84]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018ce:	d102      	bne.n	80018d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f2      	bne.n	80018bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018e2:	d112      	bne.n	800190a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e011      	b.n	800190c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80018f8:	e007      	b.n	800190a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018fa:	4b07      	ldr	r3, [pc, #28]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001902:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001908:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	40007000 	.word	0x40007000
 800191c:	20000008 	.word	0x20000008
 8001920:	431bde83 	.word	0x431bde83

08001924 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001928:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	4a04      	ldr	r2, [pc, #16]	@ (8001940 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800192e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001932:	6093      	str	r3, [r2, #8]
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40007000 	.word	0x40007000

08001944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e2fe      	b.n	8001f54 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d075      	beq.n	8001a4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001962:	4b97      	ldr	r3, [pc, #604]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800196c:	4b94      	ldr	r3, [pc, #592]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	2b0c      	cmp	r3, #12
 800197a:	d102      	bne.n	8001982 <HAL_RCC_OscConfig+0x3e>
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2b03      	cmp	r3, #3
 8001980:	d002      	beq.n	8001988 <HAL_RCC_OscConfig+0x44>
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	2b08      	cmp	r3, #8
 8001986:	d10b      	bne.n	80019a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	4b8d      	ldr	r3, [pc, #564]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d05b      	beq.n	8001a4c <HAL_RCC_OscConfig+0x108>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d157      	bne.n	8001a4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e2d9      	b.n	8001f54 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019a8:	d106      	bne.n	80019b8 <HAL_RCC_OscConfig+0x74>
 80019aa:	4b85      	ldr	r3, [pc, #532]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a84      	ldr	r2, [pc, #528]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 80019b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e01d      	b.n	80019f4 <HAL_RCC_OscConfig+0xb0>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0x98>
 80019c2:	4b7f      	ldr	r3, [pc, #508]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a7e      	ldr	r2, [pc, #504]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 80019c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b7c      	ldr	r3, [pc, #496]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a7b      	ldr	r2, [pc, #492]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e00b      	b.n	80019f4 <HAL_RCC_OscConfig+0xb0>
 80019dc:	4b78      	ldr	r3, [pc, #480]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a77      	ldr	r2, [pc, #476]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 80019e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b75      	ldr	r3, [pc, #468]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a74      	ldr	r2, [pc, #464]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 80019ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d013      	beq.n	8001a24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff fc2a 	bl	8001254 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a04:	f7ff fc26 	bl	8001254 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	@ 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e29e      	b.n	8001f54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a16:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0xc0>
 8001a22:	e014      	b.n	8001a4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7ff fc16 	bl	8001254 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a2c:	f7ff fc12 	bl	8001254 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	@ 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e28a      	b.n	8001f54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a3e:	4b60      	ldr	r3, [pc, #384]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0xe8>
 8001a4a:	e000      	b.n	8001a4e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d075      	beq.n	8001b46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a5a:	4b59      	ldr	r3, [pc, #356]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a64:	4b56      	ldr	r3, [pc, #344]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b0c      	cmp	r3, #12
 8001a72:	d102      	bne.n	8001a7a <HAL_RCC_OscConfig+0x136>
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d002      	beq.n	8001a80 <HAL_RCC_OscConfig+0x13c>
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d11f      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a80:	4b4f      	ldr	r3, [pc, #316]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_OscConfig+0x154>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e25d      	b.n	8001f54 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	4b49      	ldr	r3, [pc, #292]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	061b      	lsls	r3, r3, #24
 8001aa6:	4946      	ldr	r1, [pc, #280]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001aac:	4b45      	ldr	r3, [pc, #276]	@ (8001bc4 <HAL_RCC_OscConfig+0x280>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fb83 	bl	80011bc <HAL_InitTick>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d043      	beq.n	8001b44 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e249      	b.n	8001f54 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d023      	beq.n	8001b10 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac8:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a3c      	ldr	r2, [pc, #240]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fbbe 	bl	8001254 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001adc:	f7ff fbba 	bl	8001254 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e232      	b.n	8001f54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aee:	4b34      	ldr	r3, [pc, #208]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afa:	4b31      	ldr	r3, [pc, #196]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	061b      	lsls	r3, r3, #24
 8001b08:	492d      	ldr	r1, [pc, #180]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	604b      	str	r3, [r1, #4]
 8001b0e:	e01a      	b.n	8001b46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b10:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a2a      	ldr	r2, [pc, #168]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001b16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fb9a 	bl	8001254 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b24:	f7ff fb96 	bl	8001254 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e20e      	b.n	8001f54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b36:	4b22      	ldr	r3, [pc, #136]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x1e0>
 8001b42:	e000      	b.n	8001b46 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d041      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d01c      	beq.n	8001b94 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5a:	4b19      	ldr	r3, [pc, #100]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b60:	4a17      	ldr	r2, [pc, #92]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6a:	f7ff fb73 	bl	8001254 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b72:	f7ff fb6f 	bl	8001254 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e1e7      	b.n	8001f54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b84:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0ef      	beq.n	8001b72 <HAL_RCC_OscConfig+0x22e>
 8001b92:	e020      	b.n	8001bd6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b94:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b9a:	4a09      	ldr	r2, [pc, #36]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7ff fb56 	bl	8001254 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001baa:	e00d      	b.n	8001bc8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff fb52 	bl	8001254 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d906      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e1ca      	b.n	8001f54 <HAL_RCC_OscConfig+0x610>
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc8:	4b8c      	ldr	r3, [pc, #560]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1ea      	bne.n	8001bac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80a6 	beq.w	8001d30 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be8:	4b84      	ldr	r3, [pc, #528]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x2b4>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_OscConfig+0x2b6>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00d      	beq.n	8001c1a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	4b7f      	ldr	r3, [pc, #508]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c02:	4a7e      	ldr	r2, [pc, #504]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c0a:	4b7c      	ldr	r3, [pc, #496]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c16:	2301      	movs	r3, #1
 8001c18:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c1a:	4b79      	ldr	r3, [pc, #484]	@ (8001e00 <HAL_RCC_OscConfig+0x4bc>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d118      	bne.n	8001c58 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c26:	4b76      	ldr	r3, [pc, #472]	@ (8001e00 <HAL_RCC_OscConfig+0x4bc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a75      	ldr	r2, [pc, #468]	@ (8001e00 <HAL_RCC_OscConfig+0x4bc>)
 8001c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c32:	f7ff fb0f 	bl	8001254 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3a:	f7ff fb0b 	bl	8001254 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e183      	b.n	8001f54 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4c:	4b6c      	ldr	r3, [pc, #432]	@ (8001e00 <HAL_RCC_OscConfig+0x4bc>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d108      	bne.n	8001c72 <HAL_RCC_OscConfig+0x32e>
 8001c60:	4b66      	ldr	r3, [pc, #408]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c66:	4a65      	ldr	r2, [pc, #404]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c70:	e024      	b.n	8001cbc <HAL_RCC_OscConfig+0x378>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	d110      	bne.n	8001c9c <HAL_RCC_OscConfig+0x358>
 8001c7a:	4b60      	ldr	r3, [pc, #384]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c80:	4a5e      	ldr	r2, [pc, #376]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001c82:	f043 0304 	orr.w	r3, r3, #4
 8001c86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c8a:	4b5c      	ldr	r3, [pc, #368]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c90:	4a5a      	ldr	r2, [pc, #360]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c9a:	e00f      	b.n	8001cbc <HAL_RCC_OscConfig+0x378>
 8001c9c:	4b57      	ldr	r3, [pc, #348]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ca2:	4a56      	ldr	r2, [pc, #344]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cac:	4b53      	ldr	r3, [pc, #332]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb2:	4a52      	ldr	r2, [pc, #328]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001cb4:	f023 0304 	bic.w	r3, r3, #4
 8001cb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d016      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc4:	f7ff fac6 	bl	8001254 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ccc:	f7ff fac2 	bl	8001254 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e138      	b.n	8001f54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce2:	4b46      	ldr	r3, [pc, #280]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0ed      	beq.n	8001ccc <HAL_RCC_OscConfig+0x388>
 8001cf0:	e015      	b.n	8001d1e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf2:	f7ff faaf 	bl	8001254 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7ff faab 	bl	8001254 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e121      	b.n	8001f54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d10:	4b3a      	ldr	r3, [pc, #232]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1ed      	bne.n	8001cfa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d1e:	7ffb      	ldrb	r3, [r7, #31]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d105      	bne.n	8001d30 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d24:	4b35      	ldr	r3, [pc, #212]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d28:	4a34      	ldr	r2, [pc, #208]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0320 	and.w	r3, r3, #32
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d03c      	beq.n	8001db6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01c      	beq.n	8001d7e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d44:	4b2d      	ldr	r3, [pc, #180]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d4a:	4a2c      	ldr	r2, [pc, #176]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d54:	f7ff fa7e 	bl	8001254 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d5c:	f7ff fa7a 	bl	8001254 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e0f2      	b.n	8001f54 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d6e:	4b23      	ldr	r3, [pc, #140]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001d70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0ef      	beq.n	8001d5c <HAL_RCC_OscConfig+0x418>
 8001d7c:	e01b      	b.n	8001db6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d84:	4a1d      	ldr	r2, [pc, #116]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001d86:	f023 0301 	bic.w	r3, r3, #1
 8001d8a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8e:	f7ff fa61 	bl	8001254 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d96:	f7ff fa5d 	bl	8001254 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e0d5      	b.n	8001f54 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001da8:	4b14      	ldr	r3, [pc, #80]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1ef      	bne.n	8001d96 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 80c9 	beq.w	8001f52 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b0c      	cmp	r3, #12
 8001dca:	f000 8083 	beq.w	8001ed4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d15e      	bne.n	8001e94 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd6:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a08      	ldr	r2, [pc, #32]	@ (8001dfc <HAL_RCC_OscConfig+0x4b8>)
 8001ddc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de2:	f7ff fa37 	bl	8001254 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de8:	e00c      	b.n	8001e04 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dea:	f7ff fa33 	bl	8001254 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d905      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0ab      	b.n	8001f54 <HAL_RCC_OscConfig+0x610>
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b55      	ldr	r3, [pc, #340]	@ (8001f5c <HAL_RCC_OscConfig+0x618>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ec      	bne.n	8001dea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b52      	ldr	r3, [pc, #328]	@ (8001f5c <HAL_RCC_OscConfig+0x618>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b52      	ldr	r3, [pc, #328]	@ (8001f60 <HAL_RCC_OscConfig+0x61c>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	4943      	ldr	r1, [pc, #268]	@ (8001f5c <HAL_RCC_OscConfig+0x618>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b41      	ldr	r3, [pc, #260]	@ (8001f5c <HAL_RCC_OscConfig+0x618>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a40      	ldr	r2, [pc, #256]	@ (8001f5c <HAL_RCC_OscConfig+0x618>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b3e      	ldr	r3, [pc, #248]	@ (8001f5c <HAL_RCC_OscConfig+0x618>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a3d      	ldr	r2, [pc, #244]	@ (8001f5c <HAL_RCC_OscConfig+0x618>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f9f2 	bl	8001254 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f9ee 	bl	8001254 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e066      	b.n	8001f54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b35      	ldr	r3, [pc, #212]	@ (8001f5c <HAL_RCC_OscConfig+0x618>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x530>
 8001e92:	e05e      	b.n	8001f52 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b31      	ldr	r3, [pc, #196]	@ (8001f5c <HAL_RCC_OscConfig+0x618>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a30      	ldr	r2, [pc, #192]	@ (8001f5c <HAL_RCC_OscConfig+0x618>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea0:	f7ff f9d8 	bl	8001254 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea8:	f7ff f9d4 	bl	8001254 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e04c      	b.n	8001f54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eba:	4b28      	ldr	r3, [pc, #160]	@ (8001f5c <HAL_RCC_OscConfig+0x618>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001ec6:	4b25      	ldr	r3, [pc, #148]	@ (8001f5c <HAL_RCC_OscConfig+0x618>)
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	4924      	ldr	r1, [pc, #144]	@ (8001f5c <HAL_RCC_OscConfig+0x618>)
 8001ecc:	4b25      	ldr	r3, [pc, #148]	@ (8001f64 <HAL_RCC_OscConfig+0x620>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	60cb      	str	r3, [r1, #12]
 8001ed2:	e03e      	b.n	8001f52 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e039      	b.n	8001f54 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f5c <HAL_RCC_OscConfig+0x618>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f003 0203 	and.w	r2, r3, #3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d12c      	bne.n	8001f4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efe:	3b01      	subs	r3, #1
 8001f00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d123      	bne.n	8001f4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f10:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d11b      	bne.n	8001f4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f20:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d113      	bne.n	8001f4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f30:	085b      	lsrs	r3, r3, #1
 8001f32:	3b01      	subs	r3, #1
 8001f34:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d109      	bne.n	8001f4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f44:	085b      	lsrs	r3, r3, #1
 8001f46:	3b01      	subs	r3, #1
 8001f48:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3720      	adds	r7, #32
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	019f800c 	.word	0x019f800c
 8001f64:	feeefffc 	.word	0xfeeefffc

08001f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e11e      	b.n	80021be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f80:	4b91      	ldr	r3, [pc, #580]	@ (80021c8 <HAL_RCC_ClockConfig+0x260>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d910      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b8e      	ldr	r3, [pc, #568]	@ (80021c8 <HAL_RCC_ClockConfig+0x260>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 020f 	bic.w	r2, r3, #15
 8001f96:	498c      	ldr	r1, [pc, #560]	@ (80021c8 <HAL_RCC_ClockConfig+0x260>)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b8a      	ldr	r3, [pc, #552]	@ (80021c8 <HAL_RCC_ClockConfig+0x260>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e106      	b.n	80021be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d073      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d129      	bne.n	8002018 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc4:	4b81      	ldr	r3, [pc, #516]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0f4      	b.n	80021be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fd4:	f000 f966 	bl	80022a4 <RCC_GetSysClockFreqFromPLLSource>
 8001fd8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4a7c      	ldr	r2, [pc, #496]	@ (80021d0 <HAL_RCC_ClockConfig+0x268>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d93f      	bls.n	8002062 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001fe2:	4b7a      	ldr	r3, [pc, #488]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d009      	beq.n	8002002 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d033      	beq.n	8002062 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d12f      	bne.n	8002062 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002002:	4b72      	ldr	r3, [pc, #456]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800200a:	4a70      	ldr	r2, [pc, #448]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 800200c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002010:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002012:	2380      	movs	r3, #128	@ 0x80
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	e024      	b.n	8002062 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d107      	bne.n	8002030 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002020:	4b6a      	ldr	r3, [pc, #424]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d109      	bne.n	8002040 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0c6      	b.n	80021be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002030:	4b66      	ldr	r3, [pc, #408]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0be      	b.n	80021be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002040:	f000 f8ce 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 8002044:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4a61      	ldr	r2, [pc, #388]	@ (80021d0 <HAL_RCC_ClockConfig+0x268>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d909      	bls.n	8002062 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800204e:	4b5f      	ldr	r3, [pc, #380]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002056:	4a5d      	ldr	r2, [pc, #372]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 8002058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800205c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800205e:	2380      	movs	r3, #128	@ 0x80
 8002060:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002062:	4b5a      	ldr	r3, [pc, #360]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 0203 	bic.w	r2, r3, #3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4957      	ldr	r1, [pc, #348]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 8002070:	4313      	orrs	r3, r2
 8002072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002074:	f7ff f8ee 	bl	8001254 <HAL_GetTick>
 8002078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	e00a      	b.n	8002092 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207c:	f7ff f8ea 	bl	8001254 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e095      	b.n	80021be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002092:	4b4e      	ldr	r3, [pc, #312]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 020c 	and.w	r2, r3, #12
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d1eb      	bne.n	800207c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d023      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020bc:	4b43      	ldr	r3, [pc, #268]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	4a42      	ldr	r2, [pc, #264]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 80020c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020d4:	4b3d      	ldr	r3, [pc, #244]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80020dc:	4a3b      	ldr	r2, [pc, #236]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 80020de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e4:	4b39      	ldr	r3, [pc, #228]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	4936      	ldr	r1, [pc, #216]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
 80020f6:	e008      	b.n	800210a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2b80      	cmp	r3, #128	@ 0x80
 80020fc:	d105      	bne.n	800210a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80020fe:	4b33      	ldr	r3, [pc, #204]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	4a32      	ldr	r2, [pc, #200]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 8002104:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002108:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800210a:	4b2f      	ldr	r3, [pc, #188]	@ (80021c8 <HAL_RCC_ClockConfig+0x260>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d21d      	bcs.n	8002154 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002118:	4b2b      	ldr	r3, [pc, #172]	@ (80021c8 <HAL_RCC_ClockConfig+0x260>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 020f 	bic.w	r2, r3, #15
 8002120:	4929      	ldr	r1, [pc, #164]	@ (80021c8 <HAL_RCC_ClockConfig+0x260>)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002128:	f7ff f894 	bl	8001254 <HAL_GetTick>
 800212c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	e00a      	b.n	8002146 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002130:	f7ff f890 	bl	8001254 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e03b      	b.n	80021be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b20      	ldr	r3, [pc, #128]	@ (80021c8 <HAL_RCC_ClockConfig+0x260>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d1ed      	bne.n	8002130 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002160:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4917      	ldr	r1, [pc, #92]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 800216e:	4313      	orrs	r3, r2
 8002170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800217e:	4b13      	ldr	r3, [pc, #76]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	490f      	ldr	r1, [pc, #60]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 800218e:	4313      	orrs	r3, r2
 8002190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002192:	f000 f825 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 8002196:	4602      	mov	r2, r0
 8002198:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <HAL_RCC_ClockConfig+0x264>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	490c      	ldr	r1, [pc, #48]	@ (80021d4 <HAL_RCC_ClockConfig+0x26c>)
 80021a4:	5ccb      	ldrb	r3, [r1, r3]
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	fa22 f303 	lsr.w	r3, r2, r3
 80021ae:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <HAL_RCC_ClockConfig+0x270>)
 80021b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021b2:	4b0a      	ldr	r3, [pc, #40]	@ (80021dc <HAL_RCC_ClockConfig+0x274>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff f800 	bl	80011bc <HAL_InitTick>
 80021bc:	4603      	mov	r3, r0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40022000 	.word	0x40022000
 80021cc:	40021000 	.word	0x40021000
 80021d0:	04c4b400 	.word	0x04c4b400
 80021d4:	0800de7c 	.word	0x0800de7c
 80021d8:	20000008 	.word	0x20000008
 80021dc:	2000000c 	.word	0x2000000c

080021e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002298 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d102      	bne.n	80021f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021f2:	4b2a      	ldr	r3, [pc, #168]	@ (800229c <HAL_RCC_GetSysClockFreq+0xbc>)
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	e047      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80021f8:	4b27      	ldr	r3, [pc, #156]	@ (8002298 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b08      	cmp	r3, #8
 8002202:	d102      	bne.n	800220a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002204:	4b26      	ldr	r3, [pc, #152]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	e03e      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800220a:	4b23      	ldr	r3, [pc, #140]	@ (8002298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b0c      	cmp	r3, #12
 8002214:	d136      	bne.n	8002284 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002216:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002220:	4b1d      	ldr	r3, [pc, #116]	@ (8002298 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	3301      	adds	r3, #1
 800222c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b03      	cmp	r3, #3
 8002232:	d10c      	bne.n	800224e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002234:	4a1a      	ldr	r2, [pc, #104]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	fbb2 f3f3 	udiv	r3, r2, r3
 800223c:	4a16      	ldr	r2, [pc, #88]	@ (8002298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800223e:	68d2      	ldr	r2, [r2, #12]
 8002240:	0a12      	lsrs	r2, r2, #8
 8002242:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	617b      	str	r3, [r7, #20]
      break;
 800224c:	e00c      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800224e:	4a13      	ldr	r2, [pc, #76]	@ (800229c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	fbb2 f3f3 	udiv	r3, r2, r3
 8002256:	4a10      	ldr	r2, [pc, #64]	@ (8002298 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002258:	68d2      	ldr	r2, [r2, #12]
 800225a:	0a12      	lsrs	r2, r2, #8
 800225c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002260:	fb02 f303 	mul.w	r3, r2, r3
 8002264:	617b      	str	r3, [r7, #20]
      break;
 8002266:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002268:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	0e5b      	lsrs	r3, r3, #25
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	3301      	adds	r3, #1
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	e001      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002288:	693b      	ldr	r3, [r7, #16]
}
 800228a:	4618      	mov	r0, r3
 800228c:	371c      	adds	r7, #28
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	00f42400 	.word	0x00f42400
 80022a0:	016e3600 	.word	0x016e3600

080022a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002324 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002324 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	3301      	adds	r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d10c      	bne.n	80022e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022c8:	4a17      	ldr	r2, [pc, #92]	@ (8002328 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d0:	4a14      	ldr	r2, [pc, #80]	@ (8002324 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022d2:	68d2      	ldr	r2, [r2, #12]
 80022d4:	0a12      	lsrs	r2, r2, #8
 80022d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80022da:	fb02 f303 	mul.w	r3, r2, r3
 80022de:	617b      	str	r3, [r7, #20]
    break;
 80022e0:	e00c      	b.n	80022fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022e2:	4a12      	ldr	r2, [pc, #72]	@ (800232c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002324 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022ec:	68d2      	ldr	r2, [r2, #12]
 80022ee:	0a12      	lsrs	r2, r2, #8
 80022f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
 80022f8:	617b      	str	r3, [r7, #20]
    break;
 80022fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022fc:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0e5b      	lsrs	r3, r3, #25
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	3301      	adds	r3, #1
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	fbb2 f3f3 	udiv	r3, r2, r3
 8002314:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002316:	687b      	ldr	r3, [r7, #4]
}
 8002318:	4618      	mov	r0, r3
 800231a:	371c      	adds	r7, #28
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	40021000 	.word	0x40021000
 8002328:	016e3600 	.word	0x016e3600
 800232c:	00f42400 	.word	0x00f42400

08002330 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e09d      	b.n	800247e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002346:	2b00      	cmp	r3, #0
 8002348:	d108      	bne.n	800235c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002352:	d009      	beq.n	8002368 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
 800235a:	e005      	b.n	8002368 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe fe30 	bl	8000fe8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800239e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80023a8:	d902      	bls.n	80023b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	e002      	b.n	80023b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80023be:	d007      	beq.n	80023d0 <HAL_SPI_Init+0xa0>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80023c8:	d002      	beq.n	80023d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	431a      	orrs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002412:	ea42 0103 	orr.w	r1, r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	0c1b      	lsrs	r3, r3, #16
 800242c:	f003 0204 	and.w	r2, r3, #4
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800244c:	ea42 0103 	orr.w	r1, r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	69da      	ldr	r2, [r3, #28]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800246c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b088      	sub	sp, #32
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	603b      	str	r3, [r7, #0]
 8002492:	4613      	mov	r3, r2
 8002494:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002496:	f7fe fedd 	bl	8001254 <HAL_GetTick>
 800249a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d001      	beq.n	80024b0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80024ac:	2302      	movs	r3, #2
 80024ae:	e15c      	b.n	800276a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <HAL_SPI_Transmit+0x36>
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e154      	b.n	800276a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_SPI_Transmit+0x48>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e14d      	b.n	800276a <HAL_SPI_Transmit+0x2e4>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2203      	movs	r2, #3
 80024da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	88fa      	ldrh	r2, [r7, #6]
 80024ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	88fa      	ldrh	r2, [r7, #6]
 80024f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002520:	d10f      	bne.n	8002542 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002530:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002540:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800254c:	2b40      	cmp	r3, #64	@ 0x40
 800254e:	d007      	beq.n	8002560 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800255e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002568:	d952      	bls.n	8002610 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <HAL_SPI_Transmit+0xf2>
 8002572:	8b7b      	ldrh	r3, [r7, #26]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d145      	bne.n	8002604 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800257c:	881a      	ldrh	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002588:	1c9a      	adds	r2, r3, #2
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800259c:	e032      	b.n	8002604 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d112      	bne.n	80025d2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b0:	881a      	ldrh	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025bc:	1c9a      	adds	r2, r3, #2
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025d0:	e018      	b.n	8002604 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025d2:	f7fe fe3f 	bl	8001254 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d803      	bhi.n	80025ea <HAL_SPI_Transmit+0x164>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d102      	bne.n	80025f0 <HAL_SPI_Transmit+0x16a>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e0b2      	b.n	800276a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1c7      	bne.n	800259e <HAL_SPI_Transmit+0x118>
 800260e:	e083      	b.n	8002718 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <HAL_SPI_Transmit+0x198>
 8002618:	8b7b      	ldrh	r3, [r7, #26]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d177      	bne.n	800270e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002622:	b29b      	uxth	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d912      	bls.n	800264e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800262c:	881a      	ldrh	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002638:	1c9a      	adds	r2, r3, #2
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b02      	subs	r3, #2
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800264c:	e05f      	b.n	800270e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	330c      	adds	r3, #12
 8002658:	7812      	ldrb	r2, [r2, #0]
 800265a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002674:	e04b      	b.n	800270e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b02      	cmp	r3, #2
 8002682:	d12b      	bne.n	80026dc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b01      	cmp	r3, #1
 800268c:	d912      	bls.n	80026b4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002692:	881a      	ldrh	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269e:	1c9a      	adds	r2, r3, #2
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b02      	subs	r3, #2
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80026b2:	e02c      	b.n	800270e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	330c      	adds	r3, #12
 80026be:	7812      	ldrb	r2, [r2, #0]
 80026c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80026da:	e018      	b.n	800270e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026dc:	f7fe fdba 	bl	8001254 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d803      	bhi.n	80026f4 <HAL_SPI_Transmit+0x26e>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f2:	d102      	bne.n	80026fa <HAL_SPI_Transmit+0x274>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d109      	bne.n	800270e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e02d      	b.n	800276a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002712:	b29b      	uxth	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ae      	bne.n	8002676 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002718:	69fa      	ldr	r2, [r7, #28]
 800271a:	6839      	ldr	r1, [r7, #0]
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f947 	bl	80029b0 <SPI_EndRxTxTransaction>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2220      	movs	r2, #32
 800272c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10a      	bne.n	800274c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002768:	2300      	movs	r3, #0
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	3720      	adds	r7, #32
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	4613      	mov	r3, r2
 8002782:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002784:	f7fe fd66 	bl	8001254 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	4413      	add	r3, r2
 8002792:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002794:	f7fe fd5e 	bl	8001254 <HAL_GetTick>
 8002798:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800279a:	4b39      	ldr	r3, [pc, #228]	@ (8002880 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	015b      	lsls	r3, r3, #5
 80027a0:	0d1b      	lsrs	r3, r3, #20
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	fb02 f303 	mul.w	r3, r2, r3
 80027a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027aa:	e054      	b.n	8002856 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b2:	d050      	beq.n	8002856 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027b4:	f7fe fd4e 	bl	8001254 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d902      	bls.n	80027ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d13d      	bne.n	8002846 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80027d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027e2:	d111      	bne.n	8002808 <SPI_WaitFlagStateUntilTimeout+0x94>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027ec:	d004      	beq.n	80027f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027f6:	d107      	bne.n	8002808 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002806:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002810:	d10f      	bne.n	8002832 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002830:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e017      	b.n	8002876 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	3b01      	subs	r3, #1
 8002854:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	4013      	ands	r3, r2
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	429a      	cmp	r2, r3
 8002864:	bf0c      	ite	eq
 8002866:	2301      	moveq	r3, #1
 8002868:	2300      	movne	r3, #0
 800286a:	b2db      	uxtb	r3, r3
 800286c:	461a      	mov	r2, r3
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	429a      	cmp	r2, r3
 8002872:	d19b      	bne.n	80027ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3720      	adds	r7, #32
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000008 	.word	0x20000008

08002884 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08a      	sub	sp, #40	@ 0x28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002896:	f7fe fcdd 	bl	8001254 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	4413      	add	r3, r2
 80028a4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80028a6:	f7fe fcd5 	bl	8001254 <HAL_GetTick>
 80028aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	330c      	adds	r3, #12
 80028b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80028b4:	4b3d      	ldr	r3, [pc, #244]	@ (80029ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	00da      	lsls	r2, r3, #3
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	0d1b      	lsrs	r3, r3, #20
 80028c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80028cc:	e060      	b.n	8002990 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80028d4:	d107      	bne.n	80028e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d104      	bne.n	80028e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80028e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d050      	beq.n	8002990 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028ee:	f7fe fcb1 	bl	8001254 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d902      	bls.n	8002904 <SPI_WaitFifoStateUntilTimeout+0x80>
 80028fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002900:	2b00      	cmp	r3, #0
 8002902:	d13d      	bne.n	8002980 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002912:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800291c:	d111      	bne.n	8002942 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002926:	d004      	beq.n	8002932 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002930:	d107      	bne.n	8002942 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002940:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800294a:	d10f      	bne.n	800296c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800296a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e010      	b.n	80029a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	3b01      	subs	r3, #1
 800298e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	4013      	ands	r3, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	429a      	cmp	r2, r3
 800299e:	d196      	bne.n	80028ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3728      	adds	r7, #40	@ 0x28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000008 	.word	0x20000008

080029b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f7ff ff5b 	bl	8002884 <SPI_WaitFifoStateUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d007      	beq.n	80029e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d8:	f043 0220 	orr.w	r2, r3, #32
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e027      	b.n	8002a34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2200      	movs	r2, #0
 80029ec:	2180      	movs	r1, #128	@ 0x80
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f7ff fec0 	bl	8002774 <SPI_WaitFlagStateUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fe:	f043 0220 	orr.w	r2, r3, #32
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e014      	b.n	8002a34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f7ff ff34 	bl	8002884 <SPI_WaitFifoStateUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d007      	beq.n	8002a32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a26:	f043 0220 	orr.w	r2, r3, #32
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e000      	b.n	8002a34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <memset>:
 8002a3c:	4402      	add	r2, r0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d100      	bne.n	8002a46 <memset+0xa>
 8002a44:	4770      	bx	lr
 8002a46:	f803 1b01 	strb.w	r1, [r3], #1
 8002a4a:	e7f9      	b.n	8002a40 <memset+0x4>

08002a4c <__libc_init_array>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	4d0d      	ldr	r5, [pc, #52]	@ (8002a84 <__libc_init_array+0x38>)
 8002a50:	4c0d      	ldr	r4, [pc, #52]	@ (8002a88 <__libc_init_array+0x3c>)
 8002a52:	1b64      	subs	r4, r4, r5
 8002a54:	10a4      	asrs	r4, r4, #2
 8002a56:	2600      	movs	r6, #0
 8002a58:	42a6      	cmp	r6, r4
 8002a5a:	d109      	bne.n	8002a70 <__libc_init_array+0x24>
 8002a5c:	4d0b      	ldr	r5, [pc, #44]	@ (8002a8c <__libc_init_array+0x40>)
 8002a5e:	4c0c      	ldr	r4, [pc, #48]	@ (8002a90 <__libc_init_array+0x44>)
 8002a60:	f000 f818 	bl	8002a94 <_init>
 8002a64:	1b64      	subs	r4, r4, r5
 8002a66:	10a4      	asrs	r4, r4, #2
 8002a68:	2600      	movs	r6, #0
 8002a6a:	42a6      	cmp	r6, r4
 8002a6c:	d105      	bne.n	8002a7a <__libc_init_array+0x2e>
 8002a6e:	bd70      	pop	{r4, r5, r6, pc}
 8002a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a74:	4798      	blx	r3
 8002a76:	3601      	adds	r6, #1
 8002a78:	e7ee      	b.n	8002a58 <__libc_init_array+0xc>
 8002a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a7e:	4798      	blx	r3
 8002a80:	3601      	adds	r6, #1
 8002a82:	e7f2      	b.n	8002a6a <__libc_init_array+0x1e>
 8002a84:	0800de8c 	.word	0x0800de8c
 8002a88:	0800de8c 	.word	0x0800de8c
 8002a8c:	0800de8c 	.word	0x0800de8c
 8002a90:	0800de90 	.word	0x0800de90

08002a94 <_init>:
 8002a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a96:	bf00      	nop
 8002a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a9a:	bc08      	pop	{r3}
 8002a9c:	469e      	mov	lr, r3
 8002a9e:	4770      	bx	lr

08002aa0 <_fini>:
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa2:	bf00      	nop
 8002aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa6:	bc08      	pop	{r3}
 8002aa8:	469e      	mov	lr, r3
 8002aaa:	4770      	bx	lr
