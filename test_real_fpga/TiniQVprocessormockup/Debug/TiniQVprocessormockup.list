
TiniQVprocessormockup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f0c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b3e0  080040e4  080040e4  000050e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4c4  0800f4c4  00011014  2**0
                  CONTENTS
  4 .ARM          00000000  0800f4c4  0800f4c4  00011014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f4c4  0800f4c4  00011014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4c4  0800f4c4  000104c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f4c8  0800f4c8  000104c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0800f4cc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000014  0800f4e0  00011014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  0800f4e0  00011168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f742  00000000  00000000  00011044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000293b  00000000  00000000  00020786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  000230c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cea  00000000  00000000  000241c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026bfe  00000000  00000000  00024eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143fb  00000000  00000000  0004baa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7c66  00000000  00000000  0005fea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157b09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a0  00000000  00000000  00157b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  0015c0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080040cc 	.word	0x080040cc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	080040cc 	.word	0x080040cc

08000218 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000218:	b590      	push	{r4, r7, lr}
 800021a:	b085      	sub	sp, #20
 800021c:	af02      	add	r7, sp, #8
 800021e:	4604      	mov	r4, r0
 8000220:	4608      	mov	r0, r1
 8000222:	4611      	mov	r1, r2
 8000224:	461a      	mov	r2, r3
 8000226:	4623      	mov	r3, r4
 8000228:	80fb      	strh	r3, [r7, #6]
 800022a:	4603      	mov	r3, r0
 800022c:	80bb      	strh	r3, [r7, #4]
 800022e:	460b      	mov	r3, r1
 8000230:	807b      	strh	r3, [r7, #2]
 8000232:	4613      	mov	r3, r2
 8000234:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000236:	88f8      	ldrh	r0, [r7, #6]
 8000238:	88b9      	ldrh	r1, [r7, #4]
 800023a:	887a      	ldrh	r2, [r7, #2]
 800023c:	883c      	ldrh	r4, [r7, #0]
 800023e:	8b3b      	ldrh	r3, [r7, #24]
 8000240:	9300      	str	r3, [sp, #0]
 8000242:	4623      	mov	r3, r4
 8000244:	f000 faca 	bl	80007dc <ST7735_FillRectangle>
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	bd90      	pop	{r4, r7, pc}

08000250 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af02      	add	r7, sp, #8
 8000256:	4603      	mov	r3, r0
 8000258:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800025a:	4b08      	ldr	r3, [pc, #32]	@ (800027c <fillScreen+0x2c>)
 800025c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000260:	4b07      	ldr	r3, [pc, #28]	@ (8000280 <fillScreen+0x30>)
 8000262:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000266:	88fb      	ldrh	r3, [r7, #6]
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	460b      	mov	r3, r1
 800026c:	2100      	movs	r1, #0
 800026e:	2000      	movs	r0, #0
 8000270:	f7ff ffd2 	bl	8000218 <fillRect>
}
 8000274:	bf00      	nop
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000030 	.word	0x20000030
 8000280:	20000032 	.word	0x20000032

08000284 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	2140      	movs	r1, #64	@ 0x40
 800028c:	4802      	ldr	r0, [pc, #8]	@ (8000298 <ST7735_Select+0x14>)
 800028e:	f001 fdb7 	bl	8001e00 <HAL_GPIO_WritePin>
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	48000400 	.word	0x48000400

0800029c <ST7735_Unselect>:

void ST7735_Unselect()
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80002a0:	2201      	movs	r2, #1
 80002a2:	2140      	movs	r1, #64	@ 0x40
 80002a4:	4802      	ldr	r0, [pc, #8]	@ (80002b0 <ST7735_Unselect+0x14>)
 80002a6:	f001 fdab 	bl	8001e00 <HAL_GPIO_WritePin>
}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	48000400 	.word	0x48000400

080002b4 <ST7735_Reset>:

void ST7735_Reset()
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80002b8:	2200      	movs	r2, #0
 80002ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002c2:	f001 fd9d 	bl	8001e00 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80002c6:	2005      	movs	r0, #5
 80002c8:	f001 f914 	bl	80014f4 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002d6:	f001 fd93 	bl	8001e00 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80002da:	2001      	movs	r0, #1
 80002dc:	f001 f90a 	bl	80014f4 <HAL_Delay>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2180      	movs	r1, #128	@ 0x80
 80002f2:	4807      	ldr	r0, [pc, #28]	@ (8000310 <ST7735_WriteCommand+0x2c>)
 80002f4:	f001 fd84 	bl	8001e00 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80002f8:	1df9      	adds	r1, r7, #7
 80002fa:	f04f 33ff 	mov.w	r3, #4294967295
 80002fe:	2201      	movs	r2, #1
 8000300:	4804      	ldr	r0, [pc, #16]	@ (8000314 <ST7735_WriteCommand+0x30>)
 8000302:	f002 fbea 	bl	8002ada <HAL_SPI_Transmit>
}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	48000800 	.word	0x48000800
 8000314:	20000054 	.word	0x20000054

08000318 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000322:	2201      	movs	r2, #1
 8000324:	2180      	movs	r1, #128	@ 0x80
 8000326:	4807      	ldr	r0, [pc, #28]	@ (8000344 <ST7735_WriteData+0x2c>)
 8000328:	f001 fd6a 	bl	8001e00 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	b29a      	uxth	r2, r3
 8000330:	f04f 33ff 	mov.w	r3, #4294967295
 8000334:	6879      	ldr	r1, [r7, #4]
 8000336:	4804      	ldr	r0, [pc, #16]	@ (8000348 <ST7735_WriteData+0x30>)
 8000338:	f002 fbcf 	bl	8002ada <HAL_SPI_Transmit>
}
 800033c:	bf00      	nop
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	48000800 	.word	0x48000800
 8000348:	20000054 	.word	0x20000054

0800034c <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	1c5a      	adds	r2, r3, #1
 8000358:	607a      	str	r2, [r7, #4]
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800035e:	e034      	b.n	80003ca <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	1c5a      	adds	r2, r3, #1
 8000364:	607a      	str	r2, [r7, #4]
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800036a:	7afb      	ldrb	r3, [r7, #11]
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff ffb9 	bl	80002e4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	1c5a      	adds	r2, r3, #1
 8000376:	607a      	str	r2, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800037c:	7abb      	ldrb	r3, [r7, #10]
 800037e:	b29b      	uxth	r3, r3
 8000380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000384:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000386:	7abb      	ldrb	r3, [r7, #10]
 8000388:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800038c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800038e:	7abb      	ldrb	r3, [r7, #10]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d008      	beq.n	80003a6 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000394:	7abb      	ldrb	r3, [r7, #10]
 8000396:	4619      	mov	r1, r3
 8000398:	6878      	ldr	r0, [r7, #4]
 800039a:	f7ff ffbd 	bl	8000318 <ST7735_WriteData>
            addr += numArgs;
 800039e:	7abb      	ldrb	r3, [r7, #10]
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	4413      	add	r3, r2
 80003a4:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80003a6:	89bb      	ldrh	r3, [r7, #12]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d00e      	beq.n	80003ca <DisplayInit+0x7e>
            ms = *addr++;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	1c5a      	adds	r2, r3, #1
 80003b0:	607a      	str	r2, [r7, #4]
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80003b6:	89bb      	ldrh	r3, [r7, #12]
 80003b8:	2bff      	cmp	r3, #255	@ 0xff
 80003ba:	d102      	bne.n	80003c2 <DisplayInit+0x76>
 80003bc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80003c0:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80003c2:	89bb      	ldrh	r3, [r7, #12]
 80003c4:	4618      	mov	r0, r3
 80003c6:	f001 f895 	bl	80014f4 <HAL_Delay>
    while(numCommands--) {
 80003ca:	7bfb      	ldrb	r3, [r7, #15]
 80003cc:	1e5a      	subs	r2, r3, #1
 80003ce:	73fa      	strb	r2, [r7, #15]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d1c5      	bne.n	8000360 <DisplayInit+0x14>
        }
    }
}
 80003d4:	bf00      	nop
 80003d6:	bf00      	nop
 80003d8:	3710      	adds	r7, #16
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80003e0:	b590      	push	{r4, r7, lr}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4604      	mov	r4, r0
 80003e8:	4608      	mov	r0, r1
 80003ea:	4611      	mov	r1, r2
 80003ec:	461a      	mov	r2, r3
 80003ee:	4623      	mov	r3, r4
 80003f0:	71fb      	strb	r3, [r7, #7]
 80003f2:	4603      	mov	r3, r0
 80003f4:	71bb      	strb	r3, [r7, #6]
 80003f6:	460b      	mov	r3, r1
 80003f8:	717b      	strb	r3, [r7, #5]
 80003fa:	4613      	mov	r3, r2
 80003fc:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80003fe:	202a      	movs	r0, #42	@ 0x2a
 8000400:	f7ff ff70 	bl	80002e4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000404:	2300      	movs	r3, #0
 8000406:	733b      	strb	r3, [r7, #12]
 8000408:	4b17      	ldr	r3, [pc, #92]	@ (8000468 <ST7735_SetAddressWindow+0x88>)
 800040a:	781a      	ldrb	r2, [r3, #0]
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	4413      	add	r3, r2
 8000410:	b2db      	uxtb	r3, r3
 8000412:	737b      	strb	r3, [r7, #13]
 8000414:	2300      	movs	r3, #0
 8000416:	73bb      	strb	r3, [r7, #14]
 8000418:	4b13      	ldr	r3, [pc, #76]	@ (8000468 <ST7735_SetAddressWindow+0x88>)
 800041a:	781a      	ldrb	r2, [r3, #0]
 800041c:	797b      	ldrb	r3, [r7, #5]
 800041e:	4413      	add	r3, r2
 8000420:	b2db      	uxtb	r3, r3
 8000422:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000424:	f107 030c 	add.w	r3, r7, #12
 8000428:	2104      	movs	r1, #4
 800042a:	4618      	mov	r0, r3
 800042c:	f7ff ff74 	bl	8000318 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000430:	202b      	movs	r0, #43	@ 0x2b
 8000432:	f7ff ff57 	bl	80002e4 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000436:	4b0d      	ldr	r3, [pc, #52]	@ (800046c <ST7735_SetAddressWindow+0x8c>)
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	79bb      	ldrb	r3, [r7, #6]
 800043c:	4413      	add	r3, r2
 800043e:	b2db      	uxtb	r3, r3
 8000440:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000442:	4b0a      	ldr	r3, [pc, #40]	@ (800046c <ST7735_SetAddressWindow+0x8c>)
 8000444:	781a      	ldrb	r2, [r3, #0]
 8000446:	793b      	ldrb	r3, [r7, #4]
 8000448:	4413      	add	r3, r2
 800044a:	b2db      	uxtb	r3, r3
 800044c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800044e:	f107 030c 	add.w	r3, r7, #12
 8000452:	2104      	movs	r1, #4
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff ff5f 	bl	8000318 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800045a:	202c      	movs	r0, #44	@ 0x2c
 800045c:	f7ff ff42 	bl	80002e4 <ST7735_WriteCommand>
}
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	bd90      	pop	{r4, r7, pc}
 8000468:	20000037 	.word	0x20000037
 800046c:	20000038 	.word	0x20000038

08000470 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800047a:	f7ff ff03 	bl	8000284 <ST7735_Select>
    ST7735_Reset();
 800047e:	f7ff ff19 	bl	80002b4 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000482:	480c      	ldr	r0, [pc, #48]	@ (80004b4 <ST7735_Init+0x44>)
 8000484:	f7ff ff62 	bl	800034c <DisplayInit>
    DisplayInit(init_cmds2);
 8000488:	480b      	ldr	r0, [pc, #44]	@ (80004b8 <ST7735_Init+0x48>)
 800048a:	f7ff ff5f 	bl	800034c <DisplayInit>
    DisplayInit(init_cmds3);
 800048e:	480b      	ldr	r0, [pc, #44]	@ (80004bc <ST7735_Init+0x4c>)
 8000490:	f7ff ff5c 	bl	800034c <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8000494:	4b0a      	ldr	r3, [pc, #40]	@ (80004c0 <ST7735_Init+0x50>)
 8000496:	2200      	movs	r2, #0
 8000498:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800049a:	4b0a      	ldr	r3, [pc, #40]	@ (80004c4 <ST7735_Init+0x54>)
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 f810 	bl	80004c8 <ST7735_SetRotation>
    ST7735_Unselect();
 80004a8:	f7ff fef8 	bl	800029c <ST7735_Unselect>

}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	080040f4 	.word	0x080040f4
 80004b8:	0800412c 	.word	0x0800412c
 80004bc:	0800413c 	.word	0x0800413c
 80004c0:	20000035 	.word	0x20000035
 80004c4:	20000036 	.word	0x20000036

080004c8 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	f003 0303 	and.w	r3, r3, #3
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	4b33      	ldr	r3, [pc, #204]	@ (80005ac <ST7735_SetRotation+0xe4>)
 80004e0:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80004e2:	4b32      	ldr	r3, [pc, #200]	@ (80005ac <ST7735_SetRotation+0xe4>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b03      	cmp	r3, #3
 80004e8:	d84e      	bhi.n	8000588 <ST7735_SetRotation+0xc0>
 80004ea:	a201      	add	r2, pc, #4	@ (adr r2, 80004f0 <ST7735_SetRotation+0x28>)
 80004ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f0:	08000501 	.word	0x08000501
 80004f4:	08000523 	.word	0x08000523
 80004f8:	08000545 	.word	0x08000545
 80004fc:	08000567 	.word	0x08000567
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000500:	23c0      	movs	r3, #192	@ 0xc0
 8000502:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000504:	4b2a      	ldr	r3, [pc, #168]	@ (80005b0 <ST7735_SetRotation+0xe8>)
 8000506:	22a0      	movs	r2, #160	@ 0xa0
 8000508:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800050a:	4b2a      	ldr	r3, [pc, #168]	@ (80005b4 <ST7735_SetRotation+0xec>)
 800050c:	2280      	movs	r2, #128	@ 0x80
 800050e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000510:	4b29      	ldr	r3, [pc, #164]	@ (80005b8 <ST7735_SetRotation+0xf0>)
 8000512:	781a      	ldrb	r2, [r3, #0]
 8000514:	4b29      	ldr	r3, [pc, #164]	@ (80005bc <ST7735_SetRotation+0xf4>)
 8000516:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000518:	4b29      	ldr	r3, [pc, #164]	@ (80005c0 <ST7735_SetRotation+0xf8>)
 800051a:	781a      	ldrb	r2, [r3, #0]
 800051c:	4b29      	ldr	r3, [pc, #164]	@ (80005c4 <ST7735_SetRotation+0xfc>)
 800051e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000520:	e032      	b.n	8000588 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000522:	23a0      	movs	r3, #160	@ 0xa0
 8000524:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000526:	4b23      	ldr	r3, [pc, #140]	@ (80005b4 <ST7735_SetRotation+0xec>)
 8000528:	22a0      	movs	r2, #160	@ 0xa0
 800052a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800052c:	4b20      	ldr	r3, [pc, #128]	@ (80005b0 <ST7735_SetRotation+0xe8>)
 800052e:	2280      	movs	r2, #128	@ 0x80
 8000530:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000532:	4b21      	ldr	r3, [pc, #132]	@ (80005b8 <ST7735_SetRotation+0xf0>)
 8000534:	781a      	ldrb	r2, [r3, #0]
 8000536:	4b23      	ldr	r3, [pc, #140]	@ (80005c4 <ST7735_SetRotation+0xfc>)
 8000538:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800053a:	4b21      	ldr	r3, [pc, #132]	@ (80005c0 <ST7735_SetRotation+0xf8>)
 800053c:	781a      	ldrb	r2, [r3, #0]
 800053e:	4b1f      	ldr	r3, [pc, #124]	@ (80005bc <ST7735_SetRotation+0xf4>)
 8000540:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000542:	e021      	b.n	8000588 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000544:	2300      	movs	r3, #0
 8000546:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000548:	4b19      	ldr	r3, [pc, #100]	@ (80005b0 <ST7735_SetRotation+0xe8>)
 800054a:	22a0      	movs	r2, #160	@ 0xa0
 800054c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800054e:	4b19      	ldr	r3, [pc, #100]	@ (80005b4 <ST7735_SetRotation+0xec>)
 8000550:	2280      	movs	r2, #128	@ 0x80
 8000552:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000554:	4b18      	ldr	r3, [pc, #96]	@ (80005b8 <ST7735_SetRotation+0xf0>)
 8000556:	781a      	ldrb	r2, [r3, #0]
 8000558:	4b18      	ldr	r3, [pc, #96]	@ (80005bc <ST7735_SetRotation+0xf4>)
 800055a:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 800055c:	4b18      	ldr	r3, [pc, #96]	@ (80005c0 <ST7735_SetRotation+0xf8>)
 800055e:	781a      	ldrb	r2, [r3, #0]
 8000560:	4b18      	ldr	r3, [pc, #96]	@ (80005c4 <ST7735_SetRotation+0xfc>)
 8000562:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000564:	e010      	b.n	8000588 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000566:	2360      	movs	r3, #96	@ 0x60
 8000568:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800056a:	4b12      	ldr	r3, [pc, #72]	@ (80005b4 <ST7735_SetRotation+0xec>)
 800056c:	22a0      	movs	r2, #160	@ 0xa0
 800056e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000570:	4b0f      	ldr	r3, [pc, #60]	@ (80005b0 <ST7735_SetRotation+0xe8>)
 8000572:	2280      	movs	r2, #128	@ 0x80
 8000574:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000576:	4b10      	ldr	r3, [pc, #64]	@ (80005b8 <ST7735_SetRotation+0xf0>)
 8000578:	781a      	ldrb	r2, [r3, #0]
 800057a:	4b12      	ldr	r3, [pc, #72]	@ (80005c4 <ST7735_SetRotation+0xfc>)
 800057c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800057e:	4b10      	ldr	r3, [pc, #64]	@ (80005c0 <ST7735_SetRotation+0xf8>)
 8000580:	781a      	ldrb	r2, [r3, #0]
 8000582:	4b0e      	ldr	r3, [pc, #56]	@ (80005bc <ST7735_SetRotation+0xf4>)
 8000584:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000586:	bf00      	nop
  }
  ST7735_Select();
 8000588:	f7ff fe7c 	bl	8000284 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800058c:	2036      	movs	r0, #54	@ 0x36
 800058e:	f7ff fea9 	bl	80002e4 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000592:	f107 030f 	add.w	r3, r7, #15
 8000596:	2101      	movs	r1, #1
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff febd 	bl	8000318 <ST7735_WriteData>
  ST7735_Unselect();
 800059e:	f7ff fe7d 	bl	800029c <ST7735_Unselect>
}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000034 	.word	0x20000034
 80005b0:	20000032 	.word	0x20000032
 80005b4:	20000030 	.word	0x20000030
 80005b8:	20000035 	.word	0x20000035
 80005bc:	20000037 	.word	0x20000037
 80005c0:	20000036 	.word	0x20000036
 80005c4:	20000038 	.word	0x20000038

080005c8 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]
 80005d2:	460b      	mov	r3, r1
 80005d4:	80bb      	strh	r3, [r7, #4]
 80005d6:	4613      	mov	r3, r2
 80005d8:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	4a17      	ldr	r2, [pc, #92]	@ (800063c <ST7735_DrawPixel+0x74>)
 80005de:	f9b2 2000 	ldrsh.w	r2, [r2]
 80005e2:	4293      	cmp	r3, r2
 80005e4:	da26      	bge.n	8000634 <ST7735_DrawPixel+0x6c>
 80005e6:	88bb      	ldrh	r3, [r7, #4]
 80005e8:	4a15      	ldr	r2, [pc, #84]	@ (8000640 <ST7735_DrawPixel+0x78>)
 80005ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 80005ee:	4293      	cmp	r3, r2
 80005f0:	da20      	bge.n	8000634 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 80005f2:	f7ff fe47 	bl	8000284 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	b2d8      	uxtb	r0, r3
 80005fa:	88bb      	ldrh	r3, [r7, #4]
 80005fc:	b2d9      	uxtb	r1, r3
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	3301      	adds	r3, #1
 8000604:	b2da      	uxtb	r2, r3
 8000606:	88bb      	ldrh	r3, [r7, #4]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	3301      	adds	r3, #1
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f7ff fee7 	bl	80003e0 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000612:	887b      	ldrh	r3, [r7, #2]
 8000614:	0a1b      	lsrs	r3, r3, #8
 8000616:	b29b      	uxth	r3, r3
 8000618:	b2db      	uxtb	r3, r3
 800061a:	733b      	strb	r3, [r7, #12]
 800061c:	887b      	ldrh	r3, [r7, #2]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	2102      	movs	r1, #2
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fe75 	bl	8000318 <ST7735_WriteData>

    ST7735_Unselect();
 800062e:	f7ff fe35 	bl	800029c <ST7735_Unselect>
 8000632:	e000      	b.n	8000636 <ST7735_DrawPixel+0x6e>
        return;
 8000634:	bf00      	nop
}
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000030 	.word	0x20000030
 8000640:	20000032 	.word	0x20000032

08000644 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000644:	b082      	sub	sp, #8
 8000646:	b590      	push	{r4, r7, lr}
 8000648:	b089      	sub	sp, #36	@ 0x24
 800064a:	af00      	add	r7, sp, #0
 800064c:	637b      	str	r3, [r7, #52]	@ 0x34
 800064e:	4603      	mov	r3, r0
 8000650:	80fb      	strh	r3, [r7, #6]
 8000652:	460b      	mov	r3, r1
 8000654:	80bb      	strh	r3, [r7, #4]
 8000656:	4613      	mov	r3, r2
 8000658:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	b2d8      	uxtb	r0, r3
 800065e:	88bb      	ldrh	r3, [r7, #4]
 8000660:	b2d9      	uxtb	r1, r3
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	b2da      	uxtb	r2, r3
 8000666:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800066a:	4413      	add	r3, r2
 800066c:	b2db      	uxtb	r3, r3
 800066e:	3b01      	subs	r3, #1
 8000670:	b2dc      	uxtb	r4, r3
 8000672:	88bb      	ldrh	r3, [r7, #4]
 8000674:	b2da      	uxtb	r2, r3
 8000676:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800067a:	4413      	add	r3, r2
 800067c:	b2db      	uxtb	r3, r3
 800067e:	3b01      	subs	r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	4622      	mov	r2, r4
 8000684:	f7ff feac 	bl	80003e0 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
 800068c:	e043      	b.n	8000716 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800068e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	3b20      	subs	r3, #32
 8000694:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000698:	fb01 f303 	mul.w	r3, r1, r3
 800069c:	4619      	mov	r1, r3
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	440b      	add	r3, r1
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
 80006ae:	e029      	b.n	8000704 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	69bb      	ldr	r3, [r7, #24]
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d00e      	beq.n	80006de <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80006c0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80006c2:	0a1b      	lsrs	r3, r3, #8
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	743b      	strb	r3, [r7, #16]
 80006ca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	2102      	movs	r1, #2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fe1e 	bl	8000318 <ST7735_WriteData>
 80006dc:	e00f      	b.n	80006fe <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80006de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80006e2:	0a1b      	lsrs	r3, r3, #8
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	733b      	strb	r3, [r7, #12]
 80006ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2102      	movs	r1, #2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fe0d 	bl	8000318 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	3301      	adds	r3, #1
 8000702:	61bb      	str	r3, [r7, #24]
 8000704:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000708:	461a      	mov	r2, r3
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	4293      	cmp	r3, r2
 800070e:	d3cf      	bcc.n	80006b0 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	3301      	adds	r3, #1
 8000714:	61fb      	str	r3, [r7, #28]
 8000716:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800071a:	461a      	mov	r2, r3
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	4293      	cmp	r3, r2
 8000720:	d3b5      	bcc.n	800068e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000722:	bf00      	nop
 8000724:	bf00      	nop
 8000726:	3724      	adds	r7, #36	@ 0x24
 8000728:	46bd      	mov	sp, r7
 800072a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800072e:	b002      	add	sp, #8
 8000730:	4770      	bx	lr
	...

08000734 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000734:	b082      	sub	sp, #8
 8000736:	b580      	push	{r7, lr}
 8000738:	b086      	sub	sp, #24
 800073a:	af04      	add	r7, sp, #16
 800073c:	603a      	str	r2, [r7, #0]
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	4603      	mov	r3, r0
 8000742:	80fb      	strh	r3, [r7, #6]
 8000744:	460b      	mov	r3, r1
 8000746:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000748:	f7ff fd9c 	bl	8000284 <ST7735_Select>

    while(*str) {
 800074c:	e033      	b.n	80007b6 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	7d3a      	ldrb	r2, [r7, #20]
 8000752:	4413      	add	r3, r2
 8000754:	4a1f      	ldr	r2, [pc, #124]	@ (80007d4 <ST7735_WriteString+0xa0>)
 8000756:	f9b2 2000 	ldrsh.w	r2, [r2]
 800075a:	4293      	cmp	r3, r2
 800075c:	db16      	blt.n	800078c <ST7735_WriteString+0x58>
            x = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000762:	7d7b      	ldrb	r3, [r7, #21]
 8000764:	461a      	mov	r2, r3
 8000766:	88bb      	ldrh	r3, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 800076c:	88bb      	ldrh	r3, [r7, #4]
 800076e:	7d7a      	ldrb	r2, [r7, #21]
 8000770:	4413      	add	r3, r2
 8000772:	4a19      	ldr	r2, [pc, #100]	@ (80007d8 <ST7735_WriteString+0xa4>)
 8000774:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000778:	4293      	cmp	r3, r2
 800077a:	da21      	bge.n	80007c0 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b20      	cmp	r3, #32
 8000782:	d103      	bne.n	800078c <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	3301      	adds	r3, #1
 8000788:	603b      	str	r3, [r7, #0]
                continue;
 800078a:	e014      	b.n	80007b6 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	781a      	ldrb	r2, [r3, #0]
 8000790:	88b9      	ldrh	r1, [r7, #4]
 8000792:	88f8      	ldrh	r0, [r7, #6]
 8000794:	8c3b      	ldrh	r3, [r7, #32]
 8000796:	9302      	str	r3, [sp, #8]
 8000798:	8bbb      	ldrh	r3, [r7, #28]
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	f7ff ff4f 	bl	8000644 <ST7735_WriteChar>
        x += font.width;
 80007a6:	7d3b      	ldrb	r3, [r7, #20]
 80007a8:	461a      	mov	r2, r3
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	4413      	add	r3, r2
 80007ae:	80fb      	strh	r3, [r7, #6]
        str++;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	3301      	adds	r3, #1
 80007b4:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1c7      	bne.n	800074e <ST7735_WriteString+0x1a>
 80007be:	e000      	b.n	80007c2 <ST7735_WriteString+0x8e>
                break;
 80007c0:	bf00      	nop
    }

    ST7735_Unselect();
 80007c2:	f7ff fd6b 	bl	800029c <ST7735_Unselect>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007d0:	b002      	add	sp, #8
 80007d2:	4770      	bx	lr
 80007d4:	20000030 	.word	0x20000030
 80007d8:	20000032 	.word	0x20000032

080007dc <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4604      	mov	r4, r0
 80007e4:	4608      	mov	r0, r1
 80007e6:	4611      	mov	r1, r2
 80007e8:	461a      	mov	r2, r3
 80007ea:	4623      	mov	r3, r4
 80007ec:	80fb      	strh	r3, [r7, #6]
 80007ee:	4603      	mov	r3, r0
 80007f0:	80bb      	strh	r3, [r7, #4]
 80007f2:	460b      	mov	r3, r1
 80007f4:	807b      	strh	r3, [r7, #2]
 80007f6:	4613      	mov	r3, r2
 80007f8:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 80007fa:	88fb      	ldrh	r3, [r7, #6]
 80007fc:	4a37      	ldr	r2, [pc, #220]	@ (80008dc <ST7735_FillRectangle+0x100>)
 80007fe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000802:	4293      	cmp	r3, r2
 8000804:	da66      	bge.n	80008d4 <ST7735_FillRectangle+0xf8>
 8000806:	88bb      	ldrh	r3, [r7, #4]
 8000808:	4a35      	ldr	r2, [pc, #212]	@ (80008e0 <ST7735_FillRectangle+0x104>)
 800080a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800080e:	4293      	cmp	r3, r2
 8000810:	da60      	bge.n	80008d4 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8000812:	88fa      	ldrh	r2, [r7, #6]
 8000814:	887b      	ldrh	r3, [r7, #2]
 8000816:	4413      	add	r3, r2
 8000818:	4a30      	ldr	r2, [pc, #192]	@ (80008dc <ST7735_FillRectangle+0x100>)
 800081a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800081e:	4293      	cmp	r3, r2
 8000820:	dd06      	ble.n	8000830 <ST7735_FillRectangle+0x54>
 8000822:	4b2e      	ldr	r3, [pc, #184]	@ (80008dc <ST7735_FillRectangle+0x100>)
 8000824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000828:	b29a      	uxth	r2, r3
 800082a:	88fb      	ldrh	r3, [r7, #6]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000830:	88ba      	ldrh	r2, [r7, #4]
 8000832:	883b      	ldrh	r3, [r7, #0]
 8000834:	4413      	add	r3, r2
 8000836:	4a2a      	ldr	r2, [pc, #168]	@ (80008e0 <ST7735_FillRectangle+0x104>)
 8000838:	f9b2 2000 	ldrsh.w	r2, [r2]
 800083c:	4293      	cmp	r3, r2
 800083e:	dd06      	ble.n	800084e <ST7735_FillRectangle+0x72>
 8000840:	4b27      	ldr	r3, [pc, #156]	@ (80008e0 <ST7735_FillRectangle+0x104>)
 8000842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000846:	b29a      	uxth	r2, r3
 8000848:	88bb      	ldrh	r3, [r7, #4]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800084e:	f7ff fd19 	bl	8000284 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	b2d8      	uxtb	r0, r3
 8000856:	88bb      	ldrh	r3, [r7, #4]
 8000858:	b2d9      	uxtb	r1, r3
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	b2da      	uxtb	r2, r3
 800085e:	887b      	ldrh	r3, [r7, #2]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4413      	add	r3, r2
 8000864:	b2db      	uxtb	r3, r3
 8000866:	3b01      	subs	r3, #1
 8000868:	b2dc      	uxtb	r4, r3
 800086a:	88bb      	ldrh	r3, [r7, #4]
 800086c:	b2da      	uxtb	r2, r3
 800086e:	883b      	ldrh	r3, [r7, #0]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4413      	add	r3, r2
 8000874:	b2db      	uxtb	r3, r3
 8000876:	3b01      	subs	r3, #1
 8000878:	b2db      	uxtb	r3, r3
 800087a:	4622      	mov	r2, r4
 800087c:	f7ff fdb0 	bl	80003e0 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000880:	8c3b      	ldrh	r3, [r7, #32]
 8000882:	0a1b      	lsrs	r3, r3, #8
 8000884:	b29b      	uxth	r3, r3
 8000886:	b2db      	uxtb	r3, r3
 8000888:	733b      	strb	r3, [r7, #12]
 800088a:	8c3b      	ldrh	r3, [r7, #32]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	4813      	ldr	r0, [pc, #76]	@ (80008e4 <ST7735_FillRectangle+0x108>)
 8000896:	f001 fab3 	bl	8001e00 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800089a:	883b      	ldrh	r3, [r7, #0]
 800089c:	80bb      	strh	r3, [r7, #4]
 800089e:	e013      	b.n	80008c8 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 80008a0:	887b      	ldrh	r3, [r7, #2]
 80008a2:	80fb      	strh	r3, [r7, #6]
 80008a4:	e00a      	b.n	80008bc <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80008a6:	f107 010c 	add.w	r1, r7, #12
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	2202      	movs	r2, #2
 80008b0:	480d      	ldr	r0, [pc, #52]	@ (80008e8 <ST7735_FillRectangle+0x10c>)
 80008b2:	f002 f912 	bl	8002ada <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	80fb      	strh	r3, [r7, #6]
 80008bc:	88fb      	ldrh	r3, [r7, #6]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1f1      	bne.n	80008a6 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 80008c2:	88bb      	ldrh	r3, [r7, #4]
 80008c4:	3b01      	subs	r3, #1
 80008c6:	80bb      	strh	r3, [r7, #4]
 80008c8:	88bb      	ldrh	r3, [r7, #4]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1e8      	bne.n	80008a0 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 80008ce:	f7ff fce5 	bl	800029c <ST7735_Unselect>
 80008d2:	e000      	b.n	80008d6 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 80008d4:	bf00      	nop
}
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd90      	pop	{r4, r7, pc}
 80008dc:	20000030 	.word	0x20000030
 80008e0:	20000032 	.word	0x20000032
 80008e4:	48000800 	.word	0x48000800
 80008e8:	20000054 	.word	0x20000054

080008ec <paintImage>:
    ST7735_Select();
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
    ST7735_Unselect();
}

void paintImage(const uint16_t image[160][128]) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
    for (int y = 0; y < 160; y++) {
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	e019      	b.n	800092e <paintImage+0x42>
        for (int x = 0; x < 128; x++) {
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	e010      	b.n	8000922 <paintImage+0x36>
            ST7735_DrawPixel(x, y, image[y][x]);
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	b298      	uxth	r0, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	b299      	uxth	r1, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	4413      	add	r3, r2
 8000910:	68ba      	ldr	r2, [r7, #8]
 8000912:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000916:	461a      	mov	r2, r3
 8000918:	f7ff fe56 	bl	80005c8 <ST7735_DrawPixel>
        for (int x = 0; x < 128; x++) {
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	3301      	adds	r3, #1
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	2b7f      	cmp	r3, #127	@ 0x7f
 8000926:	ddeb      	ble.n	8000900 <paintImage+0x14>
    for (int y = 0; y < 160; y++) {
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3301      	adds	r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2b9f      	cmp	r3, #159	@ 0x9f
 8000932:	dde2      	ble.n	80008fa <paintImage+0xe>
        }
    }
}
 8000934:	bf00      	nop
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <from_byte_to_gpio_status>:
GPIO_PinState data_write_wire;
GPIO_PinState addr_bus[4];
GPIO_PinState data_in_bus[8];
GPIO_PinState data_out_bus[8];

void from_byte_to_gpio_status(uint8_t byte, uint8_t* gpio_status_array, uint8_t bit_size) {
 800093e:	b480      	push	{r7}
 8000940:	b085      	sub	sp, #20
 8000942:	af00      	add	r7, sp, #0
 8000944:	4603      	mov	r3, r0
 8000946:	6039      	str	r1, [r7, #0]
 8000948:	71fb      	strb	r3, [r7, #7]
 800094a:	4613      	mov	r3, r2
 800094c:	71bb      	strb	r3, [r7, #6]
	if (gpio_status_array == NULL) return;
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d01b      	beq.n	800098c <from_byte_to_gpio_status+0x4e>
	if (bit_size > 8) bit_size = 8;
 8000954:	79bb      	ldrb	r3, [r7, #6]
 8000956:	2b08      	cmp	r3, #8
 8000958:	d901      	bls.n	800095e <from_byte_to_gpio_status+0x20>
 800095a:	2308      	movs	r3, #8
 800095c:	71bb      	strb	r3, [r7, #6]

	for (uint8_t i = 0; i < bit_size; ++i) {
 800095e:	2300      	movs	r3, #0
 8000960:	73fb      	strb	r3, [r7, #15]
 8000962:	e00e      	b.n	8000982 <from_byte_to_gpio_status+0x44>
		gpio_status_array[i] = (byte >> i) & 0x1 ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	fa42 f303 	asr.w	r3, r2, r3
 800096c:	b2da      	uxtb	r2, r3
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	6839      	ldr	r1, [r7, #0]
 8000972:	440b      	add	r3, r1
 8000974:	f002 0201 	and.w	r2, r2, #1
 8000978:	b2d2      	uxtb	r2, r2
 800097a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < bit_size; ++i) {
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	3301      	adds	r3, #1
 8000980:	73fb      	strb	r3, [r7, #15]
 8000982:	7bfa      	ldrb	r2, [r7, #15]
 8000984:	79bb      	ldrb	r3, [r7, #6]
 8000986:	429a      	cmp	r2, r3
 8000988:	d3ec      	bcc.n	8000964 <from_byte_to_gpio_status+0x26>
 800098a:	e000      	b.n	800098e <from_byte_to_gpio_status+0x50>
	if (gpio_status_array == NULL) return;
 800098c:	bf00      	nop
	}
}
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <from_gpiostatus_to_byte>:

uint8_t from_gpiostatus_to_byte(uint8_t* gpio_status_array, uint8_t bit_size) {
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	70fb      	strb	r3, [r7, #3]
	if (gpio_status_array == NULL) return 0;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d101      	bne.n	80009ae <from_gpiostatus_to_byte+0x16>
 80009aa:	2300      	movs	r3, #0
 80009ac:	e021      	b.n	80009f2 <from_gpiostatus_to_byte+0x5a>
	if (bit_size > 8) bit_size = 8;
 80009ae:	78fb      	ldrb	r3, [r7, #3]
 80009b0:	2b08      	cmp	r3, #8
 80009b2:	d901      	bls.n	80009b8 <from_gpiostatus_to_byte+0x20>
 80009b4:	2308      	movs	r3, #8
 80009b6:	70fb      	strb	r3, [r7, #3]

	uint8_t byte = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < bit_size; ++i) {
 80009bc:	2300      	movs	r3, #0
 80009be:	73bb      	strb	r3, [r7, #14]
 80009c0:	e012      	b.n	80009e8 <from_gpiostatus_to_byte+0x50>
		if (gpio_status_array[i] == GPIO_PIN_SET) {
 80009c2:	7bbb      	ldrb	r3, [r7, #14]
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	4413      	add	r3, r2
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d109      	bne.n	80009e2 <from_gpiostatus_to_byte+0x4a>
			byte |= (1 << i);
 80009ce:	7bbb      	ldrb	r3, [r7, #14]
 80009d0:	2201      	movs	r2, #1
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	b25a      	sxtb	r2, r3
 80009d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009dc:	4313      	orrs	r3, r2
 80009de:	b25b      	sxtb	r3, r3
 80009e0:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < bit_size; ++i) {
 80009e2:	7bbb      	ldrb	r3, [r7, #14]
 80009e4:	3301      	adds	r3, #1
 80009e6:	73bb      	strb	r3, [r7, #14]
 80009e8:	7bba      	ldrb	r2, [r7, #14]
 80009ea:	78fb      	ldrb	r3, [r7, #3]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d3e8      	bcc.n	80009c2 <from_gpiostatus_to_byte+0x2a>
		}
	}

	return byte;
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <writeGPIOSaddr_bus>:


void writeGPIOSaddr_bus(uint8_t* array){
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TiniQVaddr0_GPIO_Port, TiniQVaddr0_Pin, array[0]);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a14:	f001 f9f4 	bl	8001e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TiniQVaddr1_GPIO_Port, TiniQVaddr1_Pin, array[1]);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a28:	f001 f9ea 	bl	8001e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TiniQVaddr2_GPIO_Port, TiniQVaddr2_Pin, array[2]);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3302      	adds	r3, #2
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a3c:	f001 f9e0 	bl	8001e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TiniQVaddr3_GPIO_Port, TiniQVaddr3_Pin, array[3]);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3303      	adds	r3, #3
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	461a      	mov	r2, r3
 8000a48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a50:	f001 f9d6 	bl	8001e00 <HAL_GPIO_WritePin>
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <writeGPIOSdata_in_bus>:

void writeGPIOSdata_in_bus(uint8_t* array){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TiniQVdata_in0_GPIO_Port, TiniQVdata_in0_Pin, array[0]);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	2120      	movs	r1, #32
 8000a6c:	4821      	ldr	r0, [pc, #132]	@ (8000af4 <writeGPIOSdata_in_bus+0x98>)
 8000a6e:	f001 f9c7 	bl	8001e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TiniQVdata_in1_GPIO_Port, TiniQVdata_in1_Pin, array[1]);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3301      	adds	r3, #1
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	481d      	ldr	r0, [pc, #116]	@ (8000af4 <writeGPIOSdata_in_bus+0x98>)
 8000a7e:	f001 f9bf 	bl	8001e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TiniQVdata_in2_GPIO_Port, TiniQVdata_in2_Pin, array[2]);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3302      	adds	r3, #2
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	2108      	movs	r1, #8
 8000a8c:	4819      	ldr	r0, [pc, #100]	@ (8000af4 <writeGPIOSdata_in_bus+0x98>)
 8000a8e:	f001 f9b7 	bl	8001e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TiniQVdata_in3_GPIO_Port, TiniQVdata_in3_Pin, array[3]);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3303      	adds	r3, #3
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	2104      	movs	r1, #4
 8000a9c:	4816      	ldr	r0, [pc, #88]	@ (8000af8 <writeGPIOSdata_in_bus+0x9c>)
 8000a9e:	f001 f9af 	bl	8001e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TiniQVdata_in4_GPIO_Port, TiniQVdata_in4_Pin, array[0]);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aac:	4813      	ldr	r0, [pc, #76]	@ (8000afc <writeGPIOSdata_in_bus+0xa0>)
 8000aae:	f001 f9a7 	bl	8001e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TiniQVdata_in5_GPIO_Port, TiniQVdata_in5_Pin, array[1]);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000abe:	480f      	ldr	r0, [pc, #60]	@ (8000afc <writeGPIOSdata_in_bus+0xa0>)
 8000ac0:	f001 f99e 	bl	8001e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TiniQVdata_in6_GPIO_Port, TiniQVdata_in6_Pin, array[2]);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3302      	adds	r3, #2
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	461a      	mov	r2, r3
 8000acc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ad0:	480a      	ldr	r0, [pc, #40]	@ (8000afc <writeGPIOSdata_in_bus+0xa0>)
 8000ad2:	f001 f995 	bl	8001e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TiniQVdata_in7_GPIO_Port, TiniQVdata_in7_Pin, array[3]);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3303      	adds	r3, #3
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae6:	f001 f98b 	bl	8001e00 <HAL_GPIO_WritePin>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	48000400 	.word	0x48000400
 8000af8:	48000c00 	.word	0x48000c00
 8000afc:	48000800 	.word	0x48000800

08000b00 <readGPIOSdata_out_bus>:

void readGPIOSdata_out_bus(uint8_t* array){
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	array[0]=HAL_GPIO_ReadPin(TiniQVdata_out0_GPIO_Port, TiniQVdata_out0_Pin);
 8000b08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b0c:	4824      	ldr	r0, [pc, #144]	@ (8000ba0 <readGPIOSdata_out_bus+0xa0>)
 8000b0e:	f001 f95f 	bl	8001dd0 <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461a      	mov	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	701a      	strb	r2, [r3, #0]
	array[1]=HAL_GPIO_ReadPin(TiniQVdata_out1_GPIO_Port, TiniQVdata_out1_Pin);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	1c5c      	adds	r4, r3, #1
 8000b1e:	2140      	movs	r1, #64	@ 0x40
 8000b20:	481f      	ldr	r0, [pc, #124]	@ (8000ba0 <readGPIOSdata_out_bus+0xa0>)
 8000b22:	f001 f955 	bl	8001dd0 <HAL_GPIO_ReadPin>
 8000b26:	4603      	mov	r3, r0
 8000b28:	7023      	strb	r3, [r4, #0]
	array[2]=HAL_GPIO_ReadPin(TiniQVdata_out2_GPIO_Port, TiniQVdata_out2_Pin);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	1c9c      	adds	r4, r3, #2
 8000b2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b32:	481c      	ldr	r0, [pc, #112]	@ (8000ba4 <readGPIOSdata_out_bus+0xa4>)
 8000b34:	f001 f94c 	bl	8001dd0 <HAL_GPIO_ReadPin>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	7023      	strb	r3, [r4, #0]
	array[3]=HAL_GPIO_ReadPin(TiniQVdata_out3_GPIO_Port, TiniQVdata_out3_Pin);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	1cdc      	adds	r4, r3, #3
 8000b40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b44:	4817      	ldr	r0, [pc, #92]	@ (8000ba4 <readGPIOSdata_out_bus+0xa4>)
 8000b46:	f001 f943 	bl	8001dd0 <HAL_GPIO_ReadPin>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	7023      	strb	r3, [r4, #0]
	array[4]=HAL_GPIO_ReadPin(TiniQVdata_out4_GPIO_Port, TiniQVdata_out4_Pin);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	1d1c      	adds	r4, r3, #4
 8000b52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b56:	4813      	ldr	r0, [pc, #76]	@ (8000ba4 <readGPIOSdata_out_bus+0xa4>)
 8000b58:	f001 f93a 	bl	8001dd0 <HAL_GPIO_ReadPin>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	7023      	strb	r3, [r4, #0]
	array[5]=HAL_GPIO_ReadPin(TiniQVdata_out5_GPIO_Port, TiniQVdata_out5_Pin);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	1d5c      	adds	r4, r3, #5
 8000b64:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b68:	480e      	ldr	r0, [pc, #56]	@ (8000ba4 <readGPIOSdata_out_bus+0xa4>)
 8000b6a:	f001 f931 	bl	8001dd0 <HAL_GPIO_ReadPin>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	7023      	strb	r3, [r4, #0]
	array[6]=HAL_GPIO_ReadPin(TiniQVdata_out6_GPIO_Port, TiniQVdata_out6_Pin);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	1d9c      	adds	r4, r3, #6
 8000b76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b7a:	480a      	ldr	r0, [pc, #40]	@ (8000ba4 <readGPIOSdata_out_bus+0xa4>)
 8000b7c:	f001 f928 	bl	8001dd0 <HAL_GPIO_ReadPin>
 8000b80:	4603      	mov	r3, r0
 8000b82:	7023      	strb	r3, [r4, #0]
	array[7]=HAL_GPIO_ReadPin(TiniQVdata_out7_GPIO_Port, TiniQVdata_out7_Pin);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	1ddc      	adds	r4, r3, #7
 8000b88:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b8c:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <readGPIOSdata_out_bus+0xa4>)
 8000b8e:	f001 f91f 	bl	8001dd0 <HAL_GPIO_ReadPin>
 8000b92:	4603      	mov	r3, r0
 8000b94:	7023      	strb	r3, [r4, #0]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd90      	pop	{r4, r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	48000800 	.word	0x48000800
 8000ba4:	48000400 	.word	0x48000400

08000ba8 <writeRegisterToPheripheral>:


void writeRegisterToPheripheral(uint8_t addr, uint8_t data){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	460a      	mov	r2, r1
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	71bb      	strb	r3, [r7, #6]
	from_byte_to_gpio_status(addr,addr_bus,4);
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	2204      	movs	r2, #4
 8000bbc:	4911      	ldr	r1, [pc, #68]	@ (8000c04 <writeRegisterToPheripheral+0x5c>)
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff febd 	bl	800093e <from_byte_to_gpio_status>
	from_byte_to_gpio_status(addr,data_in_bus ,8);
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2208      	movs	r2, #8
 8000bc8:	490f      	ldr	r1, [pc, #60]	@ (8000c08 <writeRegisterToPheripheral+0x60>)
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff feb7 	bl	800093e <from_byte_to_gpio_status>
	writeGPIOSaddr_bus(addr_bus);
 8000bd0:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <writeRegisterToPheripheral+0x5c>)
 8000bd2:	f7ff ff14 	bl	80009fe <writeGPIOSaddr_bus>
	writeGPIOSdata_in_bus(data_in_bus);
 8000bd6:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <writeRegisterToPheripheral+0x60>)
 8000bd8:	f7ff ff40 	bl	8000a5c <writeGPIOSdata_in_bus>
	HAL_GPIO_WritePin(TiniQVdata_write_GPIO_Port, TiniQVdata_write_Pin, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000be2:	480a      	ldr	r0, [pc, #40]	@ (8000c0c <writeRegisterToPheripheral+0x64>)
 8000be4:	f001 f90c 	bl	8001e00 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000be8:	2001      	movs	r0, #1
 8000bea:	f000 fc83 	bl	80014f4 <HAL_Delay>
	HAL_GPIO_WritePin(TiniQVdata_write_GPIO_Port, TiniQVdata_write_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bf4:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <writeRegisterToPheripheral+0x64>)
 8000bf6:	f001 f903 	bl	8001e00 <HAL_GPIO_WritePin>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	2000003c 	.word	0x2000003c
 8000c08:	20000040 	.word	0x20000040
 8000c0c:	48000800 	.word	0x48000800

08000c10 <readRegisterFromPheripheral>:

uint8_t readRegisterFromPheripheral(uint8_t addr){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
	from_byte_to_gpio_status(addr,addr_bus,4);
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	490b      	ldr	r1, [pc, #44]	@ (8000c4c <readRegisterFromPheripheral+0x3c>)
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fe8c 	bl	800093e <from_byte_to_gpio_status>
	writeGPIOSaddr_bus(addr_bus);
 8000c26:	4809      	ldr	r0, [pc, #36]	@ (8000c4c <readRegisterFromPheripheral+0x3c>)
 8000c28:	f7ff fee9 	bl	80009fe <writeGPIOSaddr_bus>
	HAL_Delay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f000 fc61 	bl	80014f4 <HAL_Delay>
	readGPIOSdata_out_bus(data_out_bus);
 8000c32:	4807      	ldr	r0, [pc, #28]	@ (8000c50 <readRegisterFromPheripheral+0x40>)
 8000c34:	f7ff ff64 	bl	8000b00 <readGPIOSdata_out_bus>
	return from_gpiostatus_to_byte(data_out_bus, 8);
 8000c38:	2108      	movs	r1, #8
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <readRegisterFromPheripheral+0x40>)
 8000c3c:	f7ff feac 	bl	8000998 <from_gpiostatus_to_byte>
 8000c40:	4603      	mov	r3, r0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000003c 	.word	0x2000003c
 8000c50:	20000048 	.word	0x20000048

08000c54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <MX_DMA_Init+0x50>)
 8000c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c5e:	4a11      	ldr	r2, [pc, #68]	@ (8000ca4 <MX_DMA_Init+0x50>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <MX_DMA_Init+0x50>)
 8000c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <MX_DMA_Init+0x50>)
 8000c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c76:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca4 <MX_DMA_Init+0x50>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <MX_DMA_Init+0x50>)
 8000c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	200b      	movs	r0, #11
 8000c90:	f000 fd2d 	bl	80016ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c94:	200b      	movs	r0, #11
 8000c96:	f000 fd44 	bl	8001722 <HAL_NVIC_EnableIRQ>

}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	@ 0x28
 8000cac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cbe:	4b56      	ldr	r3, [pc, #344]	@ (8000e18 <MX_GPIO_Init+0x170>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc2:	4a55      	ldr	r2, [pc, #340]	@ (8000e18 <MX_GPIO_Init+0x170>)
 8000cc4:	f043 0320 	orr.w	r3, r3, #32
 8000cc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cca:	4b53      	ldr	r3, [pc, #332]	@ (8000e18 <MX_GPIO_Init+0x170>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cce:	f003 0320 	and.w	r3, r3, #32
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b50      	ldr	r3, [pc, #320]	@ (8000e18 <MX_GPIO_Init+0x170>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	4a4f      	ldr	r2, [pc, #316]	@ (8000e18 <MX_GPIO_Init+0x170>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce2:	4b4d      	ldr	r3, [pc, #308]	@ (8000e18 <MX_GPIO_Init+0x170>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b4a      	ldr	r3, [pc, #296]	@ (8000e18 <MX_GPIO_Init+0x170>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf2:	4a49      	ldr	r2, [pc, #292]	@ (8000e18 <MX_GPIO_Init+0x170>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cfa:	4b47      	ldr	r3, [pc, #284]	@ (8000e18 <MX_GPIO_Init+0x170>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d06:	4b44      	ldr	r3, [pc, #272]	@ (8000e18 <MX_GPIO_Init+0x170>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0a:	4a43      	ldr	r2, [pc, #268]	@ (8000e18 <MX_GPIO_Init+0x170>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d12:	4b41      	ldr	r3, [pc, #260]	@ (8000e18 <MX_GPIO_Init+0x170>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e18 <MX_GPIO_Init+0x170>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d22:	4a3d      	ldr	r2, [pc, #244]	@ (8000e18 <MX_GPIO_Init+0x170>)
 8000d24:	f043 0308 	orr.w	r3, r3, #8
 8000d28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d2a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e18 <MX_GPIO_Init+0x170>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DC_Pin|TiniQVdata_write_Pin|TiniQVdata_in6_Pin|TiniQVdata_in5_Pin
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 51f4 	mov.w	r1, #7808	@ 0x1e80
 8000d3c:	4837      	ldr	r0, [pc, #220]	@ (8000e1c <MX_GPIO_Init+0x174>)
 8000d3e:	f001 f85f 	bl	8001e00 <HAL_GPIO_WritePin>
                          |TiniQVdata_in4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TiniQVaddr3_Pin|RST_Pin|TiniQVaddr2_Pin|TiniQVaddr1_Pin
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 411f 	mov.w	r1, #40704	@ 0x9f00
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4c:	f001 f858 	bl	8001e00 <HAL_GPIO_WritePin>
                          |TiniQVaddr0_Pin|TiniQVdata_in7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TiniQVdata_in3_GPIO_Port, TiniQVdata_in3_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2104      	movs	r1, #4
 8000d54:	4832      	ldr	r0, [pc, #200]	@ (8000e20 <MX_GPIO_Init+0x178>)
 8000d56:	f001 f853 	bl	8001e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TiniQVdata_in2_Pin|TiniQVdata_in1_Pin|TiniQVdata_in0_Pin|CS_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2178      	movs	r1, #120	@ 0x78
 8000d5e:	4831      	ldr	r0, [pc, #196]	@ (8000e24 <MX_GPIO_Init+0x17c>)
 8000d60:	f001 f84e 	bl	8001e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TiniQVdata_out7_Pin TiniQVdata_out6_Pin TiniQVdata_out5_Pin TiniQVdata_out4_Pin
                           TiniQVdata_out3_Pin TiniQVdata_out2_Pin */
  GPIO_InitStruct.Pin = TiniQVdata_out7_Pin|TiniQVdata_out6_Pin|TiniQVdata_out5_Pin|TiniQVdata_out4_Pin
 8000d64:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000d68:	617b      	str	r3, [r7, #20]
                          |TiniQVdata_out3_Pin|TiniQVdata_out2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	482a      	ldr	r0, [pc, #168]	@ (8000e24 <MX_GPIO_Init+0x17c>)
 8000d7a:	f000 fea7 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pins : TiniQVdata_out1_Pin TiniQVdata_out0_Pin */
  GPIO_InitStruct.Pin = TiniQVdata_out1_Pin|TiniQVdata_out0_Pin;
 8000d7e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	4822      	ldr	r0, [pc, #136]	@ (8000e1c <MX_GPIO_Init+0x174>)
 8000d94:	f000 fe9a 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_Pin TiniQVdata_write_Pin TiniQVdata_in6_Pin TiniQVdata_in5_Pin
                           TiniQVdata_in4_Pin */
  GPIO_InitStruct.Pin = DC_Pin|TiniQVdata_write_Pin|TiniQVdata_in6_Pin|TiniQVdata_in5_Pin
 8000d98:	f44f 53f4 	mov.w	r3, #7808	@ 0x1e80
 8000d9c:	617b      	str	r3, [r7, #20]
                          |TiniQVdata_in4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	481a      	ldr	r0, [pc, #104]	@ (8000e1c <MX_GPIO_Init+0x174>)
 8000db2:	f000 fe8b 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pins : TiniQVaddr3_Pin RST_Pin TiniQVaddr2_Pin TiniQVaddr1_Pin
                           TiniQVaddr0_Pin TiniQVdata_in7_Pin */
  GPIO_InitStruct.Pin = TiniQVaddr3_Pin|RST_Pin|TiniQVaddr2_Pin|TiniQVaddr1_Pin
 8000db6:	f44f 431f 	mov.w	r3, #40704	@ 0x9f00
 8000dba:	617b      	str	r3, [r7, #20]
                          |TiniQVaddr0_Pin|TiniQVdata_in7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd2:	f000 fe7b 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pin : TiniQVdata_in3_Pin */
  GPIO_InitStruct.Pin = TiniQVdata_in3_Pin;
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TiniQVdata_in3_GPIO_Port, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	480c      	ldr	r0, [pc, #48]	@ (8000e20 <MX_GPIO_Init+0x178>)
 8000dee:	f000 fe6d 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pins : TiniQVdata_in2_Pin TiniQVdata_in1_Pin TiniQVdata_in0_Pin CS_Pin */
  GPIO_InitStruct.Pin = TiniQVdata_in2_Pin|TiniQVdata_in1_Pin|TiniQVdata_in0_Pin|CS_Pin;
 8000df2:	2378      	movs	r3, #120	@ 0x78
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4806      	ldr	r0, [pc, #24]	@ (8000e24 <MX_GPIO_Init+0x17c>)
 8000e0a:	f000 fe5f 	bl	8001acc <HAL_GPIO_Init>

}
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	@ 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	48000800 	.word	0x48000800
 8000e20:	48000c00 	.word	0x48000c00
 8000e24:	48000400 	.word	0x48000400

08000e28 <frombytestocolor565>:

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
uint16_t frombytestocolor565(uint8_t r, uint8_t g, uint8_t b) {
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
 8000e32:	460b      	mov	r3, r1
 8000e34:	71bb      	strb	r3, [r7, #6]
 8000e36:	4613      	mov	r3, r2
 8000e38:	717b      	strb	r3, [r7, #5]
    return ((r & 0xF8) << 8) |    // Top 5 bits of red
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000e44:	f023 0307 	bic.w	r3, r3, #7
 8000e48:	b21a      	sxth	r2, r3
           ((g & 0xFC) << 3) |    // Top 6 bits of green
 8000e4a:	79bb      	ldrb	r3, [r7, #6]
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8000e54:	b21b      	sxth	r3, r3
    return ((r & 0xF8) << 8) |    // Top 5 bits of red
 8000e56:	4313      	orrs	r3, r2
 8000e58:	b21a      	sxth	r2, r3
           ((b & 0xF8) >> 3);     // Top 5 bits of blue
 8000e5a:	797b      	ldrb	r3, [r7, #5]
 8000e5c:	08db      	lsrs	r3, r3, #3
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	b21b      	sxth	r3, r3
           ((g & 0xFC) << 3) |    // Top 6 bits of green
 8000e62:	4313      	orrs	r3, r2
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	b29b      	uxth	r3, r3
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7a:	f000 faca 	bl	8001412 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7e:	f000 f869 	bl	8000f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e82:	f7ff ff11 	bl	8000ca8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e86:	f7ff fee5 	bl	8000c54 <MX_DMA_Init>
  MX_SPI1_Init();
 8000e8a:	f000 f8b5 	bl	8000ff8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000e8e:	f000 f9a3 	bl	80011d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init(0);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff faec 	bl	8000470 <ST7735_Init>
  paintImage(image);
 8000e98:	4828      	ldr	r0, [pc, #160]	@ (8000f3c <main+0xc8>)
 8000e9a:	f7ff fd27 	bl	80008ec <paintImage>
  HAL_Delay(2000);
 8000e9e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ea2:	f000 fb27 	bl	80014f4 <HAL_Delay>
  fillScreen(BLACK);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f7ff f9d2 	bl	8000250 <fillScreen>
  ST7735_WriteString(0, 0, " I AM A LED :)", Font_16x26, WHITE, BLACK);
 8000eac:	4b24      	ldr	r3, [pc, #144]	@ (8000f40 <main+0xcc>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	9202      	str	r2, [sp, #8]
 8000eb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eb6:	9201      	str	r2, [sp, #4]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	9200      	str	r2, [sp, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a21      	ldr	r2, [pc, #132]	@ (8000f44 <main+0xd0>)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff fc36 	bl	8000734 <ST7735_WriteString>
  ST7735_FillRectangle((128/2)-25, (160/2)-25, 50, 50, WHITE);
 8000ec8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2332      	movs	r3, #50	@ 0x32
 8000ed0:	2232      	movs	r2, #50	@ 0x32
 8000ed2:	2137      	movs	r1, #55	@ 0x37
 8000ed4:	2027      	movs	r0, #39	@ 0x27
 8000ed6:	f7ff fc81 	bl	80007dc <ST7735_FillRectangle>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(readRegisterFromPheripheral(REG_RGB_READY)==RGB_READY){
 8000eda:	200f      	movs	r0, #15
 8000edc:	f7ff fe98 	bl	8000c10 <readRegisterFromPheripheral>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2bff      	cmp	r3, #255	@ 0xff
 8000ee4:	d1f9      	bne.n	8000eda <main+0x66>
		red		=readRegisterFromPheripheral(REG_R);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f7ff fe92 	bl	8000c10 <readRegisterFromPheripheral>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <main+0xd4>)
 8000ef2:	701a      	strb	r2, [r3, #0]
		green	=readRegisterFromPheripheral(REG_G);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f7ff fe8b 	bl	8000c10 <readRegisterFromPheripheral>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <main+0xd8>)
 8000f00:	701a      	strb	r2, [r3, #0]
		blue	=readRegisterFromPheripheral(REG_B);
 8000f02:	2002      	movs	r0, #2
 8000f04:	f7ff fe84 	bl	8000c10 <readRegisterFromPheripheral>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4b10      	ldr	r3, [pc, #64]	@ (8000f50 <main+0xdc>)
 8000f0e:	701a      	strb	r2, [r3, #0]
		writeRegisterToPheripheral(REG_RGB_CLEAR, RGB_CLEAR_CMD);
 8000f10:	2100      	movs	r1, #0
 8000f12:	200e      	movs	r0, #14
 8000f14:	f7ff fe48 	bl	8000ba8 <writeRegisterToPheripheral>
		ST7735_FillRectangle((128/2)-20, (160/2)-20, 40, 40, frombytestocolor565(red, green, blue));
 8000f18:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <main+0xd4>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f4c <main+0xd8>)
 8000f1e:	7811      	ldrb	r1, [r2, #0]
 8000f20:	4a0b      	ldr	r2, [pc, #44]	@ (8000f50 <main+0xdc>)
 8000f22:	7812      	ldrb	r2, [r2, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff7f 	bl	8000e28 <frombytestocolor565>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2328      	movs	r3, #40	@ 0x28
 8000f30:	2228      	movs	r2, #40	@ 0x28
 8000f32:	213c      	movs	r1, #60	@ 0x3c
 8000f34:	202c      	movs	r0, #44	@ 0x2c
 8000f36:	f7ff fc51 	bl	80007dc <ST7735_FillRectangle>
	if(readRegisterFromPheripheral(REG_RGB_READY)==RGB_READY){
 8000f3a:	e7ce      	b.n	8000eda <main+0x66>
 8000f3c:	080054b4 	.word	0x080054b4
 8000f40:	20000000 	.word	0x20000000
 8000f44:	080040e4 	.word	0x080040e4
 8000f48:	20000050 	.word	0x20000050
 8000f4c:	20000051 	.word	0x20000051
 8000f50:	20000052 	.word	0x20000052

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b094      	sub	sp, #80	@ 0x50
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 0318 	add.w	r3, r7, #24
 8000f5e:	2238      	movs	r2, #56	@ 0x38
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f003 f886 	bl	8004074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 ff5a 	bl	8001e30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f86:	2340      	movs	r3, #64	@ 0x40
 8000f88:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f92:	2304      	movs	r3, #4
 8000f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f96:	2355      	movs	r3, #85	@ 0x55
 8000f98:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa6:	f107 0318 	add.w	r3, r7, #24
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fff4 	bl	8001f98 <HAL_RCC_OscConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fb6:	f000 f818 	bl	8000fea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fba:	230f      	movs	r3, #15
 8000fbc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 faf2 	bl	80025bc <HAL_RCC_ClockConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000fde:	f000 f804 	bl	8000fea <Error_Handler>
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	3750      	adds	r7, #80	@ 0x50
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fee:	b672      	cpsid	i
}
 8000ff0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff2:	bf00      	nop
 8000ff4:	e7fd      	b.n	8000ff2 <Error_Handler+0x8>
	...

08000ff8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800106c <MX_SPI1_Init+0x74>)
 8000ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8001070 <MX_SPI1_Init+0x78>)
 8001000:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001002:	4b1a      	ldr	r3, [pc, #104]	@ (800106c <MX_SPI1_Init+0x74>)
 8001004:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001008:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800100a:	4b18      	ldr	r3, [pc, #96]	@ (800106c <MX_SPI1_Init+0x74>)
 800100c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001010:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001012:	4b16      	ldr	r3, [pc, #88]	@ (800106c <MX_SPI1_Init+0x74>)
 8001014:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001018:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800101a:	4b14      	ldr	r3, [pc, #80]	@ (800106c <MX_SPI1_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001020:	4b12      	ldr	r3, [pc, #72]	@ (800106c <MX_SPI1_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001026:	4b11      	ldr	r3, [pc, #68]	@ (800106c <MX_SPI1_Init+0x74>)
 8001028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800102c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800102e:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <MX_SPI1_Init+0x74>)
 8001030:	2210      	movs	r2, #16
 8001032:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001034:	4b0d      	ldr	r3, [pc, #52]	@ (800106c <MX_SPI1_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800103a:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <MX_SPI1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001040:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <MX_SPI1_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <MX_SPI1_Init+0x74>)
 8001048:	2207      	movs	r2, #7
 800104a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800104c:	4b07      	ldr	r3, [pc, #28]	@ (800106c <MX_SPI1_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <MX_SPI1_Init+0x74>)
 8001054:	2208      	movs	r2, #8
 8001056:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001058:	4804      	ldr	r0, [pc, #16]	@ (800106c <MX_SPI1_Init+0x74>)
 800105a:	f001 fc93 	bl	8002984 <HAL_SPI_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001064:	f7ff ffc1 	bl	8000fea <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000054 	.word	0x20000054
 8001070:	40013000 	.word	0x40013000

08001074 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	@ 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a17      	ldr	r2, [pc, #92]	@ (80010f0 <HAL_SPI_MspInit+0x7c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d128      	bne.n	80010e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001096:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <HAL_SPI_MspInit+0x80>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800109a:	4a16      	ldr	r2, [pc, #88]	@ (80010f4 <HAL_SPI_MspInit+0x80>)
 800109c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010a2:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <HAL_SPI_MspInit+0x80>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <HAL_SPI_MspInit+0x80>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	4a10      	ldr	r2, [pc, #64]	@ (80010f4 <HAL_SPI_MspInit+0x80>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <HAL_SPI_MspInit+0x80>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010c6:	23a0      	movs	r3, #160	@ 0xa0
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010d6:	2305      	movs	r3, #5
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e4:	f000 fcf2 	bl	8001acc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	@ 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40013000 	.word	0x40013000
 80010f4:	40021000 	.word	0x40021000

080010f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <HAL_MspInit+0x44>)
 8001100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001102:	4a0e      	ldr	r2, [pc, #56]	@ (800113c <HAL_MspInit+0x44>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6613      	str	r3, [r2, #96]	@ 0x60
 800110a:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <HAL_MspInit+0x44>)
 800110c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <HAL_MspInit+0x44>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111a:	4a08      	ldr	r2, [pc, #32]	@ (800113c <HAL_MspInit+0x44>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001120:	6593      	str	r3, [r2, #88]	@ 0x58
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_MspInit+0x44>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800112e:	f000 ff23 	bl	8001f78 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000

08001140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <NMI_Handler+0x4>

08001148 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <HardFault_Handler+0x4>

08001150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <MemManage_Handler+0x4>

08001158 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <BusFault_Handler+0x4>

08001160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <UsageFault_Handler+0x4>

08001168 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001196:	f000 f98f 	bl	80014b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <DMA1_Channel1_IRQHandler+0x10>)
 80011a6:	f000 fb7f 	bl	80018a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000104 	.word	0x20000104

080011b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <SystemInit+0x20>)
 80011ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011be:	4a05      	ldr	r2, [pc, #20]	@ (80011d4 <SystemInit+0x20>)
 80011c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08e      	sub	sp, #56	@ 0x38
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f8:	463b      	mov	r3, r7
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
 8001206:	615a      	str	r2, [r3, #20]
 8001208:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800120a:	4b2d      	ldr	r3, [pc, #180]	@ (80012c0 <MX_TIM2_Init+0xe8>)
 800120c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001210:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001212:	4b2b      	ldr	r3, [pc, #172]	@ (80012c0 <MX_TIM2_Init+0xe8>)
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	4b29      	ldr	r3, [pc, #164]	@ (80012c0 <MX_TIM2_Init+0xe8>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 213;
 800121e:	4b28      	ldr	r3, [pc, #160]	@ (80012c0 <MX_TIM2_Init+0xe8>)
 8001220:	22d5      	movs	r2, #213	@ 0xd5
 8001222:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001224:	4b26      	ldr	r3, [pc, #152]	@ (80012c0 <MX_TIM2_Init+0xe8>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122a:	4b25      	ldr	r3, [pc, #148]	@ (80012c0 <MX_TIM2_Init+0xe8>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001230:	4823      	ldr	r0, [pc, #140]	@ (80012c0 <MX_TIM2_Init+0xe8>)
 8001232:	f001 ff2d 	bl	8003090 <HAL_TIM_Base_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800123c:	f7ff fed5 	bl	8000fea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001240:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001244:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001246:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800124a:	4619      	mov	r1, r3
 800124c:	481c      	ldr	r0, [pc, #112]	@ (80012c0 <MX_TIM2_Init+0xe8>)
 800124e:	f002 f8eb 	bl	8003428 <HAL_TIM_ConfigClockSource>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001258:	f7ff fec7 	bl	8000fea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800125c:	4818      	ldr	r0, [pc, #96]	@ (80012c0 <MX_TIM2_Init+0xe8>)
 800125e:	f001 ff6e 	bl	800313e <HAL_TIM_PWM_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001268:	f7ff febf 	bl	8000fea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4619      	mov	r1, r3
 800127a:	4811      	ldr	r0, [pc, #68]	@ (80012c0 <MX_TIM2_Init+0xe8>)
 800127c:	f002 fe64 	bl	8003f48 <HAL_TIMEx_MasterConfigSynchronization>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001286:	f7ff feb0 	bl	8000fea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800128a:	2360      	movs	r3, #96	@ 0x60
 800128c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800129a:	463b      	mov	r3, r7
 800129c:	2200      	movs	r2, #0
 800129e:	4619      	mov	r1, r3
 80012a0:	4807      	ldr	r0, [pc, #28]	@ (80012c0 <MX_TIM2_Init+0xe8>)
 80012a2:	f001 ffad 	bl	8003200 <HAL_TIM_PWM_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80012ac:	f7ff fe9d 	bl	8000fea <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012b0:	4803      	ldr	r0, [pc, #12]	@ (80012c0 <MX_TIM2_Init+0xe8>)
 80012b2:	f000 f851 	bl	8001358 <HAL_TIM_MspPostInit>

}
 80012b6:	bf00      	nop
 80012b8:	3738      	adds	r7, #56	@ 0x38
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200000b8 	.word	0x200000b8

080012c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012d4:	d135      	bne.n	8001342 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012d6:	4b1d      	ldr	r3, [pc, #116]	@ (800134c <HAL_TIM_Base_MspInit+0x88>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012da:	4a1c      	ldr	r2, [pc, #112]	@ (800134c <HAL_TIM_Base_MspInit+0x88>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012e2:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <HAL_TIM_Base_MspInit+0x88>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 80012ee:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <HAL_TIM_Base_MspInit+0x8c>)
 80012f0:	4a18      	ldr	r2, [pc, #96]	@ (8001354 <HAL_TIM_Base_MspInit+0x90>)
 80012f2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 80012f4:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <HAL_TIM_Base_MspInit+0x8c>)
 80012f6:	2238      	movs	r2, #56	@ 0x38
 80012f8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <HAL_TIM_Base_MspInit+0x8c>)
 80012fc:	2210      	movs	r2, #16
 80012fe:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001300:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <HAL_TIM_Base_MspInit+0x8c>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001306:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <HAL_TIM_Base_MspInit+0x8c>)
 8001308:	2280      	movs	r2, #128	@ 0x80
 800130a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800130c:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <HAL_TIM_Base_MspInit+0x8c>)
 800130e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001312:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001314:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <HAL_TIM_Base_MspInit+0x8c>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800131a:	4b0d      	ldr	r3, [pc, #52]	@ (8001350 <HAL_TIM_Base_MspInit+0x8c>)
 800131c:	2200      	movs	r2, #0
 800131e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001320:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <HAL_TIM_Base_MspInit+0x8c>)
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001326:	480a      	ldr	r0, [pc, #40]	@ (8001350 <HAL_TIM_Base_MspInit+0x8c>)
 8001328:	f000 fa16 	bl	8001758 <HAL_DMA_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8001332:	f7ff fe5a 	bl	8000fea <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a05      	ldr	r2, [pc, #20]	@ (8001350 <HAL_TIM_Base_MspInit+0x8c>)
 800133a:	625a      	str	r2, [r3, #36]	@ 0x24
 800133c:	4a04      	ldr	r2, [pc, #16]	@ (8001350 <HAL_TIM_Base_MspInit+0x8c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000
 8001350:	20000104 	.word	0x20000104
 8001354:	40020008 	.word	0x40020008

08001358 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001378:	d11c      	bne.n	80013b4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <HAL_TIM_MspPostInit+0x64>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	4a0f      	ldr	r2, [pc, #60]	@ (80013bc <HAL_TIM_MspPostInit+0x64>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001386:	4b0d      	ldr	r3, [pc, #52]	@ (80013bc <HAL_TIM_MspPostInit+0x64>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001392:	2301      	movs	r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013a2:	2301      	movs	r3, #1
 80013a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b0:	f000 fb8c 	bl	8001acc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013b4:	bf00      	nop
 80013b6:	3720      	adds	r7, #32
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40021000 	.word	0x40021000

080013c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013c0:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013c4:	f7ff fef6 	bl	80011b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c8:	480c      	ldr	r0, [pc, #48]	@ (80013fc <LoopForever+0x6>)
  ldr r1, =_edata
 80013ca:	490d      	ldr	r1, [pc, #52]	@ (8001400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001404 <LoopForever+0xe>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013d0:	e002      	b.n	80013d8 <LoopCopyDataInit>

080013d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d6:	3304      	adds	r3, #4

080013d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013dc:	d3f9      	bcc.n	80013d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013de:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013e0:	4c0a      	ldr	r4, [pc, #40]	@ (800140c <LoopForever+0x16>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e4:	e001      	b.n	80013ea <LoopFillZerobss>

080013e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e8:	3204      	adds	r2, #4

080013ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ec:	d3fb      	bcc.n	80013e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ee:	f002 fe49 	bl	8004084 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013f2:	f7ff fd3f 	bl	8000e74 <main>

080013f6 <LoopForever>:

LoopForever:
    b LoopForever
 80013f6:	e7fe      	b.n	80013f6 <LoopForever>
  ldr   r0, =_estack
 80013f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001400:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001404:	0800f4cc 	.word	0x0800f4cc
  ldr r2, =_sbss
 8001408:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800140c:	20000168 	.word	0x20000168

08001410 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001410:	e7fe      	b.n	8001410 <ADC1_2_IRQHandler>

08001412 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141c:	2003      	movs	r0, #3
 800141e:	f000 f95b 	bl	80016d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001422:	200f      	movs	r0, #15
 8001424:	f000 f80e 	bl	8001444 <HAL_InitTick>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	71fb      	strb	r3, [r7, #7]
 8001432:	e001      	b.n	8001438 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001434:	f7ff fe60 	bl	80010f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001438:	79fb      	ldrb	r3, [r7, #7]

}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001450:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <HAL_InitTick+0x68>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d022      	beq.n	800149e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001458:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <HAL_InitTick+0x6c>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b13      	ldr	r3, [pc, #76]	@ (80014ac <HAL_InitTick+0x68>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001464:	fbb1 f3f3 	udiv	r3, r1, r3
 8001468:	fbb2 f3f3 	udiv	r3, r2, r3
 800146c:	4618      	mov	r0, r3
 800146e:	f000 f966 	bl	800173e <HAL_SYSTICK_Config>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d10f      	bne.n	8001498 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b0f      	cmp	r3, #15
 800147c:	d809      	bhi.n	8001492 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147e:	2200      	movs	r2, #0
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	f04f 30ff 	mov.w	r0, #4294967295
 8001486:	f000 f932 	bl	80016ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800148a:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <HAL_InitTick+0x70>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	e007      	b.n	80014a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
 8001496:	e004      	b.n	80014a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	e001      	b.n	80014a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000010 	.word	0x20000010
 80014b0:	20000008 	.word	0x20000008
 80014b4:	2000000c 	.word	0x2000000c

080014b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014bc:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <HAL_IncTick+0x1c>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <HAL_IncTick+0x20>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	4a03      	ldr	r2, [pc, #12]	@ (80014d4 <HAL_IncTick+0x1c>)
 80014c8:	6013      	str	r3, [r2, #0]
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	20000164 	.word	0x20000164
 80014d8:	20000010 	.word	0x20000010

080014dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return uwTick;
 80014e0:	4b03      	ldr	r3, [pc, #12]	@ (80014f0 <HAL_GetTick+0x14>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000164 	.word	0x20000164

080014f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014fc:	f7ff ffee 	bl	80014dc <HAL_GetTick>
 8001500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150c:	d004      	beq.n	8001518 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <HAL_Delay+0x40>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	4413      	add	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001518:	bf00      	nop
 800151a:	f7ff ffdf 	bl	80014dc <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	429a      	cmp	r2, r3
 8001528:	d8f7      	bhi.n	800151a <HAL_Delay+0x26>
  {
  }
}
 800152a:	bf00      	nop
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000010 	.word	0x20000010

08001538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001548:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001554:	4013      	ands	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001560:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156a:	4a04      	ldr	r2, [pc, #16]	@ (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	60d3      	str	r3, [r2, #12]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001584:	4b04      	ldr	r3, [pc, #16]	@ (8001598 <__NVIC_GetPriorityGrouping+0x18>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	f003 0307 	and.w	r3, r3, #7
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	db0b      	blt.n	80015c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	f003 021f 	and.w	r2, r3, #31
 80015b4:	4907      	ldr	r1, [pc, #28]	@ (80015d4 <__NVIC_EnableIRQ+0x38>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	2001      	movs	r0, #1
 80015be:	fa00 f202 	lsl.w	r2, r0, r2
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db0a      	blt.n	8001602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	490c      	ldr	r1, [pc, #48]	@ (8001624 <__NVIC_SetPriority+0x4c>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001600:	e00a      	b.n	8001618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4908      	ldr	r1, [pc, #32]	@ (8001628 <__NVIC_SetPriority+0x50>)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	3b04      	subs	r3, #4
 8001610:	0112      	lsls	r2, r2, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	440b      	add	r3, r1
 8001616:	761a      	strb	r2, [r3, #24]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	@ 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf28      	it	cs
 800164a:	2304      	movcs	r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3304      	adds	r3, #4
 8001652:	2b06      	cmp	r3, #6
 8001654:	d902      	bls.n	800165c <NVIC_EncodePriority+0x30>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3b03      	subs	r3, #3
 800165a:	e000      	b.n	800165e <NVIC_EncodePriority+0x32>
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43d9      	mvns	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	4313      	orrs	r3, r2
         );
}
 8001686:	4618      	mov	r0, r3
 8001688:	3724      	adds	r7, #36	@ 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016a4:	d301      	bcc.n	80016aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00f      	b.n	80016ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016aa:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <SysTick_Config+0x40>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b2:	210f      	movs	r1, #15
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f7ff ff8e 	bl	80015d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016bc:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <SysTick_Config+0x40>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c2:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <SysTick_Config+0x40>)
 80016c4:	2207      	movs	r2, #7
 80016c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	e000e010 	.word	0xe000e010

080016d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff29 	bl	8001538 <__NVIC_SetPriorityGrouping>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff40 	bl	8001580 <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff90 	bl	800162c <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5f 	bl	80015d8 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff33 	bl	800159c <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa4 	bl	8001694 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e08d      	b.n	8001886 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	4b47      	ldr	r3, [pc, #284]	@ (8001890 <HAL_DMA_Init+0x138>)
 8001772:	429a      	cmp	r2, r3
 8001774:	d80f      	bhi.n	8001796 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	4b45      	ldr	r3, [pc, #276]	@ (8001894 <HAL_DMA_Init+0x13c>)
 800177e:	4413      	add	r3, r2
 8001780:	4a45      	ldr	r2, [pc, #276]	@ (8001898 <HAL_DMA_Init+0x140>)
 8001782:	fba2 2303 	umull	r2, r3, r2, r3
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	009a      	lsls	r2, r3, #2
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a42      	ldr	r2, [pc, #264]	@ (800189c <HAL_DMA_Init+0x144>)
 8001792:	641a      	str	r2, [r3, #64]	@ 0x40
 8001794:	e00e      	b.n	80017b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	4b40      	ldr	r3, [pc, #256]	@ (80018a0 <HAL_DMA_Init+0x148>)
 800179e:	4413      	add	r3, r2
 80017a0:	4a3d      	ldr	r2, [pc, #244]	@ (8001898 <HAL_DMA_Init+0x140>)
 80017a2:	fba2 2303 	umull	r2, r3, r2, r3
 80017a6:	091b      	lsrs	r3, r3, #4
 80017a8:	009a      	lsls	r2, r3, #2
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a3c      	ldr	r2, [pc, #240]	@ (80018a4 <HAL_DMA_Init+0x14c>)
 80017b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2202      	movs	r2, #2
 80017b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80017ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f8fe 	bl	8001a08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001814:	d102      	bne.n	800181c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001830:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d010      	beq.n	800185c <HAL_DMA_Init+0x104>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b04      	cmp	r3, #4
 8001840:	d80c      	bhi.n	800185c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f91e 	bl	8001a84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	e008      	b.n	800186e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40020407 	.word	0x40020407
 8001894:	bffdfff8 	.word	0xbffdfff8
 8001898:	cccccccd 	.word	0xcccccccd
 800189c:	40020000 	.word	0x40020000
 80018a0:	bffdfbf8 	.word	0xbffdfbf8
 80018a4:	40020400 	.word	0x40020400

080018a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c4:	f003 031f 	and.w	r3, r3, #31
 80018c8:	2204      	movs	r2, #4
 80018ca:	409a      	lsls	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d026      	beq.n	8001922 <HAL_DMA_IRQHandler+0x7a>
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d021      	beq.n	8001922 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0320 	and.w	r3, r3, #32
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d107      	bne.n	80018fc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0204 	bic.w	r2, r2, #4
 80018fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001900:	f003 021f 	and.w	r2, r3, #31
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	2104      	movs	r1, #4
 800190a:	fa01 f202 	lsl.w	r2, r1, r2
 800190e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001914:	2b00      	cmp	r3, #0
 8001916:	d071      	beq.n	80019fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001920:	e06c      	b.n	80019fc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001926:	f003 031f 	and.w	r3, r3, #31
 800192a:	2202      	movs	r2, #2
 800192c:	409a      	lsls	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4013      	ands	r3, r2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d02e      	beq.n	8001994 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d029      	beq.n	8001994 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0320 	and.w	r3, r3, #32
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10b      	bne.n	8001966 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 020a 	bic.w	r2, r2, #10
 800195c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	f003 021f 	and.w	r2, r3, #31
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	2102      	movs	r1, #2
 8001974:	fa01 f202 	lsl.w	r2, r1, r2
 8001978:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001986:	2b00      	cmp	r3, #0
 8001988:	d038      	beq.n	80019fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001992:	e033      	b.n	80019fc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001998:	f003 031f 	and.w	r3, r3, #31
 800199c:	2208      	movs	r2, #8
 800199e:	409a      	lsls	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d02a      	beq.n	80019fe <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d025      	beq.n	80019fe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 020e 	bic.w	r2, r2, #14
 80019c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c6:	f003 021f 	and.w	r2, r3, #31
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	2101      	movs	r1, #1
 80019d0:	fa01 f202 	lsl.w	r2, r1, r2
 80019d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d004      	beq.n	80019fe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
}
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b16      	ldr	r3, [pc, #88]	@ (8001a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d802      	bhi.n	8001a22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001a1c:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e001      	b.n	8001a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001a22:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001a24:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	3b08      	subs	r3, #8
 8001a32:	4a12      	ldr	r2, [pc, #72]	@ (8001a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001a34:	fba2 2303 	umull	r2, r3, r2, r3
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	009a      	lsls	r2, r3, #2
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4413      	add	r3, r2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a0b      	ldr	r2, [pc, #44]	@ (8001a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001a52:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001a62:	bf00      	nop
 8001a64:	371c      	adds	r7, #28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40020407 	.word	0x40020407
 8001a74:	40020800 	.word	0x40020800
 8001a78:	40020820 	.word	0x40020820
 8001a7c:	cccccccd 	.word	0xcccccccd
 8001a80:	40020880 	.word	0x40020880

08001a84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a08      	ldr	r2, [pc, #32]	@ (8001ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001aa6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	1000823f 	.word	0x1000823f
 8001ac8:	40020940 	.word	0x40020940

08001acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ada:	e15a      	b.n	8001d92 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 814c 	beq.w	8001d8c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d005      	beq.n	8001b0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d130      	bne.n	8001b6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b42:	2201      	movs	r2, #1
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	091b      	lsrs	r3, r3, #4
 8001b58:	f003 0201 	and.w	r2, r3, #1
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d017      	beq.n	8001baa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d123      	bne.n	8001bfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	08da      	lsrs	r2, r3, #3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3208      	adds	r2, #8
 8001bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	08da      	lsrs	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3208      	adds	r2, #8
 8001bf8:	6939      	ldr	r1, [r7, #16]
 8001bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	2203      	movs	r2, #3
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0203 	and.w	r2, r3, #3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80a6 	beq.w	8001d8c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c40:	4b5b      	ldr	r3, [pc, #364]	@ (8001db0 <HAL_GPIO_Init+0x2e4>)
 8001c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c44:	4a5a      	ldr	r2, [pc, #360]	@ (8001db0 <HAL_GPIO_Init+0x2e4>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c4c:	4b58      	ldr	r3, [pc, #352]	@ (8001db0 <HAL_GPIO_Init+0x2e4>)
 8001c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c58:	4a56      	ldr	r2, [pc, #344]	@ (8001db4 <HAL_GPIO_Init+0x2e8>)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c82:	d01f      	beq.n	8001cc4 <HAL_GPIO_Init+0x1f8>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a4c      	ldr	r2, [pc, #304]	@ (8001db8 <HAL_GPIO_Init+0x2ec>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d019      	beq.n	8001cc0 <HAL_GPIO_Init+0x1f4>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a4b      	ldr	r2, [pc, #300]	@ (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d013      	beq.n	8001cbc <HAL_GPIO_Init+0x1f0>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a4a      	ldr	r2, [pc, #296]	@ (8001dc0 <HAL_GPIO_Init+0x2f4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d00d      	beq.n	8001cb8 <HAL_GPIO_Init+0x1ec>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a49      	ldr	r2, [pc, #292]	@ (8001dc4 <HAL_GPIO_Init+0x2f8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d007      	beq.n	8001cb4 <HAL_GPIO_Init+0x1e8>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a48      	ldr	r2, [pc, #288]	@ (8001dc8 <HAL_GPIO_Init+0x2fc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d101      	bne.n	8001cb0 <HAL_GPIO_Init+0x1e4>
 8001cac:	2305      	movs	r3, #5
 8001cae:	e00a      	b.n	8001cc6 <HAL_GPIO_Init+0x1fa>
 8001cb0:	2306      	movs	r3, #6
 8001cb2:	e008      	b.n	8001cc6 <HAL_GPIO_Init+0x1fa>
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	e006      	b.n	8001cc6 <HAL_GPIO_Init+0x1fa>
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e004      	b.n	8001cc6 <HAL_GPIO_Init+0x1fa>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e002      	b.n	8001cc6 <HAL_GPIO_Init+0x1fa>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <HAL_GPIO_Init+0x1fa>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	f002 0203 	and.w	r2, r2, #3
 8001ccc:	0092      	lsls	r2, r2, #2
 8001cce:	4093      	lsls	r3, r2
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd6:	4937      	ldr	r1, [pc, #220]	@ (8001db4 <HAL_GPIO_Init+0x2e8>)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ce4:	4b39      	ldr	r3, [pc, #228]	@ (8001dcc <HAL_GPIO_Init+0x300>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d08:	4a30      	ldr	r2, [pc, #192]	@ (8001dcc <HAL_GPIO_Init+0x300>)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8001dcc <HAL_GPIO_Init+0x300>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d32:	4a26      	ldr	r2, [pc, #152]	@ (8001dcc <HAL_GPIO_Init+0x300>)
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d38:	4b24      	ldr	r3, [pc, #144]	@ (8001dcc <HAL_GPIO_Init+0x300>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001dcc <HAL_GPIO_Init+0x300>)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d62:	4b1a      	ldr	r3, [pc, #104]	@ (8001dcc <HAL_GPIO_Init+0x300>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d86:	4a11      	ldr	r2, [pc, #68]	@ (8001dcc <HAL_GPIO_Init+0x300>)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f47f ae9d 	bne.w	8001adc <HAL_GPIO_Init+0x10>
  }
}
 8001da2:	bf00      	nop
 8001da4:	bf00      	nop
 8001da6:	371c      	adds	r7, #28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40010000 	.word	0x40010000
 8001db8:	48000400 	.word	0x48000400
 8001dbc:	48000800 	.word	0x48000800
 8001dc0:	48000c00 	.word	0x48000c00
 8001dc4:	48001000 	.word	0x48001000
 8001dc8:	48001400 	.word	0x48001400
 8001dcc:	40010400 	.word	0x40010400

08001dd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	887b      	ldrh	r3, [r7, #2]
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
 8001dec:	e001      	b.n	8001df2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	807b      	strh	r3, [r7, #2]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e10:	787b      	ldrb	r3, [r7, #1]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e1c:	e002      	b.n	8001e24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e1e:	887a      	ldrh	r2, [r7, #2]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d141      	bne.n	8001ec2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e3e:	4b4b      	ldr	r3, [pc, #300]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e4a:	d131      	bne.n	8001eb0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e4c:	4b47      	ldr	r3, [pc, #284]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e52:	4a46      	ldr	r2, [pc, #280]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e5c:	4b43      	ldr	r3, [pc, #268]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e64:	4a41      	ldr	r2, [pc, #260]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e6c:	4b40      	ldr	r3, [pc, #256]	@ (8001f70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2232      	movs	r2, #50	@ 0x32
 8001e72:	fb02 f303 	mul.w	r3, r2, r3
 8001e76:	4a3f      	ldr	r2, [pc, #252]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e78:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7c:	0c9b      	lsrs	r3, r3, #18
 8001e7e:	3301      	adds	r3, #1
 8001e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e82:	e002      	b.n	8001e8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e8a:	4b38      	ldr	r3, [pc, #224]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e96:	d102      	bne.n	8001e9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f2      	bne.n	8001e84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e9e:	4b33      	ldr	r3, [pc, #204]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eaa:	d158      	bne.n	8001f5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e057      	b.n	8001f60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eb6:	4a2d      	ldr	r2, [pc, #180]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ebc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ec0:	e04d      	b.n	8001f5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ec8:	d141      	bne.n	8001f4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eca:	4b28      	ldr	r3, [pc, #160]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ed6:	d131      	bne.n	8001f3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ed8:	4b24      	ldr	r3, [pc, #144]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ede:	4a23      	ldr	r2, [pc, #140]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ee8:	4b20      	ldr	r3, [pc, #128]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ef0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ef6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2232      	movs	r2, #50	@ 0x32
 8001efe:	fb02 f303 	mul.w	r3, r2, r3
 8001f02:	4a1c      	ldr	r2, [pc, #112]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	0c9b      	lsrs	r3, r3, #18
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f0e:	e002      	b.n	8001f16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f22:	d102      	bne.n	8001f2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f2      	bne.n	8001f10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f2a:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f36:	d112      	bne.n	8001f5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e011      	b.n	8001f60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f42:	4a0a      	ldr	r2, [pc, #40]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f4c:	e007      	b.n	8001f5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f4e:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f56:	4a05      	ldr	r2, [pc, #20]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f5c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	40007000 	.word	0x40007000
 8001f70:	20000008 	.word	0x20000008
 8001f74:	431bde83 	.word	0x431bde83

08001f78 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f7c:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4a04      	ldr	r2, [pc, #16]	@ (8001f94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f86:	6093      	str	r3, [r2, #8]
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40007000 	.word	0x40007000

08001f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e2fe      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d075      	beq.n	80020a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fb6:	4b97      	ldr	r3, [pc, #604]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc0:	4b94      	ldr	r3, [pc, #592]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b0c      	cmp	r3, #12
 8001fce:	d102      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x3e>
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d002      	beq.n	8001fdc <HAL_RCC_OscConfig+0x44>
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d10b      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fdc:	4b8d      	ldr	r3, [pc, #564]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d05b      	beq.n	80020a0 <HAL_RCC_OscConfig+0x108>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d157      	bne.n	80020a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e2d9      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ffc:	d106      	bne.n	800200c <HAL_RCC_OscConfig+0x74>
 8001ffe:	4b85      	ldr	r3, [pc, #532]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a84      	ldr	r2, [pc, #528]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e01d      	b.n	8002048 <HAL_RCC_OscConfig+0xb0>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0x98>
 8002016:	4b7f      	ldr	r3, [pc, #508]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a7e      	ldr	r2, [pc, #504]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 800201c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b7c      	ldr	r3, [pc, #496]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a7b      	ldr	r2, [pc, #492]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e00b      	b.n	8002048 <HAL_RCC_OscConfig+0xb0>
 8002030:	4b78      	ldr	r3, [pc, #480]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a77      	ldr	r2, [pc, #476]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 8002036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b75      	ldr	r3, [pc, #468]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a74      	ldr	r2, [pc, #464]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 8002042:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d013      	beq.n	8002078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7ff fa44 	bl	80014dc <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002058:	f7ff fa40 	bl	80014dc <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	@ 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e29e      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800206a:	4b6a      	ldr	r3, [pc, #424]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0xc0>
 8002076:	e014      	b.n	80020a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7ff fa30 	bl	80014dc <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002080:	f7ff fa2c 	bl	80014dc <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	@ 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e28a      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002092:	4b60      	ldr	r3, [pc, #384]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0xe8>
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d075      	beq.n	800219a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ae:	4b59      	ldr	r3, [pc, #356]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020b8:	4b56      	ldr	r3, [pc, #344]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	2b0c      	cmp	r3, #12
 80020c6:	d102      	bne.n	80020ce <HAL_RCC_OscConfig+0x136>
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d002      	beq.n	80020d4 <HAL_RCC_OscConfig+0x13c>
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d11f      	bne.n	8002114 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_OscConfig+0x154>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e25d      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ec:	4b49      	ldr	r3, [pc, #292]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	061b      	lsls	r3, r3, #24
 80020fa:	4946      	ldr	r1, [pc, #280]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002100:	4b45      	ldr	r3, [pc, #276]	@ (8002218 <HAL_RCC_OscConfig+0x280>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff f99d 	bl	8001444 <HAL_InitTick>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d043      	beq.n	8002198 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e249      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d023      	beq.n	8002164 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800211c:	4b3d      	ldr	r3, [pc, #244]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a3c      	ldr	r2, [pc, #240]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 8002122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7ff f9d8 	bl	80014dc <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002130:	f7ff f9d4 	bl	80014dc <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e232      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002142:	4b34      	ldr	r3, [pc, #208]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214e:	4b31      	ldr	r3, [pc, #196]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	061b      	lsls	r3, r3, #24
 800215c:	492d      	ldr	r1, [pc, #180]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
 8002162:	e01a      	b.n	800219a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002164:	4b2b      	ldr	r3, [pc, #172]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a2a      	ldr	r2, [pc, #168]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 800216a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800216e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7ff f9b4 	bl	80014dc <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002178:	f7ff f9b0 	bl	80014dc <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e20e      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800218a:	4b22      	ldr	r3, [pc, #136]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x1e0>
 8002196:	e000      	b.n	800219a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002198:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d041      	beq.n	800222a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d01c      	beq.n	80021e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ae:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 80021b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021b4:	4a17      	ldr	r2, [pc, #92]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021be:	f7ff f98d 	bl	80014dc <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c6:	f7ff f989 	bl	80014dc <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e1e7      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 80021da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0ef      	beq.n	80021c6 <HAL_RCC_OscConfig+0x22e>
 80021e6:	e020      	b.n	800222a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 80021ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021ee:	4a09      	ldr	r2, [pc, #36]	@ (8002214 <HAL_RCC_OscConfig+0x27c>)
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f8:	f7ff f970 	bl	80014dc <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021fe:	e00d      	b.n	800221c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002200:	f7ff f96c 	bl	80014dc <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d906      	bls.n	800221c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e1ca      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
 8002218:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800221c:	4b8c      	ldr	r3, [pc, #560]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 800221e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1ea      	bne.n	8002200 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80a6 	beq.w	8002384 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002238:	2300      	movs	r3, #0
 800223a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800223c:	4b84      	ldr	r3, [pc, #528]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 800223e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_RCC_OscConfig+0x2b4>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <HAL_RCC_OscConfig+0x2b6>
 800224c:	2300      	movs	r3, #0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00d      	beq.n	800226e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	4b7f      	ldr	r3, [pc, #508]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 8002254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002256:	4a7e      	ldr	r2, [pc, #504]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800225c:	6593      	str	r3, [r2, #88]	@ 0x58
 800225e:	4b7c      	ldr	r3, [pc, #496]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 8002260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800226a:	2301      	movs	r3, #1
 800226c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800226e:	4b79      	ldr	r3, [pc, #484]	@ (8002454 <HAL_RCC_OscConfig+0x4bc>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d118      	bne.n	80022ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800227a:	4b76      	ldr	r3, [pc, #472]	@ (8002454 <HAL_RCC_OscConfig+0x4bc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a75      	ldr	r2, [pc, #468]	@ (8002454 <HAL_RCC_OscConfig+0x4bc>)
 8002280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002286:	f7ff f929 	bl	80014dc <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228e:	f7ff f925 	bl	80014dc <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e183      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a0:	4b6c      	ldr	r3, [pc, #432]	@ (8002454 <HAL_RCC_OscConfig+0x4bc>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d108      	bne.n	80022c6 <HAL_RCC_OscConfig+0x32e>
 80022b4:	4b66      	ldr	r3, [pc, #408]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ba:	4a65      	ldr	r2, [pc, #404]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022c4:	e024      	b.n	8002310 <HAL_RCC_OscConfig+0x378>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b05      	cmp	r3, #5
 80022cc:	d110      	bne.n	80022f0 <HAL_RCC_OscConfig+0x358>
 80022ce:	4b60      	ldr	r3, [pc, #384]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 80022d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d4:	4a5e      	ldr	r2, [pc, #376]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022de:	4b5c      	ldr	r3, [pc, #368]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 80022e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e4:	4a5a      	ldr	r2, [pc, #360]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022ee:	e00f      	b.n	8002310 <HAL_RCC_OscConfig+0x378>
 80022f0:	4b57      	ldr	r3, [pc, #348]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f6:	4a56      	ldr	r2, [pc, #344]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002300:	4b53      	ldr	r3, [pc, #332]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002306:	4a52      	ldr	r2, [pc, #328]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 8002308:	f023 0304 	bic.w	r3, r3, #4
 800230c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d016      	beq.n	8002346 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7ff f8e0 	bl	80014dc <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800231e:	e00a      	b.n	8002336 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002320:	f7ff f8dc 	bl	80014dc <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e138      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002336:	4b46      	ldr	r3, [pc, #280]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 8002338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0ed      	beq.n	8002320 <HAL_RCC_OscConfig+0x388>
 8002344:	e015      	b.n	8002372 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002346:	f7ff f8c9 	bl	80014dc <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800234c:	e00a      	b.n	8002364 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234e:	f7ff f8c5 	bl	80014dc <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	@ 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e121      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002364:	4b3a      	ldr	r3, [pc, #232]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1ed      	bne.n	800234e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002372:	7ffb      	ldrb	r3, [r7, #31]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d105      	bne.n	8002384 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002378:	4b35      	ldr	r3, [pc, #212]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237c:	4a34      	ldr	r2, [pc, #208]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 800237e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002382:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0320 	and.w	r3, r3, #32
 800238c:	2b00      	cmp	r3, #0
 800238e:	d03c      	beq.n	800240a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01c      	beq.n	80023d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002398:	4b2d      	ldr	r3, [pc, #180]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 800239a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800239e:	4a2c      	ldr	r2, [pc, #176]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a8:	f7ff f898 	bl	80014dc <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023b0:	f7ff f894 	bl	80014dc <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e0f2      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023c2:	4b23      	ldr	r3, [pc, #140]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 80023c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0ef      	beq.n	80023b0 <HAL_RCC_OscConfig+0x418>
 80023d0:	e01b      	b.n	800240a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 80023d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 80023da:	f023 0301 	bic.w	r3, r3, #1
 80023de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e2:	f7ff f87b 	bl	80014dc <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ea:	f7ff f877 	bl	80014dc <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0d5      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023fc:	4b14      	ldr	r3, [pc, #80]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 80023fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1ef      	bne.n	80023ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 80c9 	beq.w	80025a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002414:	4b0e      	ldr	r3, [pc, #56]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b0c      	cmp	r3, #12
 800241e:	f000 8083 	beq.w	8002528 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d15e      	bne.n	80024e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242a:	4b09      	ldr	r3, [pc, #36]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a08      	ldr	r2, [pc, #32]	@ (8002450 <HAL_RCC_OscConfig+0x4b8>)
 8002430:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002436:	f7ff f851 	bl	80014dc <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800243c:	e00c      	b.n	8002458 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243e:	f7ff f84d 	bl	80014dc <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d905      	bls.n	8002458 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e0ab      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
 8002450:	40021000 	.word	0x40021000
 8002454:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002458:	4b55      	ldr	r3, [pc, #340]	@ (80025b0 <HAL_RCC_OscConfig+0x618>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1ec      	bne.n	800243e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002464:	4b52      	ldr	r3, [pc, #328]	@ (80025b0 <HAL_RCC_OscConfig+0x618>)
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	4b52      	ldr	r3, [pc, #328]	@ (80025b4 <HAL_RCC_OscConfig+0x61c>)
 800246a:	4013      	ands	r3, r2
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6a11      	ldr	r1, [r2, #32]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002474:	3a01      	subs	r2, #1
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	4311      	orrs	r1, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800247e:	0212      	lsls	r2, r2, #8
 8002480:	4311      	orrs	r1, r2
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002486:	0852      	lsrs	r2, r2, #1
 8002488:	3a01      	subs	r2, #1
 800248a:	0552      	lsls	r2, r2, #21
 800248c:	4311      	orrs	r1, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002492:	0852      	lsrs	r2, r2, #1
 8002494:	3a01      	subs	r2, #1
 8002496:	0652      	lsls	r2, r2, #25
 8002498:	4311      	orrs	r1, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800249e:	06d2      	lsls	r2, r2, #27
 80024a0:	430a      	orrs	r2, r1
 80024a2:	4943      	ldr	r1, [pc, #268]	@ (80025b0 <HAL_RCC_OscConfig+0x618>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024a8:	4b41      	ldr	r3, [pc, #260]	@ (80025b0 <HAL_RCC_OscConfig+0x618>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a40      	ldr	r2, [pc, #256]	@ (80025b0 <HAL_RCC_OscConfig+0x618>)
 80024ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024b4:	4b3e      	ldr	r3, [pc, #248]	@ (80025b0 <HAL_RCC_OscConfig+0x618>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4a3d      	ldr	r2, [pc, #244]	@ (80025b0 <HAL_RCC_OscConfig+0x618>)
 80024ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7ff f80c 	bl	80014dc <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c8:	f7ff f808 	bl	80014dc <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e066      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024da:	4b35      	ldr	r3, [pc, #212]	@ (80025b0 <HAL_RCC_OscConfig+0x618>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x530>
 80024e6:	e05e      	b.n	80025a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e8:	4b31      	ldr	r3, [pc, #196]	@ (80025b0 <HAL_RCC_OscConfig+0x618>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a30      	ldr	r2, [pc, #192]	@ (80025b0 <HAL_RCC_OscConfig+0x618>)
 80024ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7fe fff2 	bl	80014dc <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fc:	f7fe ffee 	bl	80014dc <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e04c      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800250e:	4b28      	ldr	r3, [pc, #160]	@ (80025b0 <HAL_RCC_OscConfig+0x618>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800251a:	4b25      	ldr	r3, [pc, #148]	@ (80025b0 <HAL_RCC_OscConfig+0x618>)
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	4924      	ldr	r1, [pc, #144]	@ (80025b0 <HAL_RCC_OscConfig+0x618>)
 8002520:	4b25      	ldr	r3, [pc, #148]	@ (80025b8 <HAL_RCC_OscConfig+0x620>)
 8002522:	4013      	ands	r3, r2
 8002524:	60cb      	str	r3, [r1, #12]
 8002526:	e03e      	b.n	80025a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e039      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002534:	4b1e      	ldr	r3, [pc, #120]	@ (80025b0 <HAL_RCC_OscConfig+0x618>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 0203 	and.w	r2, r3, #3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	429a      	cmp	r2, r3
 8002546:	d12c      	bne.n	80025a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002552:	3b01      	subs	r3, #1
 8002554:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d123      	bne.n	80025a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002564:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002566:	429a      	cmp	r2, r3
 8002568:	d11b      	bne.n	80025a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002574:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002576:	429a      	cmp	r2, r3
 8002578:	d113      	bne.n	80025a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	3b01      	subs	r3, #1
 8002588:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d109      	bne.n	80025a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002598:	085b      	lsrs	r3, r3, #1
 800259a:	3b01      	subs	r3, #1
 800259c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3720      	adds	r7, #32
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	019f800c 	.word	0x019f800c
 80025b8:	feeefffc 	.word	0xfeeefffc

080025bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e11e      	b.n	8002812 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d4:	4b91      	ldr	r3, [pc, #580]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d910      	bls.n	8002604 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b8e      	ldr	r3, [pc, #568]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 020f 	bic.w	r2, r3, #15
 80025ea:	498c      	ldr	r1, [pc, #560]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b8a      	ldr	r3, [pc, #552]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e106      	b.n	8002812 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d073      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b03      	cmp	r3, #3
 8002616:	d129      	bne.n	800266c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002618:	4b81      	ldr	r3, [pc, #516]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0f4      	b.n	8002812 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002628:	f000 f966 	bl	80028f8 <RCC_GetSysClockFreqFromPLLSource>
 800262c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4a7c      	ldr	r2, [pc, #496]	@ (8002824 <HAL_RCC_ClockConfig+0x268>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d93f      	bls.n	80026b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002636:	4b7a      	ldr	r3, [pc, #488]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d009      	beq.n	8002656 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800264a:	2b00      	cmp	r3, #0
 800264c:	d033      	beq.n	80026b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002652:	2b00      	cmp	r3, #0
 8002654:	d12f      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002656:	4b72      	ldr	r3, [pc, #456]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800265e:	4a70      	ldr	r2, [pc, #448]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 8002660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002664:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002666:	2380      	movs	r3, #128	@ 0x80
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	e024      	b.n	80026b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d107      	bne.n	8002684 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002674:	4b6a      	ldr	r3, [pc, #424]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d109      	bne.n	8002694 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0c6      	b.n	8002812 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002684:	4b66      	ldr	r3, [pc, #408]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0be      	b.n	8002812 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002694:	f000 f8ce 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 8002698:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4a61      	ldr	r2, [pc, #388]	@ (8002824 <HAL_RCC_ClockConfig+0x268>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d909      	bls.n	80026b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026aa:	4a5d      	ldr	r2, [pc, #372]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 80026ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80026b2:	2380      	movs	r3, #128	@ 0x80
 80026b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026b6:	4b5a      	ldr	r3, [pc, #360]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f023 0203 	bic.w	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4957      	ldr	r1, [pc, #348]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c8:	f7fe ff08 	bl	80014dc <HAL_GetTick>
 80026cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ce:	e00a      	b.n	80026e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d0:	f7fe ff04 	bl	80014dc <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e095      	b.n	8002812 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 020c 	and.w	r2, r3, #12
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d1eb      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d023      	beq.n	800274c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002710:	4b43      	ldr	r3, [pc, #268]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4a42      	ldr	r2, [pc, #264]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 8002716:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800271a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d007      	beq.n	8002738 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002728:	4b3d      	ldr	r3, [pc, #244]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002730:	4a3b      	ldr	r2, [pc, #236]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 8002732:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002736:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002738:	4b39      	ldr	r3, [pc, #228]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4936      	ldr	r1, [pc, #216]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 8002746:	4313      	orrs	r3, r2
 8002748:	608b      	str	r3, [r1, #8]
 800274a:	e008      	b.n	800275e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2b80      	cmp	r3, #128	@ 0x80
 8002750:	d105      	bne.n	800275e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002752:	4b33      	ldr	r3, [pc, #204]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	4a32      	ldr	r2, [pc, #200]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 8002758:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800275c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800275e:	4b2f      	ldr	r3, [pc, #188]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d21d      	bcs.n	80027a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276c:	4b2b      	ldr	r3, [pc, #172]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f023 020f 	bic.w	r2, r3, #15
 8002774:	4929      	ldr	r1, [pc, #164]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800277c:	f7fe feae 	bl	80014dc <HAL_GetTick>
 8002780:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002782:	e00a      	b.n	800279a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002784:	f7fe feaa 	bl	80014dc <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e03b      	b.n	8002812 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b20      	ldr	r3, [pc, #128]	@ (800281c <HAL_RCC_ClockConfig+0x260>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d1ed      	bne.n	8002784 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4917      	ldr	r1, [pc, #92]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d009      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027d2:	4b13      	ldr	r3, [pc, #76]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	490f      	ldr	r1, [pc, #60]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027e6:	f000 f825 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 80027ea:	4602      	mov	r2, r0
 80027ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002820 <HAL_RCC_ClockConfig+0x264>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	490c      	ldr	r1, [pc, #48]	@ (8002828 <HAL_RCC_ClockConfig+0x26c>)
 80027f8:	5ccb      	ldrb	r3, [r1, r3]
 80027fa:	f003 031f 	and.w	r3, r3, #31
 80027fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002802:	4a0a      	ldr	r2, [pc, #40]	@ (800282c <HAL_RCC_ClockConfig+0x270>)
 8002804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002806:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <HAL_RCC_ClockConfig+0x274>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe fe1a 	bl	8001444 <HAL_InitTick>
 8002810:	4603      	mov	r3, r0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40022000 	.word	0x40022000
 8002820:	40021000 	.word	0x40021000
 8002824:	04c4b400 	.word	0x04c4b400
 8002828:	0800f4b4 	.word	0x0800f4b4
 800282c:	20000008 	.word	0x20000008
 8002830:	2000000c 	.word	0x2000000c

08002834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800283a:	4b2c      	ldr	r3, [pc, #176]	@ (80028ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	2b04      	cmp	r3, #4
 8002844:	d102      	bne.n	800284c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002846:	4b2a      	ldr	r3, [pc, #168]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	e047      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800284c:	4b27      	ldr	r3, [pc, #156]	@ (80028ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b08      	cmp	r3, #8
 8002856:	d102      	bne.n	800285e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002858:	4b26      	ldr	r3, [pc, #152]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	e03e      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800285e:	4b23      	ldr	r3, [pc, #140]	@ (80028ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b0c      	cmp	r3, #12
 8002868:	d136      	bne.n	80028d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800286a:	4b20      	ldr	r3, [pc, #128]	@ (80028ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002874:	4b1d      	ldr	r3, [pc, #116]	@ (80028ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	3301      	adds	r3, #1
 8002880:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b03      	cmp	r3, #3
 8002886:	d10c      	bne.n	80028a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002888:	4a1a      	ldr	r2, [pc, #104]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002890:	4a16      	ldr	r2, [pc, #88]	@ (80028ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002892:	68d2      	ldr	r2, [r2, #12]
 8002894:	0a12      	lsrs	r2, r2, #8
 8002896:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	617b      	str	r3, [r7, #20]
      break;
 80028a0:	e00c      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028a2:	4a13      	ldr	r2, [pc, #76]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028aa:	4a10      	ldr	r2, [pc, #64]	@ (80028ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ac:	68d2      	ldr	r2, [r2, #12]
 80028ae:	0a12      	lsrs	r2, r2, #8
 80028b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028b4:	fb02 f303 	mul.w	r3, r2, r3
 80028b8:	617b      	str	r3, [r7, #20]
      break;
 80028ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028bc:	4b0b      	ldr	r3, [pc, #44]	@ (80028ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0e5b      	lsrs	r3, r3, #25
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	3301      	adds	r3, #1
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	e001      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028dc:	693b      	ldr	r3, [r7, #16]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	00f42400 	.word	0x00f42400
 80028f4:	016e3600 	.word	0x016e3600

080028f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002908:	4b1b      	ldr	r3, [pc, #108]	@ (8002978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	3301      	adds	r3, #1
 8002914:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b03      	cmp	r3, #3
 800291a:	d10c      	bne.n	8002936 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800291c:	4a17      	ldr	r2, [pc, #92]	@ (800297c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	fbb2 f3f3 	udiv	r3, r2, r3
 8002924:	4a14      	ldr	r2, [pc, #80]	@ (8002978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002926:	68d2      	ldr	r2, [r2, #12]
 8002928:	0a12      	lsrs	r2, r2, #8
 800292a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	617b      	str	r3, [r7, #20]
    break;
 8002934:	e00c      	b.n	8002950 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002936:	4a12      	ldr	r2, [pc, #72]	@ (8002980 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	fbb2 f3f3 	udiv	r3, r2, r3
 800293e:	4a0e      	ldr	r2, [pc, #56]	@ (8002978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002940:	68d2      	ldr	r2, [r2, #12]
 8002942:	0a12      	lsrs	r2, r2, #8
 8002944:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002948:	fb02 f303 	mul.w	r3, r2, r3
 800294c:	617b      	str	r3, [r7, #20]
    break;
 800294e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002950:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	0e5b      	lsrs	r3, r3, #25
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	3301      	adds	r3, #1
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800296a:	687b      	ldr	r3, [r7, #4]
}
 800296c:	4618      	mov	r0, r3
 800296e:	371c      	adds	r7, #28
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	40021000 	.word	0x40021000
 800297c:	016e3600 	.word	0x016e3600
 8002980:	00f42400 	.word	0x00f42400

08002984 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e09d      	b.n	8002ad2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299a:	2b00      	cmp	r3, #0
 800299c:	d108      	bne.n	80029b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029a6:	d009      	beq.n	80029bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	61da      	str	r2, [r3, #28]
 80029ae:	e005      	b.n	80029bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fe fb4c 	bl	8001074 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029fc:	d902      	bls.n	8002a04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	e002      	b.n	8002a0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002a12:	d007      	beq.n	8002a24 <HAL_SPI_Init+0xa0>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a1c:	d002      	beq.n	8002a24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a66:	ea42 0103 	orr.w	r1, r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	0c1b      	lsrs	r3, r3, #16
 8002a80:	f003 0204 	and.w	r2, r3, #4
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002aa0:	ea42 0103 	orr.w	r1, r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	69da      	ldr	r2, [r3, #28]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ac0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b088      	sub	sp, #32
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	603b      	str	r3, [r7, #0]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002aea:	f7fe fcf7 	bl	80014dc <HAL_GetTick>
 8002aee:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d001      	beq.n	8002b04 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002b00:	2302      	movs	r3, #2
 8002b02:	e15c      	b.n	8002dbe <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_SPI_Transmit+0x36>
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e154      	b.n	8002dbe <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_SPI_Transmit+0x48>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e14d      	b.n	8002dbe <HAL_SPI_Transmit+0x2e4>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	88fa      	ldrh	r2, [r7, #6]
 8002b42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	88fa      	ldrh	r2, [r7, #6]
 8002b48:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b74:	d10f      	bne.n	8002b96 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba0:	2b40      	cmp	r3, #64	@ 0x40
 8002ba2:	d007      	beq.n	8002bb4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002bbc:	d952      	bls.n	8002c64 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <HAL_SPI_Transmit+0xf2>
 8002bc6:	8b7b      	ldrh	r3, [r7, #26]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d145      	bne.n	8002c58 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd0:	881a      	ldrh	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bdc:	1c9a      	adds	r2, r3, #2
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bf0:	e032      	b.n	8002c58 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d112      	bne.n	8002c26 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c04:	881a      	ldrh	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c10:	1c9a      	adds	r2, r3, #2
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c24:	e018      	b.n	8002c58 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c26:	f7fe fc59 	bl	80014dc <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d803      	bhi.n	8002c3e <HAL_SPI_Transmit+0x164>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d102      	bne.n	8002c44 <HAL_SPI_Transmit+0x16a>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d109      	bne.n	8002c58 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e0b2      	b.n	8002dbe <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1c7      	bne.n	8002bf2 <HAL_SPI_Transmit+0x118>
 8002c62:	e083      	b.n	8002d6c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <HAL_SPI_Transmit+0x198>
 8002c6c:	8b7b      	ldrh	r3, [r7, #26]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d177      	bne.n	8002d62 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d912      	bls.n	8002ca2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c80:	881a      	ldrh	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8c:	1c9a      	adds	r2, r3, #2
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b02      	subs	r3, #2
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ca0:	e05f      	b.n	8002d62 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	330c      	adds	r3, #12
 8002cac:	7812      	ldrb	r2, [r2, #0]
 8002cae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002cc8:	e04b      	b.n	8002d62 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d12b      	bne.n	8002d30 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d912      	bls.n	8002d08 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce6:	881a      	ldrh	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf2:	1c9a      	adds	r2, r3, #2
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b02      	subs	r3, #2
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d06:	e02c      	b.n	8002d62 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	330c      	adds	r3, #12
 8002d12:	7812      	ldrb	r2, [r2, #0]
 8002d14:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d2e:	e018      	b.n	8002d62 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d30:	f7fe fbd4 	bl	80014dc <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d803      	bhi.n	8002d48 <HAL_SPI_Transmit+0x26e>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d46:	d102      	bne.n	8002d4e <HAL_SPI_Transmit+0x274>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e02d      	b.n	8002dbe <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1ae      	bne.n	8002cca <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	6839      	ldr	r1, [r7, #0]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f947 	bl	8003004 <SPI_EndRxTxTransaction>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10a      	bne.n	8002da0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
  }
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3720      	adds	r7, #32
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002dd8:	f7fe fb80 	bl	80014dc <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	4413      	add	r3, r2
 8002de6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002de8:	f7fe fb78 	bl	80014dc <HAL_GetTick>
 8002dec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dee:	4b39      	ldr	r3, [pc, #228]	@ (8002ed4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	015b      	lsls	r3, r3, #5
 8002df4:	0d1b      	lsrs	r3, r3, #20
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	fb02 f303 	mul.w	r3, r2, r3
 8002dfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dfe:	e054      	b.n	8002eaa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d050      	beq.n	8002eaa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e08:	f7fe fb68 	bl	80014dc <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	69fa      	ldr	r2, [r7, #28]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d902      	bls.n	8002e1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d13d      	bne.n	8002e9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e36:	d111      	bne.n	8002e5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e40:	d004      	beq.n	8002e4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e4a:	d107      	bne.n	8002e5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e64:	d10f      	bne.n	8002e86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e017      	b.n	8002eca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	bf0c      	ite	eq
 8002eba:	2301      	moveq	r3, #1
 8002ebc:	2300      	movne	r3, #0
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d19b      	bne.n	8002e00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000008 	.word	0x20000008

08002ed8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08a      	sub	sp, #40	@ 0x28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002eea:	f7fe faf7 	bl	80014dc <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002efa:	f7fe faef 	bl	80014dc <HAL_GetTick>
 8002efe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	330c      	adds	r3, #12
 8002f06:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f08:	4b3d      	ldr	r3, [pc, #244]	@ (8003000 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	00da      	lsls	r2, r3, #3
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	0d1b      	lsrs	r3, r3, #20
 8002f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f20:	e060      	b.n	8002fe4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002f28:	d107      	bne.n	8002f3a <SPI_WaitFifoStateUntilTimeout+0x62>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d104      	bne.n	8002f3a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f40:	d050      	beq.n	8002fe4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f42:	f7fe facb 	bl	80014dc <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d902      	bls.n	8002f58 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d13d      	bne.n	8002fd4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002f66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f70:	d111      	bne.n	8002f96 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f7a:	d004      	beq.n	8002f86 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f84:	d107      	bne.n	8002f96 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f9e:	d10f      	bne.n	8002fc0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fbe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e010      	b.n	8002ff6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4013      	ands	r3, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d196      	bne.n	8002f22 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3728      	adds	r7, #40	@ 0x28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	20000008 	.word	0x20000008

08003004 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af02      	add	r7, sp, #8
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2200      	movs	r2, #0
 8003018:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f7ff ff5b 	bl	8002ed8 <SPI_WaitFifoStateUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d007      	beq.n	8003038 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800302c:	f043 0220 	orr.w	r2, r3, #32
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e027      	b.n	8003088 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2200      	movs	r2, #0
 8003040:	2180      	movs	r1, #128	@ 0x80
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f7ff fec0 	bl	8002dc8 <SPI_WaitFlagStateUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d007      	beq.n	800305e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003052:	f043 0220 	orr.w	r2, r3, #32
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e014      	b.n	8003088 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2200      	movs	r2, #0
 8003066:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f7ff ff34 	bl	8002ed8 <SPI_WaitFifoStateUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d007      	beq.n	8003086 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800307a:	f043 0220 	orr.w	r2, r3, #32
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e000      	b.n	8003088 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e049      	b.n	8003136 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fe f904 	bl	80012c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3304      	adds	r3, #4
 80030cc:	4619      	mov	r1, r3
 80030ce:	4610      	mov	r0, r2
 80030d0:	f000 fac0 	bl	8003654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e049      	b.n	80031e4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d106      	bne.n	800316a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f841 	bl	80031ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3304      	adds	r3, #4
 800317a:	4619      	mov	r1, r3
 800317c:	4610      	mov	r0, r2
 800317e:	f000 fa69 	bl	8003654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800321a:	2302      	movs	r3, #2
 800321c:	e0ff      	b.n	800341e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b14      	cmp	r3, #20
 800322a:	f200 80f0 	bhi.w	800340e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800322e:	a201      	add	r2, pc, #4	@ (adr r2, 8003234 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003234:	08003289 	.word	0x08003289
 8003238:	0800340f 	.word	0x0800340f
 800323c:	0800340f 	.word	0x0800340f
 8003240:	0800340f 	.word	0x0800340f
 8003244:	080032c9 	.word	0x080032c9
 8003248:	0800340f 	.word	0x0800340f
 800324c:	0800340f 	.word	0x0800340f
 8003250:	0800340f 	.word	0x0800340f
 8003254:	0800330b 	.word	0x0800330b
 8003258:	0800340f 	.word	0x0800340f
 800325c:	0800340f 	.word	0x0800340f
 8003260:	0800340f 	.word	0x0800340f
 8003264:	0800334b 	.word	0x0800334b
 8003268:	0800340f 	.word	0x0800340f
 800326c:	0800340f 	.word	0x0800340f
 8003270:	0800340f 	.word	0x0800340f
 8003274:	0800338d 	.word	0x0800338d
 8003278:	0800340f 	.word	0x0800340f
 800327c:	0800340f 	.word	0x0800340f
 8003280:	0800340f 	.word	0x0800340f
 8003284:	080033cd 	.word	0x080033cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fa94 	bl	80037bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0208 	orr.w	r2, r2, #8
 80032a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0204 	bic.w	r2, r2, #4
 80032b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6999      	ldr	r1, [r3, #24]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	619a      	str	r2, [r3, #24]
      break;
 80032c6:	e0a5      	b.n	8003414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fb0e 	bl	80038f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6999      	ldr	r1, [r3, #24]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	021a      	lsls	r2, r3, #8
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	619a      	str	r2, [r3, #24]
      break;
 8003308:	e084      	b.n	8003414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68b9      	ldr	r1, [r7, #8]
 8003310:	4618      	mov	r0, r3
 8003312:	f000 fb81 	bl	8003a18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69da      	ldr	r2, [r3, #28]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0208 	orr.w	r2, r2, #8
 8003324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	69da      	ldr	r2, [r3, #28]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0204 	bic.w	r2, r2, #4
 8003334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69d9      	ldr	r1, [r3, #28]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	61da      	str	r2, [r3, #28]
      break;
 8003348:	e064      	b.n	8003414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68b9      	ldr	r1, [r7, #8]
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fbf3 	bl	8003b3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69da      	ldr	r2, [r3, #28]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69d9      	ldr	r1, [r3, #28]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	021a      	lsls	r2, r3, #8
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	61da      	str	r2, [r3, #28]
      break;
 800338a:	e043      	b.n	8003414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fc66 	bl	8003c64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0208 	orr.w	r2, r2, #8
 80033a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0204 	bic.w	r2, r2, #4
 80033b6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80033ca:	e023      	b.n	8003414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fcb0 	bl	8003d38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033f6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	021a      	lsls	r2, r3, #8
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800340c:	e002      	b.n	8003414 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	75fb      	strb	r3, [r7, #23]
      break;
 8003412:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800341c:	7dfb      	ldrb	r3, [r7, #23]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop

08003428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_TIM_ConfigClockSource+0x1c>
 8003440:	2302      	movs	r3, #2
 8003442:	e0f6      	b.n	8003632 <HAL_TIM_ConfigClockSource+0x20a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003462:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800346e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a6f      	ldr	r2, [pc, #444]	@ (800363c <HAL_TIM_ConfigClockSource+0x214>)
 800347e:	4293      	cmp	r3, r2
 8003480:	f000 80c1 	beq.w	8003606 <HAL_TIM_ConfigClockSource+0x1de>
 8003484:	4a6d      	ldr	r2, [pc, #436]	@ (800363c <HAL_TIM_ConfigClockSource+0x214>)
 8003486:	4293      	cmp	r3, r2
 8003488:	f200 80c6 	bhi.w	8003618 <HAL_TIM_ConfigClockSource+0x1f0>
 800348c:	4a6c      	ldr	r2, [pc, #432]	@ (8003640 <HAL_TIM_ConfigClockSource+0x218>)
 800348e:	4293      	cmp	r3, r2
 8003490:	f000 80b9 	beq.w	8003606 <HAL_TIM_ConfigClockSource+0x1de>
 8003494:	4a6a      	ldr	r2, [pc, #424]	@ (8003640 <HAL_TIM_ConfigClockSource+0x218>)
 8003496:	4293      	cmp	r3, r2
 8003498:	f200 80be 	bhi.w	8003618 <HAL_TIM_ConfigClockSource+0x1f0>
 800349c:	4a69      	ldr	r2, [pc, #420]	@ (8003644 <HAL_TIM_ConfigClockSource+0x21c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	f000 80b1 	beq.w	8003606 <HAL_TIM_ConfigClockSource+0x1de>
 80034a4:	4a67      	ldr	r2, [pc, #412]	@ (8003644 <HAL_TIM_ConfigClockSource+0x21c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	f200 80b6 	bhi.w	8003618 <HAL_TIM_ConfigClockSource+0x1f0>
 80034ac:	4a66      	ldr	r2, [pc, #408]	@ (8003648 <HAL_TIM_ConfigClockSource+0x220>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	f000 80a9 	beq.w	8003606 <HAL_TIM_ConfigClockSource+0x1de>
 80034b4:	4a64      	ldr	r2, [pc, #400]	@ (8003648 <HAL_TIM_ConfigClockSource+0x220>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	f200 80ae 	bhi.w	8003618 <HAL_TIM_ConfigClockSource+0x1f0>
 80034bc:	4a63      	ldr	r2, [pc, #396]	@ (800364c <HAL_TIM_ConfigClockSource+0x224>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	f000 80a1 	beq.w	8003606 <HAL_TIM_ConfigClockSource+0x1de>
 80034c4:	4a61      	ldr	r2, [pc, #388]	@ (800364c <HAL_TIM_ConfigClockSource+0x224>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	f200 80a6 	bhi.w	8003618 <HAL_TIM_ConfigClockSource+0x1f0>
 80034cc:	4a60      	ldr	r2, [pc, #384]	@ (8003650 <HAL_TIM_ConfigClockSource+0x228>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	f000 8099 	beq.w	8003606 <HAL_TIM_ConfigClockSource+0x1de>
 80034d4:	4a5e      	ldr	r2, [pc, #376]	@ (8003650 <HAL_TIM_ConfigClockSource+0x228>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	f200 809e 	bhi.w	8003618 <HAL_TIM_ConfigClockSource+0x1f0>
 80034dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80034e0:	f000 8091 	beq.w	8003606 <HAL_TIM_ConfigClockSource+0x1de>
 80034e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80034e8:	f200 8096 	bhi.w	8003618 <HAL_TIM_ConfigClockSource+0x1f0>
 80034ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034f0:	f000 8089 	beq.w	8003606 <HAL_TIM_ConfigClockSource+0x1de>
 80034f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034f8:	f200 808e 	bhi.w	8003618 <HAL_TIM_ConfigClockSource+0x1f0>
 80034fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003500:	d03e      	beq.n	8003580 <HAL_TIM_ConfigClockSource+0x158>
 8003502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003506:	f200 8087 	bhi.w	8003618 <HAL_TIM_ConfigClockSource+0x1f0>
 800350a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800350e:	f000 8086 	beq.w	800361e <HAL_TIM_ConfigClockSource+0x1f6>
 8003512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003516:	d87f      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x1f0>
 8003518:	2b70      	cmp	r3, #112	@ 0x70
 800351a:	d01a      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0x12a>
 800351c:	2b70      	cmp	r3, #112	@ 0x70
 800351e:	d87b      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x1f0>
 8003520:	2b60      	cmp	r3, #96	@ 0x60
 8003522:	d050      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x19e>
 8003524:	2b60      	cmp	r3, #96	@ 0x60
 8003526:	d877      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x1f0>
 8003528:	2b50      	cmp	r3, #80	@ 0x50
 800352a:	d03c      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0x17e>
 800352c:	2b50      	cmp	r3, #80	@ 0x50
 800352e:	d873      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x1f0>
 8003530:	2b40      	cmp	r3, #64	@ 0x40
 8003532:	d058      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0x1be>
 8003534:	2b40      	cmp	r3, #64	@ 0x40
 8003536:	d86f      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x1f0>
 8003538:	2b30      	cmp	r3, #48	@ 0x30
 800353a:	d064      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x1de>
 800353c:	2b30      	cmp	r3, #48	@ 0x30
 800353e:	d86b      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x1f0>
 8003540:	2b20      	cmp	r3, #32
 8003542:	d060      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x1de>
 8003544:	2b20      	cmp	r3, #32
 8003546:	d867      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x1f0>
 8003548:	2b00      	cmp	r3, #0
 800354a:	d05c      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x1de>
 800354c:	2b10      	cmp	r3, #16
 800354e:	d05a      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x1de>
 8003550:	e062      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003562:	f000 fcd1 	bl	8003f08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003574:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	609a      	str	r2, [r3, #8]
      break;
 800357e:	e04f      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003590:	f000 fcba 	bl	8003f08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035a2:	609a      	str	r2, [r3, #8]
      break;
 80035a4:	e03c      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b2:	461a      	mov	r2, r3
 80035b4:	f000 fc2c 	bl	8003e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2150      	movs	r1, #80	@ 0x50
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fc85 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 80035c4:	e02c      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035d2:	461a      	mov	r2, r3
 80035d4:	f000 fc4b 	bl	8003e6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2160      	movs	r1, #96	@ 0x60
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fc75 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 80035e4:	e01c      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035f2:	461a      	mov	r2, r3
 80035f4:	f000 fc0c 	bl	8003e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2140      	movs	r1, #64	@ 0x40
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fc65 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 8003604:	e00c      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f000 fc5c 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 8003616:	e003      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      break;
 800361c:	e000      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800361e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003630:	7bfb      	ldrb	r3, [r7, #15]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	00100070 	.word	0x00100070
 8003640:	00100060 	.word	0x00100060
 8003644:	00100050 	.word	0x00100050
 8003648:	00100040 	.word	0x00100040
 800364c:	00100030 	.word	0x00100030
 8003650:	00100020 	.word	0x00100020

08003654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a4c      	ldr	r2, [pc, #304]	@ (8003798 <TIM_Base_SetConfig+0x144>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d017      	beq.n	800369c <TIM_Base_SetConfig+0x48>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003672:	d013      	beq.n	800369c <TIM_Base_SetConfig+0x48>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a49      	ldr	r2, [pc, #292]	@ (800379c <TIM_Base_SetConfig+0x148>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00f      	beq.n	800369c <TIM_Base_SetConfig+0x48>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a48      	ldr	r2, [pc, #288]	@ (80037a0 <TIM_Base_SetConfig+0x14c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00b      	beq.n	800369c <TIM_Base_SetConfig+0x48>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a47      	ldr	r2, [pc, #284]	@ (80037a4 <TIM_Base_SetConfig+0x150>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d007      	beq.n	800369c <TIM_Base_SetConfig+0x48>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a46      	ldr	r2, [pc, #280]	@ (80037a8 <TIM_Base_SetConfig+0x154>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d003      	beq.n	800369c <TIM_Base_SetConfig+0x48>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a45      	ldr	r2, [pc, #276]	@ (80037ac <TIM_Base_SetConfig+0x158>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d108      	bne.n	80036ae <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a39      	ldr	r2, [pc, #228]	@ (8003798 <TIM_Base_SetConfig+0x144>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d023      	beq.n	80036fe <TIM_Base_SetConfig+0xaa>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036bc:	d01f      	beq.n	80036fe <TIM_Base_SetConfig+0xaa>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a36      	ldr	r2, [pc, #216]	@ (800379c <TIM_Base_SetConfig+0x148>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d01b      	beq.n	80036fe <TIM_Base_SetConfig+0xaa>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a35      	ldr	r2, [pc, #212]	@ (80037a0 <TIM_Base_SetConfig+0x14c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d017      	beq.n	80036fe <TIM_Base_SetConfig+0xaa>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a34      	ldr	r2, [pc, #208]	@ (80037a4 <TIM_Base_SetConfig+0x150>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <TIM_Base_SetConfig+0xaa>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a33      	ldr	r2, [pc, #204]	@ (80037a8 <TIM_Base_SetConfig+0x154>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00f      	beq.n	80036fe <TIM_Base_SetConfig+0xaa>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a33      	ldr	r2, [pc, #204]	@ (80037b0 <TIM_Base_SetConfig+0x15c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00b      	beq.n	80036fe <TIM_Base_SetConfig+0xaa>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a32      	ldr	r2, [pc, #200]	@ (80037b4 <TIM_Base_SetConfig+0x160>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d007      	beq.n	80036fe <TIM_Base_SetConfig+0xaa>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a31      	ldr	r2, [pc, #196]	@ (80037b8 <TIM_Base_SetConfig+0x164>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d003      	beq.n	80036fe <TIM_Base_SetConfig+0xaa>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a2c      	ldr	r2, [pc, #176]	@ (80037ac <TIM_Base_SetConfig+0x158>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d108      	bne.n	8003710 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a18      	ldr	r2, [pc, #96]	@ (8003798 <TIM_Base_SetConfig+0x144>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d013      	beq.n	8003764 <TIM_Base_SetConfig+0x110>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a1a      	ldr	r2, [pc, #104]	@ (80037a8 <TIM_Base_SetConfig+0x154>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00f      	beq.n	8003764 <TIM_Base_SetConfig+0x110>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a1a      	ldr	r2, [pc, #104]	@ (80037b0 <TIM_Base_SetConfig+0x15c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00b      	beq.n	8003764 <TIM_Base_SetConfig+0x110>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a19      	ldr	r2, [pc, #100]	@ (80037b4 <TIM_Base_SetConfig+0x160>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d007      	beq.n	8003764 <TIM_Base_SetConfig+0x110>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a18      	ldr	r2, [pc, #96]	@ (80037b8 <TIM_Base_SetConfig+0x164>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <TIM_Base_SetConfig+0x110>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a13      	ldr	r2, [pc, #76]	@ (80037ac <TIM_Base_SetConfig+0x158>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d103      	bne.n	800376c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b01      	cmp	r3, #1
 800377c:	d105      	bne.n	800378a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f023 0201 	bic.w	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	611a      	str	r2, [r3, #16]
  }
}
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40012c00 	.word	0x40012c00
 800379c:	40000400 	.word	0x40000400
 80037a0:	40000800 	.word	0x40000800
 80037a4:	40000c00 	.word	0x40000c00
 80037a8:	40013400 	.word	0x40013400
 80037ac:	40015000 	.word	0x40015000
 80037b0:	40014000 	.word	0x40014000
 80037b4:	40014400 	.word	0x40014400
 80037b8:	40014800 	.word	0x40014800

080037bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	f023 0201 	bic.w	r2, r3, #1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0303 	bic.w	r3, r3, #3
 80037f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f023 0302 	bic.w	r3, r3, #2
 8003808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a30      	ldr	r2, [pc, #192]	@ (80038d8 <TIM_OC1_SetConfig+0x11c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d013      	beq.n	8003844 <TIM_OC1_SetConfig+0x88>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a2f      	ldr	r2, [pc, #188]	@ (80038dc <TIM_OC1_SetConfig+0x120>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00f      	beq.n	8003844 <TIM_OC1_SetConfig+0x88>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a2e      	ldr	r2, [pc, #184]	@ (80038e0 <TIM_OC1_SetConfig+0x124>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00b      	beq.n	8003844 <TIM_OC1_SetConfig+0x88>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a2d      	ldr	r2, [pc, #180]	@ (80038e4 <TIM_OC1_SetConfig+0x128>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d007      	beq.n	8003844 <TIM_OC1_SetConfig+0x88>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a2c      	ldr	r2, [pc, #176]	@ (80038e8 <TIM_OC1_SetConfig+0x12c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d003      	beq.n	8003844 <TIM_OC1_SetConfig+0x88>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a2b      	ldr	r2, [pc, #172]	@ (80038ec <TIM_OC1_SetConfig+0x130>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d10c      	bne.n	800385e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f023 0308 	bic.w	r3, r3, #8
 800384a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f023 0304 	bic.w	r3, r3, #4
 800385c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a1d      	ldr	r2, [pc, #116]	@ (80038d8 <TIM_OC1_SetConfig+0x11c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d013      	beq.n	800388e <TIM_OC1_SetConfig+0xd2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a1c      	ldr	r2, [pc, #112]	@ (80038dc <TIM_OC1_SetConfig+0x120>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00f      	beq.n	800388e <TIM_OC1_SetConfig+0xd2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a1b      	ldr	r2, [pc, #108]	@ (80038e0 <TIM_OC1_SetConfig+0x124>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00b      	beq.n	800388e <TIM_OC1_SetConfig+0xd2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a1a      	ldr	r2, [pc, #104]	@ (80038e4 <TIM_OC1_SetConfig+0x128>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d007      	beq.n	800388e <TIM_OC1_SetConfig+0xd2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a19      	ldr	r2, [pc, #100]	@ (80038e8 <TIM_OC1_SetConfig+0x12c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d003      	beq.n	800388e <TIM_OC1_SetConfig+0xd2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a18      	ldr	r2, [pc, #96]	@ (80038ec <TIM_OC1_SetConfig+0x130>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d111      	bne.n	80038b2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800389c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	621a      	str	r2, [r3, #32]
}
 80038cc:	bf00      	nop
 80038ce:	371c      	adds	r7, #28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	40012c00 	.word	0x40012c00
 80038dc:	40013400 	.word	0x40013400
 80038e0:	40014000 	.word	0x40014000
 80038e4:	40014400 	.word	0x40014400
 80038e8:	40014800 	.word	0x40014800
 80038ec:	40015000 	.word	0x40015000

080038f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	f023 0210 	bic.w	r2, r3, #16
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800391e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800392a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f023 0320 	bic.w	r3, r3, #32
 800393e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a2c      	ldr	r2, [pc, #176]	@ (8003a00 <TIM_OC2_SetConfig+0x110>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d007      	beq.n	8003964 <TIM_OC2_SetConfig+0x74>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a2b      	ldr	r2, [pc, #172]	@ (8003a04 <TIM_OC2_SetConfig+0x114>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d003      	beq.n	8003964 <TIM_OC2_SetConfig+0x74>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a2a      	ldr	r2, [pc, #168]	@ (8003a08 <TIM_OC2_SetConfig+0x118>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d10d      	bne.n	8003980 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800396a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800397e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a1f      	ldr	r2, [pc, #124]	@ (8003a00 <TIM_OC2_SetConfig+0x110>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d013      	beq.n	80039b0 <TIM_OC2_SetConfig+0xc0>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a1e      	ldr	r2, [pc, #120]	@ (8003a04 <TIM_OC2_SetConfig+0x114>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00f      	beq.n	80039b0 <TIM_OC2_SetConfig+0xc0>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a1e      	ldr	r2, [pc, #120]	@ (8003a0c <TIM_OC2_SetConfig+0x11c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00b      	beq.n	80039b0 <TIM_OC2_SetConfig+0xc0>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a1d      	ldr	r2, [pc, #116]	@ (8003a10 <TIM_OC2_SetConfig+0x120>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d007      	beq.n	80039b0 <TIM_OC2_SetConfig+0xc0>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a14 <TIM_OC2_SetConfig+0x124>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d003      	beq.n	80039b0 <TIM_OC2_SetConfig+0xc0>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a17      	ldr	r2, [pc, #92]	@ (8003a08 <TIM_OC2_SetConfig+0x118>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d113      	bne.n	80039d8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	621a      	str	r2, [r3, #32]
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40012c00 	.word	0x40012c00
 8003a04:	40013400 	.word	0x40013400
 8003a08:	40015000 	.word	0x40015000
 8003a0c:	40014000 	.word	0x40014000
 8003a10:	40014400 	.word	0x40014400
 8003a14:	40014800 	.word	0x40014800

08003a18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0303 	bic.w	r3, r3, #3
 8003a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a2b      	ldr	r2, [pc, #172]	@ (8003b24 <TIM_OC3_SetConfig+0x10c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d007      	beq.n	8003a8a <TIM_OC3_SetConfig+0x72>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a2a      	ldr	r2, [pc, #168]	@ (8003b28 <TIM_OC3_SetConfig+0x110>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d003      	beq.n	8003a8a <TIM_OC3_SetConfig+0x72>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a29      	ldr	r2, [pc, #164]	@ (8003b2c <TIM_OC3_SetConfig+0x114>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d10d      	bne.n	8003aa6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8003b24 <TIM_OC3_SetConfig+0x10c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d013      	beq.n	8003ad6 <TIM_OC3_SetConfig+0xbe>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8003b28 <TIM_OC3_SetConfig+0x110>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00f      	beq.n	8003ad6 <TIM_OC3_SetConfig+0xbe>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b30 <TIM_OC3_SetConfig+0x118>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00b      	beq.n	8003ad6 <TIM_OC3_SetConfig+0xbe>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8003b34 <TIM_OC3_SetConfig+0x11c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d007      	beq.n	8003ad6 <TIM_OC3_SetConfig+0xbe>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b38 <TIM_OC3_SetConfig+0x120>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d003      	beq.n	8003ad6 <TIM_OC3_SetConfig+0xbe>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a16      	ldr	r2, [pc, #88]	@ (8003b2c <TIM_OC3_SetConfig+0x114>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d113      	bne.n	8003afe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	621a      	str	r2, [r3, #32]
}
 8003b18:	bf00      	nop
 8003b1a:	371c      	adds	r7, #28
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	40012c00 	.word	0x40012c00
 8003b28:	40013400 	.word	0x40013400
 8003b2c:	40015000 	.word	0x40015000
 8003b30:	40014000 	.word	0x40014000
 8003b34:	40014400 	.word	0x40014400
 8003b38:	40014800 	.word	0x40014800

08003b3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	031b      	lsls	r3, r3, #12
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a2c      	ldr	r2, [pc, #176]	@ (8003c4c <TIM_OC4_SetConfig+0x110>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d007      	beq.n	8003bb0 <TIM_OC4_SetConfig+0x74>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a2b      	ldr	r2, [pc, #172]	@ (8003c50 <TIM_OC4_SetConfig+0x114>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d003      	beq.n	8003bb0 <TIM_OC4_SetConfig+0x74>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a2a      	ldr	r2, [pc, #168]	@ (8003c54 <TIM_OC4_SetConfig+0x118>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d10d      	bne.n	8003bcc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	031b      	lsls	r3, r3, #12
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a1f      	ldr	r2, [pc, #124]	@ (8003c4c <TIM_OC4_SetConfig+0x110>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d013      	beq.n	8003bfc <TIM_OC4_SetConfig+0xc0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c50 <TIM_OC4_SetConfig+0x114>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00f      	beq.n	8003bfc <TIM_OC4_SetConfig+0xc0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a1e      	ldr	r2, [pc, #120]	@ (8003c58 <TIM_OC4_SetConfig+0x11c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00b      	beq.n	8003bfc <TIM_OC4_SetConfig+0xc0>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a1d      	ldr	r2, [pc, #116]	@ (8003c5c <TIM_OC4_SetConfig+0x120>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d007      	beq.n	8003bfc <TIM_OC4_SetConfig+0xc0>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a1c      	ldr	r2, [pc, #112]	@ (8003c60 <TIM_OC4_SetConfig+0x124>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <TIM_OC4_SetConfig+0xc0>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a17      	ldr	r2, [pc, #92]	@ (8003c54 <TIM_OC4_SetConfig+0x118>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d113      	bne.n	8003c24 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c02:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003c0a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	019b      	lsls	r3, r3, #6
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	019b      	lsls	r3, r3, #6
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	621a      	str	r2, [r3, #32]
}
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	40013400 	.word	0x40013400
 8003c54:	40015000 	.word	0x40015000
 8003c58:	40014000 	.word	0x40014000
 8003c5c:	40014400 	.word	0x40014400
 8003c60:	40014800 	.word	0x40014800

08003c64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003ca8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	041b      	lsls	r3, r3, #16
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a19      	ldr	r2, [pc, #100]	@ (8003d20 <TIM_OC5_SetConfig+0xbc>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d013      	beq.n	8003ce6 <TIM_OC5_SetConfig+0x82>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a18      	ldr	r2, [pc, #96]	@ (8003d24 <TIM_OC5_SetConfig+0xc0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00f      	beq.n	8003ce6 <TIM_OC5_SetConfig+0x82>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a17      	ldr	r2, [pc, #92]	@ (8003d28 <TIM_OC5_SetConfig+0xc4>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00b      	beq.n	8003ce6 <TIM_OC5_SetConfig+0x82>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a16      	ldr	r2, [pc, #88]	@ (8003d2c <TIM_OC5_SetConfig+0xc8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d007      	beq.n	8003ce6 <TIM_OC5_SetConfig+0x82>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a15      	ldr	r2, [pc, #84]	@ (8003d30 <TIM_OC5_SetConfig+0xcc>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d003      	beq.n	8003ce6 <TIM_OC5_SetConfig+0x82>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a14      	ldr	r2, [pc, #80]	@ (8003d34 <TIM_OC5_SetConfig+0xd0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d109      	bne.n	8003cfa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	621a      	str	r2, [r3, #32]
}
 8003d14:	bf00      	nop
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	40012c00 	.word	0x40012c00
 8003d24:	40013400 	.word	0x40013400
 8003d28:	40014000 	.word	0x40014000
 8003d2c:	40014400 	.word	0x40014400
 8003d30:	40014800 	.word	0x40014800
 8003d34:	40015000 	.word	0x40015000

08003d38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	021b      	lsls	r3, r3, #8
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	051b      	lsls	r3, r3, #20
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8003df8 <TIM_OC6_SetConfig+0xc0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d013      	beq.n	8003dbc <TIM_OC6_SetConfig+0x84>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a19      	ldr	r2, [pc, #100]	@ (8003dfc <TIM_OC6_SetConfig+0xc4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00f      	beq.n	8003dbc <TIM_OC6_SetConfig+0x84>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a18      	ldr	r2, [pc, #96]	@ (8003e00 <TIM_OC6_SetConfig+0xc8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d00b      	beq.n	8003dbc <TIM_OC6_SetConfig+0x84>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a17      	ldr	r2, [pc, #92]	@ (8003e04 <TIM_OC6_SetConfig+0xcc>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d007      	beq.n	8003dbc <TIM_OC6_SetConfig+0x84>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a16      	ldr	r2, [pc, #88]	@ (8003e08 <TIM_OC6_SetConfig+0xd0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d003      	beq.n	8003dbc <TIM_OC6_SetConfig+0x84>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a15      	ldr	r2, [pc, #84]	@ (8003e0c <TIM_OC6_SetConfig+0xd4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d109      	bne.n	8003dd0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	029b      	lsls	r3, r3, #10
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	621a      	str	r2, [r3, #32]
}
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40012c00 	.word	0x40012c00
 8003dfc:	40013400 	.word	0x40013400
 8003e00:	40014000 	.word	0x40014000
 8003e04:	40014400 	.word	0x40014400
 8003e08:	40014800 	.word	0x40014800
 8003e0c:	40015000 	.word	0x40015000

08003e10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	f023 0201 	bic.w	r2, r3, #1
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f023 030a 	bic.w	r3, r3, #10
 8003e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	621a      	str	r2, [r3, #32]
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b087      	sub	sp, #28
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	f023 0210 	bic.w	r2, r3, #16
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	031b      	lsls	r3, r3, #12
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003eaa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	621a      	str	r2, [r3, #32]
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003ee4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f043 0307 	orr.w	r3, r3, #7
 8003ef4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	609a      	str	r2, [r3, #8]
}
 8003efc:	bf00      	nop
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	021a      	lsls	r2, r3, #8
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	609a      	str	r2, [r3, #8]
}
 8003f3c:	bf00      	nop
 8003f3e:	371c      	adds	r7, #28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e074      	b.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a34      	ldr	r2, [pc, #208]	@ (8004058 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d009      	beq.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a33      	ldr	r2, [pc, #204]	@ (800405c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d004      	beq.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a31      	ldr	r2, [pc, #196]	@ (8004060 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d108      	bne.n	8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003fa4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a21      	ldr	r2, [pc, #132]	@ (8004058 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d022      	beq.n	800401e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe0:	d01d      	beq.n	800401e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8004064 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d018      	beq.n	800401e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8004068 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d013      	beq.n	800401e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800406c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00e      	beq.n	800401e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a15      	ldr	r2, [pc, #84]	@ (800405c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d009      	beq.n	800401e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a18      	ldr	r2, [pc, #96]	@ (8004070 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d004      	beq.n	800401e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a11      	ldr	r2, [pc, #68]	@ (8004060 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d10c      	bne.n	8004038 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	4313      	orrs	r3, r2
 800402e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40012c00 	.word	0x40012c00
 800405c:	40013400 	.word	0x40013400
 8004060:	40015000 	.word	0x40015000
 8004064:	40000400 	.word	0x40000400
 8004068:	40000800 	.word	0x40000800
 800406c:	40000c00 	.word	0x40000c00
 8004070:	40014000 	.word	0x40014000

08004074 <memset>:
 8004074:	4402      	add	r2, r0
 8004076:	4603      	mov	r3, r0
 8004078:	4293      	cmp	r3, r2
 800407a:	d100      	bne.n	800407e <memset+0xa>
 800407c:	4770      	bx	lr
 800407e:	f803 1b01 	strb.w	r1, [r3], #1
 8004082:	e7f9      	b.n	8004078 <memset+0x4>

08004084 <__libc_init_array>:
 8004084:	b570      	push	{r4, r5, r6, lr}
 8004086:	4d0d      	ldr	r5, [pc, #52]	@ (80040bc <__libc_init_array+0x38>)
 8004088:	4c0d      	ldr	r4, [pc, #52]	@ (80040c0 <__libc_init_array+0x3c>)
 800408a:	1b64      	subs	r4, r4, r5
 800408c:	10a4      	asrs	r4, r4, #2
 800408e:	2600      	movs	r6, #0
 8004090:	42a6      	cmp	r6, r4
 8004092:	d109      	bne.n	80040a8 <__libc_init_array+0x24>
 8004094:	4d0b      	ldr	r5, [pc, #44]	@ (80040c4 <__libc_init_array+0x40>)
 8004096:	4c0c      	ldr	r4, [pc, #48]	@ (80040c8 <__libc_init_array+0x44>)
 8004098:	f000 f818 	bl	80040cc <_init>
 800409c:	1b64      	subs	r4, r4, r5
 800409e:	10a4      	asrs	r4, r4, #2
 80040a0:	2600      	movs	r6, #0
 80040a2:	42a6      	cmp	r6, r4
 80040a4:	d105      	bne.n	80040b2 <__libc_init_array+0x2e>
 80040a6:	bd70      	pop	{r4, r5, r6, pc}
 80040a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ac:	4798      	blx	r3
 80040ae:	3601      	adds	r6, #1
 80040b0:	e7ee      	b.n	8004090 <__libc_init_array+0xc>
 80040b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b6:	4798      	blx	r3
 80040b8:	3601      	adds	r6, #1
 80040ba:	e7f2      	b.n	80040a2 <__libc_init_array+0x1e>
 80040bc:	0800f4c4 	.word	0x0800f4c4
 80040c0:	0800f4c4 	.word	0x0800f4c4
 80040c4:	0800f4c4 	.word	0x0800f4c4
 80040c8:	0800f4c8 	.word	0x0800f4c8

080040cc <_init>:
 80040cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ce:	bf00      	nop
 80040d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d2:	bc08      	pop	{r3}
 80040d4:	469e      	mov	lr, r3
 80040d6:	4770      	bx	lr

080040d8 <_fini>:
 80040d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040da:	bf00      	nop
 80040dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040de:	bc08      	pop	{r3}
 80040e0:	469e      	mov	lr, r3
 80040e2:	4770      	bx	lr
